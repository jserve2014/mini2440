/* 
 *    Imagine for use with the Onyx (PCX-U) CPU interface 
 *
 *    Copyright (C) 2001 Randolph Chung <tausq at parisc-linux.org>
 *    Copyright (C) 2001 Hewlett-Packard (Grant Grundler)
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
#ifndef PERF_IMAGES_H
#define PERF_IMAGES_H

/* Magic numbers taken without modification from HPUX stuff */

#define PCXU_IMAGE_SIZE 584

static uint32_t onyx_images[][PCXU_IMAGE_SIZE/sizeof(uint32_t)] __read_mostly = {
/*
 * CPI:
 *
 * Counts the following:
 *
 * ctr0 : total cycles
 * ctr1 : total cycles where nothing retired
 * ctr2 : total instructions retired, including nullified
 * ctr3 : total instructions retired, less nullified instructions
 */
         {
         0x4c00c000, 0x00000000, 0x00060000, 0x00000000,
         0xe0e0e0e0, 0x004e0004, 0x07ffffff, 0xffc01380,
         0x0101ffff, 0xfffff104, 0xe000c07f, 0xfffffffc,
         0x01380010, 0x1fffffff, 0xff000000, 0x00000000,
         0x00000fff, 0xff00000f, 0xffff0000, 0x0fffff00,
         0x000fffff, 0x00000000, 0x00000000, 0x00ffffff,
         0xfffff000, 0x0000000f, 0xffffffff, 0xff000000,
         0x0000ffff, 0xfffffff0, 0x00000000, 0x0fffffff,
         0xffff0000, 0x00000000, 0x6fffffff, 0xffffffff,
         0xfff55fff, 0xffffffff, 0xffffffff, 0xf0000000,
         0xf0000030, 0x00003c00, 0x067f080c, 0x02019fc0,
         0x02804067, 0xf0009030, 0x19fc002c, 0x40067f08,
         0x0c12019f, 0xc0028440, 0x67f00091, 0x3019fc00,
         0x2fc007ff, 0xf800f001, 0xfffe003c, 0x007fff80,
         0x0f001fff, 0xe003c007, 0xfff800f0, 0x01fffe00,
         0x3c007fff, 0x800f001f, 0xffe003c0, 0x07fff800,
         0xf001fffe, 0x003c007f, 0xff800f00, 0x1fffe003,
         0xc007fff8, 0x00f001ff, 0xfe003c00, 0x7fff800f,
         0x001fffe0, 0x03c007ff, 0xf800f001, 0xfffe003c,
         0x007fff80, 0x0f001fff, 0xe003c007, 0xfff800f0,
         0x01fffe00, 0x3c007fff, 0x800f001f, 0xffe00000,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
         0x6fff0000, 0x00000000, 0x60000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0x00030000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff},

/* Bus utilization image (bus_util)
 *
 * ctr0 : counts address valid cycles
 * ctr1 : counts data valid cycles
 * ctr2 : counts overflow from counter 0
 * ctr3 : counts overflow from counter 1
 */
         {
         0x0c01e000, 0x00000000, 0x00060000, 0x00000000,
         0xefefefef, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xff000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffff0000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xf0000000,
         0x0000000c, 0x00003c00, 0x07930000, 0x0041e4c0,
         0x01002079, 0x3000800c, 0x1e4c0030, 0x00279300,
         0x010049e4, 0xc0014022, 0x79300090, 0x0c9e4c00,
         0x34004793, 0x00020051, 0xe4c00180, 0x24793000,
         0xa00d1e4c, 0x00380067, 0x93000300, 0x59e4c001,
         0xc0267930, 0x00b00d9e, 0x4c003fff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xfffffc00,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
         0xffff0000, 0x00000000, 0xf0000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffffff, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0x00100000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff },

/*
 * TLB counts (same as tlbStats image):
 *
 * Counts the following:
 *
 * ctr0: DTLB misses
 * ctr1: ITLB misses
 * ctr2: total cycles in the miss handlers
 * ctr3: total cycles
 */

         {
         0x0c00c000, 0x00000000, 0x00060000, 0x00000000,
         0xe7e7e0e0, 0x004e0004, 0x07ffffff, 0xffc01380,
         0x0101ffff, 0xfffff104, 0xe000c06a, 0xafffc85c,
         0x01380010, 0x1fffffff, 0xff000000, 0x00000000,
         0x01b9e000, 0x0001b8c0, 0x00000000, 0x0fffff00,
         0x000fffff, 0x00000000, 0x00000000, 0x00400000,
         0x00001000, 0x00000004, 0x00000000, 0x01000000,
         0x0000ffff, 0xfffffff0, 0x00000000, 0x0fffffff,
         0xffff0000, 0x00000000, 0x6fffffff, 0xffffffff,
         0xfff55ff5, 0xffffffff, 0xffffffff, 0xf0000000,
         0xf0000000, 0x00003c00, 0x01ff0001, 0x08007fc2,
         0x02c1001f, 0xf0807100, 0x1bfc200c, 0x4806ff00,
         0x03f001ff, 0xfe003c00, 0x7fff800f, 0x001fffe0,
         0x03c007ff, 0xf800f001, 0xfffe003c, 0x007fff80,
         0x0f001fff, 0xe003c007, 0xfff800f0, 0x01fffe00,
         0x3c007fff, 0x800f001f, 0xffe003c0, 0x07fff800,
         0xf001fffe, 0x003c007f, 0xff800f00, 0x1fffe003,
         0xc007fff8, 0x00f001ff, 0xfe003c00, 0x7fff800f,
         0x001fffe0, 0x03c007ff, 0xf800f001, 0xfffe003c,
         0x007fff80, 0x0f001fff, 0xe003c007, 0xfff800f0,
         0x01fffe00, 0x3c007fff, 0x800f001f, 0xffe00000,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
         0x6fff0000, 0x00000000, 0x60000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0x00030000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff },

/* tlbHandMiss
 *
 * ctr0: counts TLB misses 
 * ctr1: counts dmisses inside tlb miss handlers 
 * ctr2: counts cycles in the tlb miss handlers 
 * ctr3: counts overflows of ctr2 
 */
{
0x1c00c000,00000000,0x00060000,00000000,
0xe7e7e0e0,0x004e0004,0x07ffffff,0xffc01380,
0x0101ffff,0xfffff104,0xe000c06a,0xafffc85c,
0x01380010,0x1fffffff,0xff000000,00000000,
0x01b9e000,0x0001b8c0,00000000,0x0fffff00,
0x000fffff,00000000,00000000,0x00400000,
0x00001000,0x00000004,00000000,0x01000000,
0x0000ffff,0xfffffff0,00000000,0x0fffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xfff55ff5,0xffffffff,0xffffffff,0xf0000000,
0xf0000000,0x00003c00,0x01fd0000,0x08007f42,
0x0281001f,0xd080a100,0x19f42008,0x44067d08,
0x0612019f,0x400084c0,0x67d00060,0x0047f400,
0x042011fd,0x080b0404,0x7f4202c4,0x0167d080,
0x311059f4,0x201c4816,0x7d000313,0x059f4001,
0xfc007fff,0x800f001f,0xffe003c0,0x07fff800,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x6fff0000,00000000,0x60000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* branch_taken image (ptkn image)
 *
 * ctr0: overflow for ctr1
 * ctr1: predicted taken branches, actually taken
 * ctr2: all predicted taken branches (nullfied or not)
 * ctr3: overflow for ctr2
 */

        {
        0xcc01e000, 0x00000000, 0x00060000, 0x00000000,
        0xa08080a0, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xff000000, 0x00000000,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0x00000000, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffff0000, 0x00000000, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xf0000000,
        0xf0000000, 0x00003c00, 0x04f90000, 0x02013e40,
        0x0081004f, 0x90004060, 0x13e40018, 0x0024f900,
        0x0802093e, 0x40028102, 0x4f9000c0, 0x6093e400,
        0x380014f9, 0x00010205, 0x3e4000c1, 0x014f9000,
        0x506053e4, 0x001c0034, 0xf9000902, 0x0d3e4002,
        0xc1034f90, 0x00d060d3, 0xe4003fff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xfffffc00,
        0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0xffff0000, 0x00000000, 0xf0000000, 0x00000000,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
        0xffffffff, 0xffffffff, 0xf3ffffff, 0xffffffff,
        0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
        0xffffffff, 0xffffffff, 0xf3ffffff, 0xffffffff,
        0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
        0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
        0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
        0x00030000, 0x00000000, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff },

/* branch_nottaken (pntkn image)
 *
 * ctr0: overflow for ctr1
 * ctr1: counts branches predicted not-taken, but actually taken
 * ctr2: counts all predictable branches predicted not-taken
 * ctr3: overflow for ctr2
 */
{
0xcc01e000,00000000,0x00060000,00000000,
0xc0c0c0e0,0xffb1fffb,0xfff7ffff,0xffffffff,
0xffffffff,0xfffffffb,0x1fffbfff,0x7fffffff,
0xfcc7ffff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},


/* imiss image
 *
 * ctr0 : counts imiss aligned on 0
 * ctr1 : counts imiss aligned on 4
 * ctr2 : counts imiss aligned on 8
 * ctr3 : counts imiss aligned on C
 */
         {
         0x0c00c000, 0x00000000, 0x00010000, 0x00000000,
         0xe7ebedee, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xff000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffff0000, 0x00000000, 0x6fffffff, 0xffffffff,
         0xfff55fff, 0xffffffff, 0xffffffff, 0xf0000000,
         0xf0000000, 0x00003c00, 0x007f0000, 0x01001fc0,
         0x00408007, 0xf0002030, 0x01fc000c, 0x10007f00,
         0x0405001f, 0xc0014180, 0x07f00060, 0x7001fc00,
         0x1c20007f, 0x00080900, 0x1fc00242, 0x8007f000,
         0xa0b001fc, 0x002c3000, 0x7f000c0d, 0x001fc003,
         0x438007f0, 0x00e0f001, 0xfc003fff, 0xfffff800,
         0xfffffffe, 0x003fffff, 0xff800fff, 0xffffe003,
         0xfffffff8, 0x00ffffff, 0xfe003fff, 0xffff800f,
         0xffffffe0, 0x03ffffff, 0xf800ffff, 0xfffe003f,
         0xffffff80, 0x0fffffff, 0xe003ffff, 0xfff800ff,
         0xfffffe00, 0x3fffffff, 0x800fffff, 0xffe00000,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
         0x6fff0000, 0x00000000, 0x60000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0x00030000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff},

/* dmiss image
 * 
 * ctr0 : counts cycles
 * ctr1 : counts cycles where something retired
 * ctr2 : counts dmisses
 * ctr3 : (same as ctr2)
 */
         {
         0x3c00c000, 0x00000000, 0x00060000, 0x00000000,
         0xe0e0e0e0, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xff000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffff0000, 0x00000000, 0x6fffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xf0000000,
         0xf0000000, 0x00003c04, 0x007f0009, 0x02001fc0,
         0x0280c007, 0xf000b040, 0x01fc0030, 0x14007f00,
         0x0d06001f, 0xc00381c0, 0x07f000f0, 0x8001fc00,
         0x2024007f, 0x00090a00, 0x1fc00282, 0xc007f000,
         0xb0c001fc, 0x00303400, 0x7f000d0e, 0x001fc003,
         0x83c007f0, 0x00f00001, 0xfc0023ff, 0xfffff800,
         0xfffffffe, 0x003fffff, 0xff800fff, 0xffffe003,
         0xfffffff8, 0x00ffffff, 0xfe003fff, 0xffff800f,
         0xffffffe0, 0x03ffffff, 0xf800ffff, 0xfffe003f,
         0xffffff80, 0x0fffffff, 0xe003ffff, 0xfff800ff,
         0xfffffe00, 0x3fffffff, 0x800fffff, 0xffe00000,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
         0x6fff0000, 0x00000000, 0x60000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
         0x00030000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff },

/* dcmiss 
 *
 * ctr0: counts store instructions retired 
 * ctr1: counts load instructions retired
 * ctr2: counts dmisses 
 * ctr3: counts READ_SHARED_OR_PRIV and READ_PRIVATE transactions on Runway 
 */
{
0x2c90c000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf00000e8,0x00003c02,0x00bf0001,0x02002fc0,
0x0080a00b,0xf0003040,0x02fc0010,0x1200bf00,
0x0506002f,0xc00181a0,0x0bf00070,0x8002fc00,
0x202200bf,0x00090a00,0x2fc00282,0xa00bf000,
0xb0c002fc,0x00303200,0xbf000d0e,0x002fc003,
0x83a00bf0,0x00ffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0x6fff0000,00000000,0x60000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0x55555555,0xd5555555,
0x55555555,0x75555555,0x5e1ffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,0xf4000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff },

/* big_cpi
 *
 * ctr0: counts total cycles 
 * ctr1: counts overflows of ctr0 (for greater than 32-bit values) 
 * ctr2: counts overflows of ctr3 (for greater than 32-bit values) 
 * ctr3: counts unnullified instructions retired 
 */
{
0x0c00c000,00000000,0x00060000,00000000,
0xe7e7e0e0,0x004e0004,0x07ffffff,0xffc01380,
0x0101ffff,0xfffff104,0xe000c06a,0xafffc85c,
0x01380010,0x1fffffff,0xff000000,00000000,
0x01b9e000,0x0001b8c0,00000000,0x0fffff00,
0x000fffff,00000000,00000000,0x00400000,
0x00001000,0x00000004,00000000,0x01000000,
0x0000ffff,0xfffffff0,00000000,0x0fffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xfff55ff5,0xffffffff,0xffffffff,0xf0000000,
0xf0000010,0x00003c00,0x01760008,0x00025d80,
0x02800417,0x6000c001,0x25d80038,0x04017600,
0x0901025d,0x8002c044,0x176000d0,0x1125d800,
0x3c2001f6,0x08080400,0x7d820203,0x001f6080,
0x804027d8,0x20282009,0xf6080a0c,0x027d8202,
0x81041f60,0x80c08107,0xd8203030,0x41f6080c,
0x04127d82,0x0382049f,0x6080e0c1,0x27d82038,
0x4006f608,0x081011bd,0x82030400,0xef6080a1,
0x013bd820,0x384806f6,0x00081211,0xbd800304,
0x80ef6000,0xa1213bd8,0x003bc007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x6fff0000,00000000,0x60000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* big_ls
 *
 * ctr0:counts the total number of cycles for which local_stall_A1 is asserted. 
 * ctr1: is the overflow for counter 0. 
 * ctr2: counts IFLUSH_AV 
 * ctr3: is the overflow for counter 2. 
 */
{
0x0c000000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x0fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
00000000,0x00029408,0x02f50002,0x0800bd40,
0x0202802f,0x5000a000,0x4bd40004,0x0812f500,
0x030804bd,0x40024281,0x2f5000b0,0x010bd400,
0x100842f5,0x00060810,0xbd400302,0x842f5000,
0xe0014bd4,0x00140852,0xf5000708,0x14bd4003,
0x42852f50,0x00ff001f,0xffe003c0,0x07fff800,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x0df70000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* br_abort
 *
 * ctr0: counts BRAD_STALLH 
 * ctr1: counts ONE_QUAD 
 * ctr2: counts BR0_ABRT 
 * ctr3: counts BR1_ABRT
 */
{
0x0c002000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x1fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x1a250000,00000000,0x10000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* isnt
 *
 * ctr0: counts the total number of cycles for which iside_notrans is asserted 
 * ctr1: counts the number of times iside_notrans is asserted for 1-4 cycles 
 * ctr2: counts the number of times iside_notrans is asserted for 5-7 cycles 
 * ctr3: counts the number of times iside_notrans is asserted for > 7 cycles 
 */
{
0x0c018000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xcfffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
00000000,0x00021c20,0x03ff0808,0x1800ffc4,
0x0204003f,0xf0004280,0x0ffc6020,0x8003ff00,
0x043800ff,0xc8020c00,0x3ff00044,0x800ffca0,
0x210003ff,0x00045800,0xffcc0214,0x003ff000,
0x26800ffc,0xe0218003,0xff000278,0x00ffd002,
0x1c003ff0,0x0028800f,0xfd002200,0x03ff0001,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0xcdff0000,00000000,0xc0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* quadrant
 *
 * ctr0: Total number of instructions in quadrant 0 
 * ctr1: Total number of instructions in quadrant 1 
 * ctr2: Total number of instructions in quadrant 2 
 * ctr3: Total number of instructions in quadrant 3 
 * Works only with 32-bit
 */

   {
   0x0c01e000,   0x00000000,   0x00060000,   0x00000000,
   0xe0e0e0e0,   0x004e0004,   0x07ffffff,   0xffc01380,
   0x0101ffff,   0xfffff004,   0xe000407f,   0xfffffffc,
   0x01380010,   0x1fffffff,   0xff000000,   0x00000000,
   0x00000fff,   0xff00000f,   0xffff0000,   0x0fffff00,
   0x000fffff,   0x00000000,   0x00000000,   0x00ffffff,
   0xffcff000,   0x0000040f,   0xfffffffc,   0xff000000,
   0x0080ffff,   0xffffcff0,   0x0000000c,   0x0fffffff,
   0xfcff0000,   0x00000000,   0xffffffff,   0xffffffff,
   0xfff55ff5,   0x5fffffff,   0xffffffff,   0xf0000000,
   0xf00000f0,   0x00003c00,   0x007f0000,   0x01001fc0,
   0x00408007,   0xf0002030,   0x01fc000c,   0x10007f00,
   0x0405001f,   0xc0014180,   0x07f00060,   0x7001fc00,
   0x1c20007f,   0x00080900,   0x1fc00242,   0x8007f000,
   0xa0b001fc,   0x002c3000,   0x7f000c0d,   0x001fc003,
   0x438007f0,   0x00e0f001,   0xfc003fff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xfffffc00,
   0x00000000,   0x00000000,   0x00000000,   0x00000000,
   0xffff0000,   0x00000000,   0xf0000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xfffffc00,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xfffffc00,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0x00030000,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff},

/* rw_pdfet (READ_PRIV transactions)
 *
 * ctr0: counts address valid cycles 
 * ctr1: counts *all* data valid cycles 
 * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1 
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x0000000c,0x00003c00,0x07930000,0x0041e4c0,
0x01002079,0x3000800c,0x1e4c0030,0x00279300,
0x010049e4,0xc0014022,0x79300090,0x0c9e4c00,
0x34004793,0x00020051,0xe4c00180,0x24793000,
0xa00d1e4c,0x00380067,0x93000300,0x59e4c001,
0xc0267930,0x00b00d9e,0x4c003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff},

/* rw_wdfet (WRITEBACKS)
 *
 * ctr0: counts address valid cycles 
 * ctr1: counts *all* data valid cycles 
 * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x0000000c,0x00003c00,0x07930000,0x0041e4c0,
0x01002079,0x3000800c,0x1e4c0030,0x00279300,
0x010049e4,0xc0014022,0x79300090,0x0c9e4c00,
0x34004793,0x00020051,0xe4c00180,0x24793000,
0xa00d1e4c,0x00380067,0x93000300,0x59e4c001,
0xc0267930,0x00b00d9e,0x4c003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0x98000000,00000000,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff},

/* shlib_cpi
 *
 * ctr0: Total number of instructions in quad 0 
 * ctr1: Total number of CPU clock cycles in quad 0 
 * ctr2: total instructions without nullified   
 * ctr3: total number of CPU clock cycles 
 */
   {
   0x0c01e000,   0x00000000,   0x00060000,   0x00000000,
   0xe0e0e0e0,   0x004e0004,   0x07ffffff,   0xffc01380,
   0x0101ffff,   0xfffff004,   0xe000407f,   0xfffffffc,
   0x01380010,   0x1fffffff,   0xff000000,   0x00000000,
   0x00000fff,   0xff00000f,   0xffffffff,   0xffffffff,
   0xffffffff,   0x00000000,   0x00000000,   0x00ffffff,
   0xffcff000,   0x0000000f,   0xfffffffc,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffff0000,   0x00000000,   0xffffffff,   0xffffffff,
   0xfff77ff5,   0x7fffffff,   0xffffffff,   0xf0000000,
   0xf00000a0,   0x00003c00,   0x01ff0005,   0x08007fc0,
   0x03c1001f,   0xf08030c0,   0x07fc203c,   0x4001ff08,
   0x0118007f,   0xc003c500,   0x1ff08031,   0xc007fc00,
   0x3fffffff,   0xf800ffff,   0xfffe003f,   0xffffff80,
   0x0fffffff,   0xe003ffff,   0xfff800ff,   0xfffffe00,
   0x3fffffff,   0x800fffff,   0xffe003ff,   0xfffff800,
   0xfffffffe,   0x003fffff,   0xff800fff,   0xffffe003,
   0xfffffff8,   0x00ffffff,   0xfe003fff,   0xffff800f,
   0xffffffe0,   0x03ffffff,   0xf800ffff,   0xfffe003f,
   0xffffff80,   0x0fffffff,   0xe003ffff,   0xfff800ff,
   0xfffffe00,   0x3fffffff,   0x800fffff,   0xffe00000,
   0x00000000,   0x00000000,   0x00000000,   0x00000000,
   0xffff0000,   0x00000000,   0xf0000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xfffffc00,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xfffffc00,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0x00030000,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff},


/* addr_inv_abort_alu
 *
 * ctr0: counts ABORT_ALU0L 
 * ctr1: counts ABORT_ALU1L 
 * ctr2: counts ADDR0_INVALID 
 * ctr3: counts ADDR1_INVALID 
 */

{
0x0c00c000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000d,0x01001fc0,
0x03008007,0xf000f030,0x01fc0038,0x10007f00,
0x0905001f,0xc0020180,0x07f000b0,0x7001fc00,
0x2820007f,0x00050900,0x1fc00102,0x8007f000,
0x70b001fc,0x00183000,0x7f00010d,0x001fc000,
0x038007f0,0x0030f001,0xfc000bff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x65380000,00000000,0x60000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },



/* brad_stall
 *
 * ctr0: counts the total number of cycles for which brad_stall is asserted 
 * ctr1: counts the number of times brad_stall is asserted for 1-4 cycles 
 * ctr2: counts the number of times brad_stall is asserted for 5-7 cycles 
 * ctr3: counts the number of times brad_stall is asserted for > 7 cycles 
 */
{
0x0c002000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x1fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
00000000,0x00021c20,0x03ff0808,0x1800ffc4,
0x0204003f,0xf0004280,0x0ffc6020,0x8003ff00,
0x043800ff,0xc8020c00,0x3ff00044,0x800ffca0,
0x210003ff,0x00045800,0xffcc0214,0x003ff000,
0x26800ffc,0xe0218003,0xff000278,0x00ffd002,
0x1c003ff0,0x0028800f,0xfd002200,0x03ff0001,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x1bff0000,00000000,0x10000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* cntl_in_pipel
 *
 * ctr0: counts the total number of cycles for which cntl_in_pipel is asserted 
 * ctr1: counts the number of times cntl_in_pipel is asserted for 1-4 cycles 
 * ctr2: counts the number of times cntl_in_pipel is asserted for 5-7 cycles 
 * ctr3: counts the number of times cntl_in_pipel is asserted for > 7 cycles 
 */
{
0x0c006000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x3fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
00000000,0x00021c00,0x03ff0808,0x1000ffc4,
0x0206003f,0xf0004200,0x0ffc6020,0xa003ff00,
0x043000ff,0xc8020e00,0x3ff00044,0x000ffca0,
0x212003ff,0x00045000,0xffcc0216,0x003ff000,
0x26000ffc,0xe021a003,0xff000270,0x00ffd002,
0x1e003ff0,0x0028000f,0xfd002220,0x03ff0001,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x3fff0000,00000000,0x30000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },


/* dsnt_xfh
 *
 * ctr0: counts dside_notrans 
 * ctr1: counts xfhang 
 * ctr2: is the overflow for ctr0 
 * ctr3: is the overflow for ctr1 
 */
{
0x0c018000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xcfffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
00000000,0x00030000,0x01f30000,0x00087cc0,
0x0040041f,0x30002001,0x87cc000c,0x1001f300,
0x0404087c,0xc0014104,0x1f300060,0x4187cc00,
0x1c2001f3,0x00080808,0x7cc00242,0x041f3000,
0xa08187cc,0x002c3001,0xf3000c0c,0x087cc003,
0x43041f30,0x00e0c187,0xcc003fc0,0x07fff800,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0xcb3f0000,00000000,0xc0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff }, 

/* fet_sig1
 *
 * ctr0: counts ICORE_AV 
 * ctr1: counts ITRANS_STALL 
 * ctr2: counts SEL_PCQH 
 * ctr3: counts OUT_OF_CONTEXT 
 */
{
0x0c000000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x0fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x07c10000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* fet_sig2
 *
 * ctr0: counts ICORE_AV  
 * ctr1: counts IRTN_AV 
 * ctr2: counts ADDRESS_INC 
 * ctr3: counts ADDRESS_DEC 
 */
{
0x0c000000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x0fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x06930000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* g7_1
 *
 * ctr0: counts HIT_RETRY0 
 * ctr1: counts HIT_RETRY1 
 * ctr2: counts GO_TAG_E 
 * ctr3: counts GO_TAG_O 
 */
{
0x0c00e000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x7fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x71c10000,00000000,0x70000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* g7_2
 *
 * ctr0: counts HIT_DM0 
 * ctr1: counts HIT_DM1 
 * ctr2: counts GO_STORE_E 
 * ctr3: counts GO_STORE_O 
 */
{
0x0c00e000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x7fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x72930000,00000000,0x70000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* g7_3
 *
 * ctr0: counts HIT_DV0 
 * ctr1: counts HIT_DV1 
 * ctr2: counts STBYPT_E (load bypasses from store queue) 
 * ctr3: counts STBYPT_O
 */
{
0x0c00e000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x7fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f0002,0x01001fc0,
0x00c08007,0xf0000030,0x01fc0004,0x10007f00,
0x0605001f,0xc001c180,0x07f00040,0x7001fc00,
0x1420007f,0x000a0900,0x1fc002c2,0x8007f000,
0x80b001fc,0x00243000,0x7f000e0d,0x001fc003,
0xc38007f0,0x00c0f001,0xfc0037ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x77250000,00000000,0x70000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* g7_4
 *
 * ctr0: counts HIT_DIRTY0 
 * ctr1: counts HIT_DIRTY1 
 * ctr2: counts CA_BYP_E (quick launch) 
 * ctr3: counts CA_BYP_O 
 */
{
0x0c00e000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x7fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x7bb70000,00000000,0x70000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },


/* mpb_labort
 *
 * ctr0: counts L_ABORT_ALU0L
 * ctr1: counts L_ABORT_ALU1L 
 * ctr2: counts MPB0H 
 * ctr3: counts MPB1H 
 */
{
0x0c00c000,00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffa5ffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
00000000,0x0003f800,0x007f000e,0x01001fc0,
0x03c08007,0xf000c030,0x01fc0034,0x10007f00,
0x0a05001f,0xc002c180,0x07f00080,0x7001fc00,
0x2420007f,0x00060900,0x1fc001c2,0x8007f000,
0x40b001fc,0x00143000,0x7f00020d,0x001fc000,
0xc38007f0,0x0000f001,0xfc0007ff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0x605c0000,00000000,0x60000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* panic
 *
 * ctr0: is the overflow for counter 1 
 * ctr1: counts traps and RFI's 
 * ctr2: counts panic traps 
 * ctr3: is the overflow for counter 2
 */
{
0x0c002000,00000000,0x00060000,00000000,
0xe7efe0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffffc,
0x41380030,0x1aabfff2,0x17000000,00000000,
0x01b80000,0x3effffff,0xffffffff,0xffffffff,
0xffffffff,00000000,00000000,0x00400000,
0x00001fff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x1fffffff,0xffffffff,
0xfff7fff7,0xffffffff,0xffffffff,0xf0000000,
0xb0000000,0x00012c04,0x05790804,0x14013e44,
0x0008004f,0x90000040,0x15e46000,0xc0047920,
0x004a003e,0x40011080,0x0f900024,0x4003e460,
0x00c80479,0x00023301,0x1e400100,0x4157d080,
0x514053f4,0x40048014,0xfd000104,0x055f4600,
0x4c0147d2,0x0014a043,0xf4001508,0x10fd0003,
0x44043f46,0x004c8147,0xd0003330,0x51f40014,
0x04257908,0x0c14093e,0x44020802,0x4f900080,
0x4095e460,0x20c02479,0x20084a08,0x3e400310,
0x820f9000,0xa44083e4,0x6020c824,0x79000a33,
0x091e4003,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0x10400000,00000000,0x10000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* rare_inst
 *
 * ctr0: counts sync and syncdma instructions 
 * ctr1: counts pxtlbx,x instructions 
 * ctr2: counts ixtlbt instructions 
 * ctr3: counts cycles 
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xe0e0e0e0,0x004e000c,0x000843fc,0x85c09380,
0x0121ebfd,0xff217124,0xe0004000,0x943fc85f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xe00000e0,0x00003c00,0x007f0001,0x01001fc0,
0x00408007,0xf0003030,0x01fc000c,0x10007f00,
0x0505001f,0xc0014180,0x07f00070,0x7001fc00,
0x1c20007f,0x00090900,0x1fc00242,0x8007f000,
0xb0b001fc,0x002c3000,0x7f000d0d,0x001fc003,
0x438007f0,0x00f0f001,0xfc003fff,0xfffff800,
0xfffffffe,0x003fffff,0xff800fff,0xffffe003,
0xfffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff,0xfff800ff,
0xfffffe00,0x3fffffff,0x800fffff,0xffe00000,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* rw_dfet (for D-cache misses and writebacks)
 *
 * ctr0: counts address valid cycles 
 * ctr1: counts *all* data valid cycles 
 * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1 
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x0000000c,0x00003c00,0x07930000,0x0041e4c0,
0x01002079,0x3000800c,0x1e4c0030,0x00279300,
0x010049e4,0xc0014022,0x79300090,0x0c9e4c00,
0x34004793,0x00020051,0xe4c00180,0x24793000,
0xa00d1e4c,0x00380067,0x93000300,0x59e4c001,
0xc0267930,0x00b00d9e,0x4c003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf0000000,00000000,
00000000,00000000,0x98000000,00000000,
0xffffffff,0xffffffff,0x0fffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff },

/* rw_ifet (I-cache misses -- actually dumb READ transactions)
 *
 * ctr0: counts address valid cycles 
 * ctr1: counts *all* data valid cycles 
 * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1 
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x0000000c,0x00003c00,0x07930000,0x0041e4c0,
0x01002079,0x3000800c,0x1e4c0030,0x00279300,
0x010049e4,0xc0014022,0x79300090,0x0c9e4c00,
0x34004793,0x00020051,0xe4c00180,0x24793000,
0xa00d1e4c,0x00380067,0x93000300,0x59e4c001,
0xc0267930,0x00b00d9e,0x4c003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xd0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff,00000000,00000000,
0xffffffff,0xffffffff },


/* rw_sdfet (READ_SHARED_OR_PRIVATE transactions)
 *
 * ctr0: counts address valid cycles
 * ctr1: counts *all* data valid cycles 
 * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1 
 */
{
0x0c01e000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x0000000c,0x00003c00,0x07930000,0x0041e4c0,
0x01002079,0x3000800c,0x1e4c0030,0x00279300,
0x010049e4,0xc0014022,0x79300090,0x0c9e4c00,
0x34004793,0x00020051,0xe4c00180,0x24793000,
0xa00d1e4c,0x00380067,0x93000300,0x59e4c001,
0xc0267930,0x00b00d9e,0x4c003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf4000000,00000000,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff },


/* spec_ifet
 *
 * ICORE_AV fires for every request which the Instruction Fetch Unit sends
 * to the Runway Interface Block.  Hence, this counts all I-misses, speculative
 * or not, but does *not* include I-cache prefetches, which are generated by
 * RIB.
 * IRTN_AV fires twice for every I-cache miss returning from RIB to the IFU.
 * It will not fire if a second I-cache miss is issued from the IFU to RIB
 * before the first returns.  Therefore, if the IRTN_AV count is much less
 * than 2x the ICORE_AV count, many speculative I-cache misses are occurring
 * which are "discovered" to be incorrect fairly quickly.
 * The ratio of I-cache miss transactions on Runway to the ICORE_AV count is
 * a measure of the effectiveness of instruction prefetching.  This ratio
 * should be between 1 and 2.  If it is close to 1, most prefetches are
 * eventually called for by the IFU; if it is close to 2, almost no prefetches
 * are useful and they are wasted bus traffic.
 *
 * ctr0: counts ICORE_AV 
 * ctr1: counts IRTN_AV 
 * ctr2: counts all non-coherent READ transactions on Runway. (TTYPE D0) 
 *	This should be just I-cache miss and I-prefetch transactions.
 * ctr3: counts total processor cycles 
 */
{
0x0c000000,00000000,0x00060000,00000000,
0xefefefef,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x0fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0x00000008,0x00030c00,0x01bf0001,0x00806fc0,
0x00c1001b,0xf0005048,0x06fc001c,0x2001bf00,
0x0908806f,0xc002c300,0x1bf000d0,0xc806fc00,
0x3fffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0x06bf0000,00000000,00000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00110000,00000000,0xd0ffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff,00000000,00000000,
0xffffffff,0xffffffff },

/* st_cond0
 *
 * ctr0: is the overflow for ctr1
 * ctr1: counts major ops 0C and 0E (fp ops, not fmac or fmpyadd) 
 * ctr2: counts B,L (including long and push) and GATE (including nullified),
 *	 predicted not-taken
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0e0c0e0,0xffffffff,0xffffffff,0xffc13380,
0x0101ffff,0xffa1f057,0xe000407f,0xdfffc87f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_cond1
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts major ops 1x (most of the load/stores) 
 * ctr2: counts CMPB (dw) predicted not-taken 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0e0c0e0,0xffffffff,0xffffffff,0xffc01b80,
0x0101ffff,0xffb7f03d,0xe000407f,0xffffc8ff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_cond2
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts major op 03 
 * ctr2: counts CMPIB (dw) predicted not taken. 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0e0c0e0,0xffffffff,0xffffffff,0xffc09780,
0x0101ffff,0xff21f077,0xe000407f,0xffffc87f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_cond3
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts major ops 06 & 26 
 * ctr2: counts BB, BVB, MOVB, MOVIB (incl. nullified) predicted not-taken 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0e0c0e0,0xffffffff,0xffffffff,0xffc03780,
0x0101ffff,0xff29f016,0xe000407f,0xffffe97f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_cond4
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts major op 2E 
 * ctr2: counts CMPB, CMPIB, ADDB, ADDIB (incl. nullified) predicted not-taken 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0e0c0e0,0xffffffff,0xffffffff,0xffc17780,
0x0101ffff,0xff21f014,0xe000407f,0xffffe9ff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_unpred0
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts BE and BE,L 
 * ctr2: counts BE and BE,L including nullified 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0c0c0e0,0xffffffff,0xffffffff,0xffdf5bbf,
0xffffffff,0xff25f7d6,0xefffffff,0xffffc97f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* st_unpred1
 *
 * ctr0: is the overflow for ctr1 
 * ctr1: counts BLR, BV, BVE, BVE,L 
 * ctr2: counts BLR, BV, BVE, BVE,L including nullified 
 * ctr3: is the overflow for ctr2 
 */
{
0x4c01e000,00000000,0x00060000,00000000,
0xe0c0c0e0,0xffffffff,0xffffffff,0xffc15f80,
0x0501ff7f,0xff21f057,0xe001407f,0xdfffc87f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0000060,0x00003c00,0x04f90000,0x02013e40,
0x0081004f,0x90004060,0x13e40018,0x0024f900,
0x0802093e,0x40028102,0x4f9000c0,0x6093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },

/* unpred
 *
 * ctr0: counts non-nullified unpredictable branches 
 * ctr1: is the overflow for ctr0 
 * ctr2: counts all unpredictable branches (nullified or not) 
 * ctr3: is the overflow for ctr2 
 */
{
0xcc01e000,00000000,0x00060000,00000000,
0x20202020,0xff31ffff,0xfff7fffe,0x97ffcc7f,
0xfffffdff,0xffa5fff3,0x1fffffff,0x7fffe97f,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf00000a0,0x00003c00,0x02f50000,0x0004bd40,
0x0040802f,0x50002020,0x4bd4000c,0x0042f500,
0x040014bd,0x40014084,0x2f500060,0x214bd400,
0x1c2002f5,0x00080804,0xbd400242,0x802f5000,
0xa0a04bd4,0x002c2042,0xf5000c08,0x14bd4003,
0x42842f50,0x00e0a14b,0xd4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff },
   

/* go_store
 *
 * ctr0: Overflow for counter 2 
 * ctr1: Overflow for counter 3 
 * ctr2: count of GO_STORE_E signal 
 * ctr3: count of GO_STORE_O signal 
 */

   {
   0x0c00e000,   0x00000000,   0x00060000,   0x00000000,
   0xe0e0e0e0,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffa5ffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xff000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffff0000,   0x00000000,   0x7fffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xf0000000,
   0x00000000,   0x0000c000,   0x067c0000,   0x01019f00,
   0x00408067,   0xc0002030,   0x19f0000c,   0x000e7c00,
   0x0401039f,   0x00014080,   0xe7c00060,   0x3039f000,
   0x1c00167c,   0x00080105,   0x9f000240,   0x8167c000,
   0xa03059f0,   0x002c001e,   0x7c000c01,   0x079f0003,
   0x4081e7c0,   0x00e03079,   0xf0003fc0,   0x07fff800,
   0xf001fffe,   0x003c007f,   0xff800f00,   0x1fffe003,
   0xc007fff8,   0x00f001ff,   0xfe003c00,   0x7fff800f,
   0x001fffe0,   0x03c007ff,   0xf800f001,   0xfffe003c,
   0x007fff80,   0x0f001fff,   0xe003c007,   0xfff800f0,
   0x01fffe00,   0x3c007fff,   0x800f001f,   0xffe00000,
   0x00000000,   0x00000000,   0x00000000,   0x00000000,
   0x70130000,   0x00000000,   0x70000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xfffffc00,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xfffffc00,   0x00000000,
   0xffffaaaa,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffaaaa,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0x00030000,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff
   },


/* shlib_call
 *
 * ctr0: SharedLib call Depth1 
 * ctr1: SharedLib call Depth2 
 * ctr2: SharedLib call Depth3 
 * ctr3: SharedLib call Depth>3 
 */
   {
   0x0c01e000,   0x00000000,   0x00060000,   0x00000000,
   0xe0e0e0e0,   0xc76fa005,   0x07dd7e9c,   0x87115b80,
   0x01100200,   0x07200004,   0xe000407f,   0xfffffffc,
   0x01380010,   0x1fffffff,   0xff000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffff0000,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xf0000000,
   0xf0000000,   0x00003c20,   0x01ff0808,   0x04007fc0,
   0x0003001f,   0xf0000180,   0x07fc4010,   0x5001ff00,
   0x001c007f,   0xc2000a00,   0x1ff18022,   0x4007fc20,
   0x00b001ff,   0x10003800,   0x7fc8004d,   0x001ff100,
   0x03c007fc,   0x60012001,   0xff280144,   0x007fc600,
   0x13001ff2,   0x00058007,   0xfcc00550,   0x01ff2000,
   0x5c007fca,   0x001a001f,   0xf3801640,   0x07fca001,
   0xb001ff30,   0x0078007f,   0xd0005d00,   0x1ff30007,
   0xc007fce0,   0x022001ff,   0x48018400,   0x7fce0023,
   0x001ff400,   0x098007fd,   0x20065001,   0xff40009c,
   0x007fd200,   0x3fffffff,   0x800fffff,   0xffe00000,
   0x00000000,   0x00000000,   0x00000000,   0x00000000,
   0xffff0000,   0x00000000,   0xf0000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xfffffc00,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xfffffc00,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xffffffff,   0xf3ffffff,   0xffffffff,
   0xfdffffff,   0xffffffff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0xffffffff,   0xfffff9ff,   0xfe000000,   0x00000000,
   0x00030000,   0x00000000,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   0xffffffff,   0xffffffff
   }
};
#define PCXW_IMAGE_SIZE 576

static uint32_t cuda_images[][PCXW_IMAGE_SIZE/sizeof(uint32_t)] __read_mostly = {
/*
 * CPI:     FROM CPI.IDF (Image 0)
 *
 * Counts the following:
 *
 * ctr0 : total cycles
 * ctr1 : total cycles where nothing retired
 * ctr2 : total instructions retired, including nullified
 * ctr3 : total instructions retired, less nullified instructions
 */
   {
   0x4c00c000,   0x00000000,   0x00060000,   0x00000000, 
   0xe0e0e0e0,   0x00001fff,   0xfc00007f,   0xfff00001, 
   0xffffc000,   0x07ffff00,   0x07ffffff,   0x6007ffff, 
   0xff0007ff,   0xffff0007,   0xffffff00,   0x00000000, 
   0x60f00000,   0x0fffff00,   0x000fffff,   0x00000fff, 
   0xff00000f,   0xffff0000,   0x00000000,   0x00ffffff, 
   0xfffff000,   0x0000000f,   0xffffffff,   0xff000000, 
   0x0000ffff,   0xfffffff0,   0x00000000,   0x0fffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0x00270000,   0x00000055, 
   0x0200000e,   0x4d300000,   0x00000000,   0x0ff00002, 
   0x70000000,   0x00000020,   0x0000e400,   0x00000ff0, 
   0x00000000,   0x00000000,   0x00000055,   0xffffff00, 
   0x00000000,   0x0000ff00,   0x00000000,   0x0f000000, 
   0x0000055f,   0xfffff000,   0x00000000,   0x000ff000, 
   0x00000000,   0x00000000,   0x000055ff,   0xffff0000, 
   0x00000000,   0x00ff0000,   0x00000000,   0xf0000000, 
   0x000055ff,   0xffff0000,   0x00000000,   0x00ff0000, 
   0x00000000,   0x00000000,   0x00055fff,   0xfff00000, 
   0x00000000,   0x0ff00000,   0x00000030,   0x00000000, 
   0x00157fff,   0xffc00000,   0x034c0000,   0x00000000, 
   0x03fc0000,   0x00000000,   0x6fff0000,   0x00000000, 
   0x60000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff7fbfc,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff7fbfc,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00030000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },

/* Bus utilization image   FROM BUS_UTIL.IDF (Image 1)
 *
 * ctr0 : counts address valid cycles
 * ctr1 : counts data valid cycles
 * ctr2 : counts overflow from counter 0
 * ctr3 : counts overflow from counter 1
 */
         {
	 0x0c01e000, 0x00000000, 0x00060000, 0x00000000,
	 0xefefefef, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffff00, 0x00000000,
	 0xf0ffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffff0000, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffff0000, 0x00000000, 0x00000000, 0x00000000,
	 0x00000000, 0x00000000, 0x00001b00, 0xaa000000,
	 0x00000001, 0x30700000, 0x00055aaf, 0xf0000000,
	 0x01b00000, 0x00000000, 0x00001037, 0x00000000,
	 0x55aaff00, 0x00c00000, 0x1b55aa00, 0x00000000,
	 0x0001fff0, 0xcfffff00, 0x00000000, 0x0f0fffff,
	 0xffffffff, 0xffffffff, 0x30ffff0c, 0xfffff000,
	 0x00000000, 0x00ffffff, 0xffffffff, 0xfffffff3,
	 0x0ffff0cf, 0xffff0000, 0x00000000, 0x00ffffff,
	 0xffffffff, 0xfffffff3, 0x0ffff0cf, 0xffff0000,
	 0x00000000, 0x0fffffff, 0xffffffff, 0xffffff30,
	 0xfff70000, 0x000055aa, 0xff000000, 0x000006d5,
	 0x40000000, 0x00000000, 0x731c0000, 0x000156ab,
	 0xfc000000, 0x00000000, 0xffff0000, 0x00000000,
	 0xf0000000, 0x00000000, 0x00ffffff, 0xff3fffff,
	 0xffffffff, 0xffcfffff, 0xfff7fbfc, 0x00000000,
	 0x00ffffff, 0xff3fffff, 0xffffffff, 0xffcfffff,
	 0xfff7fbfc, 0x00000000, 0xffffffff, 0xffffff3f,
	 0xffffffff, 0xffffff7f, 0xffffffff, 0xfffffefc,
	 0x00000000, 0x00000000, 0xffffffff, 0xffffff3f,
	 0xffffffff, 0xffffff7f, 0xffffffff, 0xfffffefc,
	 0x00000000, 0x00000000, 0xffffffff, 0xfffff9ff,
	 0xfe000000, 0x00000000, 0xffffffff, 0xfffff9ff,
	 0xfe000000, 0x00000000, 0x00100000, 0x00000000,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
	 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
   },

/*
 * TLB counts:    FROM TLBSTATS.IDF (Image 2)
 *
 * Counts the following:
 *
 * ctr0: DTLB misses
 * ctr1: ITLB misses
 * ctr2: total cycles in the miss handlers
 * ctr3: total cycles
 */

   {
   0x0c00c000,   0x00000000,   0x00060000,   0x00000000, 
   0xe7e7e0e0,   0x00001fff,   0xfc00007f,   0xfff00001, 
   0xfff00000,   0x07ffff00,   0x07ffffff,   0x6007ffff, 
   0xa00007ff,   0xffff0007,   0xffffff00,   0x00000000, 
   0x603001c1,   0xe0000001,   0xc0c00000,   0x00000fff, 
   0xff00000f,   0xffff0000,   0x00000000,   0x00400000, 
   0x00001000,   0x00000004,   0x00000000,   0x01000000, 
   0x0000ffff,   0xfffffff0,   0x00000000,   0x0fffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0x00800000,   0x00153f7f, 
   0x55000000,   0xaf800000,   0xc0000000,   0x0403f240, 
   0x00000000,   0x00001010,   0x00004700,   0x00000ff0, 
   0x00000000,   0x00000000,   0x00000055,   0xffffff00, 
   0x00000000,   0x0000ff00,   0x00000000,   0x0f000000, 
   0x0000055f,   0xfffff000,   0x00000000,   0x000ff000, 
   0x00000000,   0x00000000,   0x000055ff,   0xffff0000, 
   0x00000000,   0x00ff0000,   0x00000000,   0xf0000000, 
   0x000055ff,   0xffff0000,   0x00000000,   0x00ff0000, 
   0x00000000,   0x00000000,   0x00055fff,   0xfff00000, 
   0x00000000,   0x0ff00000,   0x00000000,   0x00000000, 
   0x00157fff,   0xffc00000,   0x00000000,   0x3fc00000, 
   0x00040000,   0x00000000,   0x6fff0000,   0x00000000, 
   0x60000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff7fbfc,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff7fbfc,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00030000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },

/* tlbhandler  FROM tlbHandMiss.idf (Image 3)
 *
 * ctr0: TLB misses
 * ctr1: dmisses inside the TLB miss handler
 * ctr2: cycles in the TLB miss handler
 * ctr3: overflow of ctr2
 */
   {
   0x1c00c000,   0x00000000,   0x00060000,   0x00000000, 
   0xe7e7e0e0,   0x00001fff,   0xfc00007f,   0xfff00001, 
   0xfff00000,   0x07ffff00,   0x07ffffff,   0x6007ffff, 
   0xa00007ff,   0xffff0007,   0xffffff00,   0x00000000, 
   0x603001c1,   0xe0000001,   0xc0c00000,   0x00000fff, 
   0xff00000f,   0xffff0000,   0x00000000,   0x00400000, 
   0x00001000,   0x00000004,   0x00000000,   0x01000000, 
   0x0000ffff,   0xfffffff0,   0x00000000,   0x0fffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0x006c0000,   0x01000054, 
   0x02000002,   0xc3200000,   0xc00aa000,   0x0c03f240, 
   0x00000000,   0x00001010,   0x000044f4,   0x00000c00, 
   0xaa0000f0,   0x0f0000b0,   0x00005005,   0x0f5f0000, 
   0x0001f000,   0x0000ff00,   0x00000000,   0x0f000000, 
   0x0000055f,   0xfffff000,   0x00000000,   0x000ff000, 
   0x00000000,   0x00000000,   0x000055ff,   0xffff0000, 
   0x00000000,   0x00ff0000,   0x00000000,   0xf0000000, 
   0x000055ff,   0xffff0000,   0x00000000,   0x00ff0000, 
   0x00000000,   0x00000000,   0x00055fff,   0xfff00000, 
   0x00000000,   0x0ff00a00,   0x000f0000,   0x24004000, 
   0x15400001,   0x40c00003,   0x3da00000,   0x0002a800, 
   0x00ff0000,   0x00000000,   0x6fff0000,   0x00000000, 
   0x60000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff7fbfc,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff7fbfc,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffafff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00030000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },

/* branch_taken image  FROM PTKN.IDF (Image 4)
 *
 * ctr0: mispredicted branches
 * ctr1: predicted taken branches, actually taken
 * ctr2: predicted taken branches (includes nullfied)
 * ctr3: all branches
 */

   {
   0xcc01e000,   0x00000000,   0x00000000,   0x00000000, 
   0xa08080a0,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xfffffeff,   0xfffeffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffff00,   0x00000000, 
   0xf4ffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0xd22d0000,   0x00000000, 
   0x0000000b,   0x46000000,   0x00000000,   0x0ffff900, 
   0x90000000,   0x00000000,   0x0000907e,   0x00000000, 
   0x000000ff,   0xff00bfdf,   0x03030303,   0x03030000, 
   0x000dbfff,   0xffffff00,   0x00000000,   0x0f0fffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xfffff000, 
   0x00000000,   0x00ffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0x00000000,   0xf0ffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffff0000, 
   0x00000000,   0x0fffffff,   0xffffffff,   0xffffffff, 
   0xffff5555,   0x55500000,   0x003f3ff0,   0x2766c000, 
   0x00000000,   0x00000002,   0x67840000,   0x00000000, 
   0x03fffc00,   0x00000000,   0xffff0000,   0x00000000, 
   0xf0000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff7fbfc,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff7fbfc,   0x00000000,   0xffffffff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00030000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },

/* branch_nottaken  FROM PNTKN.IDF (Image 5)
 *
 * ctr0: mispredicted branches
 * ctr1: branches predicted not-taken, but actually taken
 * ctr2: branches predicted not-taken (includes nullified)
 * ctr3: all branches
 */
   {
   0xcc01e000,   0x00000000,   0x00000000,   0x00000000, 
   0xe0c0c0e0,   0xffffffff,   0xffffffff,   0xffefffff, 
   0xffffbfff,   0xfffffeff,   0xfffeffff,   0xfffffeff, 
   0xfffffffe,   0xffffffff,   0xffffff00,   0x00000000, 
   0xf4ffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0xd22d0000,   0x00000000, 
   0x0000000b,   0x46000000,   0x00000000,   0x0ffff900, 
   0x90000000,   0x00000000,   0x0000907e,   0x00000000, 
   0x000000ff,   0xff00bfdf,   0x03030303,   0x03030000, 
   0x000dbfff,   0xffffff00,   0x00000000,   0x0f0fffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xfffff000, 
   0x00000000,   0x00ffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0x00000000,   0xf0ffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffff0000, 
   0x00000000,   0x0fffffff,   0xffffffff,   0xffffffff, 
   0xffff5555,   0x55500000,   0x003f3ff0,   0x2766c000, 
   0x00000000,   0x00000002,   0x67840000,   0x00000000, 
   0x03fffc00,   0x00000000,   0xffff0000,   0x00000000, 
   0xf0000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff7fbfc,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff7fbfc,   0x00000000,   0xffffffff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00030000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },
   
/* IMISS image (Image 6)
 *
 * ctr0 : icache misses for retired instructions
 * ctr1 : total cycles
 * ctr2 : dcache misses for retired instructions
 * ctr3 : number of retired instructions
 */
   {
   0x2801e000,   0x00000000,   0x00010000,   0x00000000, 
   0x00001000,   0xffffffff,   0xffffffff,   0xfff00fff, 
   0xfffa3fff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffff00,   0x00000000, 
   0xf0ffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffff0000,   0x00000000,   0x00000000,   0x00000000, 
   0x00000000,   0x00000000,   0xf2fdf0f0,   0xf0f0f0f0, 
   0xffffffff,   0xf6c00000,   0x00000000,   0x0ff55800, 
   0x90000000,   0x00000000,   0x0000b0ff,   0xfffffff0, 
   0x00000003,   0x0100bfff,   0x3f3f3f3f,   0x3f3f5555, 
   0x555fffff,   0xffffff00,   0x00000000,   0x000fffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xfffff000, 
   0x00000000,   0x00ffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffff0000,   0x00000000,   0xf0ffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffff0000, 
   0x00000000,   0x0fffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xfff00000,   0x000301b0,   0x2fefcfcf, 
   0xcfcfcfcf,   0xd5555557,   0xf7b40000,   0x00000000, 
   0x03c14000,   0x00000000,   0xffff0000,   0x00000000, 
   0xf0000000,   0x00000000,   0x00ffffff,   0xff3fffff, 
   0xffffffff,   0xffcfffff,   0xfff6fb7c,   0x00000000, 
   0x00ffffff,   0xff3fffff,   0xffffffff,   0xffcfffff, 
   0xfff6fb7c,   0x00000000,   0xffff0fff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffff0fff,   0xffffff3f, 
   0xffffffff,   0xffffff7f,   0xffffffff,   0xfffffefc, 
   0x00000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0xffffffff,   0xfffff9ff, 
   0xfe000000,   0x00000000,   0x00130000,   0x00000000, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff, 
   0xffffffff,   0xffffffff,   0xffffffff,   0xffffffff,
   },

/* DMISS image (Image 7)
 *
 * ctr0 : icache misses for retired instructions
 * ctr1 : total cycles
 * ctr2 : dcache misses for retired instructions
 * ctr3 : number of retired instructions
 */
   {e fo0x2801e000,use w0PCX-U) Onyx (PCX1U) CPU interfU) C
 *
nyx ( CopaceCPU intf Chung ndolphChung <<tausq at 00risc-ht (C)fffa3risc-linux.oparisc-linux.oparisc-linux.oewlett-   200yri (Grant Grundler)
 *
Packardx.org *
 *  *    Thight (C)fg>
 t and 2001 Hewlett-Packard (Grant Grundler)
an redistThis program is frce 
 *
 * e terms of the GNU General Public License as pubee software; youthe Fion S of the Founda   I; either version 2 of nse,License, or redist(atLicer optioce eneral Pubribute  interfCopyrigh *    ribute it and
 *  in
 *
 hope that it wilf2fdf0fatausq a0rs ofyeral Public License as 6cY WARRANTY; without even 0ff558ute it and9ANr FITNESS FOR A PARTICULAr FIb0rant Grundler)
t WITHOUT he
 * 3 even l100b  This pr3fed a creceiv a c5555n redist555    This program Randolphl be useful,
 *     (at your option) any later version.
 *
 *    This programbuails.
 *
 *    YTNESS FORt evunder
 *
 termson.
 *
 GNU General Public *    Th as pPERFshed by
OR A PARTICULAt Boston,, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330,  it under the terms of the GNU General Public License as pur FITNESS FOR 301bt even 2fefcfcrs takenn theeneralyx (d */
557* Magic7b4ht (ful, redist9 Temple Pla3c1otalNESS FOR A PARTICULAtted WARRANTY; without eit and/oe redist
 */
#ifndef PERF_IMr modify redisit ae
 * CountR A PART ctr3icac    This progr6fb7can redistribute it and 2 * ctr3 : tles  /* 
 *  Im retired, less nullifiedpe that i    Imagine fox004e0{/

#defin  This program opy Foundation; either version7ither version 2 of the Licefcemple Place, Suite 330, thing retired07f0000,, 0xffc01380,, 0x004e000x010100, 0x0000fff1040x00the c07 0xff00000ffc         0x00003800100x00fff, 0, 0x0000f000  This program90
         nse,00, 0x000000000f 0x0000000f, 0xfff0000, 0        0x00000, 0f, 0xffffffff 0xff000000130x4c20c000, 0x000000    Im tion) any later version.
 *
 *    This program is distributedn) any lat later ver.eneral Public License as pdistributed ctr3 : totaBoston, MA  02111-1307  USA
 */
#ifndef PERF_IMAGES_H
#defin, 0x00003c00, 0x067f080c, 0x02019 use},

/* dmiss_acc 0x0imagec00,FROM DMISS_RATIO.IDF  (I67f008Gene , 0xctr0 : all loadsions storesithoutx00060 (ICULAlines70xf800f1010xff000e003c 0x0000000,
         0xodd00fff,0xffff03ffffdcache xc00e1307 0x07ffdxfff80/0x01fff, 0x803007, 0xREAD_PRIV0f0, 03c00SHAR_OR0, 0x0on Runway0xf80x01fff(Speculative0f0, Non-0xff003c007, 0xn userht (C)id8fffffPU interfthis program; ifff, 0xfffffff0, 0x0ht (C)10x01fff00000,
ff, x4c00c000a000x0000, 0xfff8ror medistribute 007,fff800f07fe8under the terms of the GNU General Public License as pubon 2 of the Lice can re 0xf000003t evons r * ctr3 : totaBoston, MA  02111-1307  USA
 */
#ifndef PERF_IMAGES_H
#define PERF_IMAGedistnse, or
 *    (at your option) any later version.
 *
 *    This program is distributedf, 0xffffffff, 0xffffffff, 0xf0000000,
         0xf0000030 WARRANTY; without even l betal cycles
 * ctr1 : total he
 *    GNU General Publicd2280afff,
         0xfdffffff, 0xfffbfff800460007, 0xfff800f0
  5fff800PERF_9      0x00802tired, including nullified
ic907es
 */
         {
       00 */
#iffff, 80bf800, 0x0ab030f, fff, 0x    but WITHOUT ANdave y of th0, 0x00000000,
        ense ; if not, write tofffffff,
         f, 0xffyour optio, Inc., 59 Temple Place, Su0x00330, numbers MA  02111-1307  USAagine#ifndef PERF_IMAGES_H 0x07fffffffffff, 0xfff9f, Magic numbstructions retired, less nf, 0 from HPUX stuffgineffffff, 0xCXUfff, 0_SIZE 584

static uint32_t onyx_x67f0s[][, 0xffffffff},
/sizeff9, 0x00055501, 0xfffe015153fe
/n redC762888Temple Place, Suite 330,  A PA20x07ff6780, 0xcyclemagie003c#ifndef PER7fcs where0300hing0x0006000
 * ctfffffff,
         0xfffx00060000includount0000000,
0
 * ct00c000, 0x000000x0c01e000, 0x000, 0x00000000,
 /* 
 *    Imagine fo004e000        0x004c0000f, 0xffffffff, 0xff00600f, 0xffffffff,         0x00e0ffffff 0x0004the x3c007ff000, 0x00000000,
         0x00000fff, 0xff00000f, 0xffff0000, 0x0fffff00,
         0x000fffff, 0x00000000, 0x0000000ff,
         0xffffffff, 0xfffff0,f, 0xffffffff, 0x0000000f, 0xff000ffffffffffff, 0xffff000, 0x00000000f, 0xffffffff, 0xff000000,
         0x0000ffff, 0xfffffff0, 0x00000fff, 0xffffffff,
fffffff, 0xfffffff, 0xff00000ff, 0xffffffff,1 Ra the hope that itit and/4ffffxfffff0f000, 0xx2fc80f0, 0x2019fcxffffffff, 0xff280408c00, 0x07930000, 0x0041e4c0,
         0x01002079, 0x3000ffff, 0xffffffff,
         0xffffffff,x00000049e 0xffc00140220, 07900,
900, 0xc9effffffffffff, 0xf34004793 0x2471    9f, big_cpi0xx2fc00 0x2fc09, 0xe0xf8, 0x7f,T0, 0xffffff00, 
 *
clockounter .    0xc0007fUnused    0xc02f00  0x000x0x7ffffe,c00, 0x0b00d9e, 0x80N000000,
 /*        Imx0000000, 0xf,
         00cffff,ffff, 0xffffffff,
      f3ffffff, 0xffffffffht (C)e7e7e0: counts * ct0x00000xc0or FI0f, 0xffff0fff, 0xe that i01, 0xfffe007, 0x00000000,x00000fffff, 6fff, 0xfff3893000fffff   0xffffffff * ct0 :0, 0x00000000,
        ffff,6ffff1c1 0xa0000ffff,     0xc0,
  fff, 0xffffffff, 0xffffffffffffffff, 0, 0x07ffff, 0xffffffff,
     0, 0x00, 0x07
 *   Rlied wa02679 04fff, 0xffffffff,
    
    00, 0x0000000   This program iTNESS FOR A PARTICULAR P4f0, 0x038aaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xf       0x01380010, 0x1fffffff, 0xf00000000,
    002ffff,
     0000000,Imagine71] __read_mostlf00aa000, 0x0aaffffff000, 0x0000 overflopyri0xfdfffff0x0000041       0x0000f, 0xffff00,
  
        C00bfffffdress vafffff, 0xff   Yo00, 0x000000ccfffffff, 0xfffmpl0,
 wa  0xffffffff, 0 0xffff, 0x0000fffffffff, 0xff5ffff,       0d037fff,
   ffffff,0, 0x000ff,
    fff, 0xffffffff,
       ERF_I  0xffffffff, , 0xffffffff, 0xffffffff 0xffffffff,
         0xffffff,
, 0xffffff,
         lidount        0xffff9ff, 0xfe00000a, 0x00000cxfdffffff, 0xb00000,
     002fff,
      x0000ff, 0x0000   0xffff,2019same aafff, 0xfffffe00     2000000,
     :
 *
 0xfffffffffff, You shoul37 xc00 as tlb/*c02a8owing:
 2ab       ffffff     er 1
 6, 0xffffffff, 0xf3ffff0xffffff0, 0x00000000, 0x00060000, 0x00000000,
         0efefefef, 0xffffffff, 0xffffffff, 0xf7fbffff     ,
         0x01000xffffffff, 0xffffffff, 0xffffffff,
         0xf0xfffffff 0xff000000, 0x00000xffffffffffff 0x00000000,
         000000fff, 0xff00000f, 0xffff0000, 0x0fffff00,
         0000fffff, 0x00000000, 0x00000000xffffffff, 0xffffffff,
         0xffffffff, 0xff1b9the O, 0x071b8c, 0xffffffff, 0xff     0xffffffff, 0xffffffff, , 0xff000000,
         x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, xffffffff, 0xffffffff, 0xf0000000,ng:
 *
c000, 0xunter 0
 /
067, 0xffff90c00, 0     02f0, 040x0041effffffff, 0xffc07, 0x     0xffffffff, 0xf08007fc2,, 0x07930000, 0x1fffff07, 008x01fc20x01002079, 0x3c13c00, 0x0880711f, 0x1bfc204c0,
 48xfff0xffffffff, 0xff30x7fff     f800f1f, 0x1fffe00f     , c001l 0, 0x59e4c001,
1ffff, 0xfx000264c00f, 0xffffffff,xfffffffff0x0000 durountwhich local_stall_A1as passertxffffffff,007fO        0x01iss han000000,
      0xfff800f0, 0x0IFLUSH_AV    0xc0ffff       0x02cxfffff 02xf0000000, 0x000000000000,
         0x0000lid 5ffffff,
     07ff, 0xf800f00fffffffff, 0xffffffff,
      , 0xf0807100, 0x1bfc200c, 0x4806ff00,
         0x03f001ff, 0xfe003c00, 0x7fff800f, 0x001fffe0,
         0x03c007ff, 00000, 0xf0000000, 0x000507, 03000,1 Count2e4c,ffff,
        0xa00d1effc00, 0x0ffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         200c, 0x4806ff00,
         0x03f001ff, 0xfe003c00, 0x7fff800f, 0x001fffe0,
         0x03c007ff, 0xf800f001, 0xfffe003c, 0xf03ffffff, 0xffffffff,
         0xfde0004, 0x07ffffff, 0x0000,
        0xf800,07f, ta vfffffff,
 c007ff, 0xf800f001, 0
00,
 , ffffffffff, 0xf80fffffff, 0xfe*
 28tr2c000,0000000ffff, 0xffffffff,
       486         0x0000fx7fff800f,
  7fff8, 0 0xffffff, 0xf3f454ff, 0xfe00, 0x0ffxffffffff75, 067f0):eneral         0x0000fff, 0xf0, 0x0ffs.
 *
 *   55       0xffffffffgounts tic License 0x00,
         0xffffffff, 0fffff9ff, 0xfe0800f001, 0xfffe003f, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xffffffff, 0xffffffff,
fff, 0xffffffff,
 00000000,
         0xfffffffple Place, Suite 330ff,
         00xfERF_Iation i)0xfffff         0xffffffff,
   2a2x67f0  0xff, ff, 0xfff 0xff15dMiss
 s (same ,fe, 0x0x0000000 * ct2900000xc00 hand2aa    c000, 155ffffff, 0xffffff, 0xffffffffff, , 0xffffffff, 0xffffffff,
         0xfdffffff, 0x0x, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffff,f, 0xff000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xfffffff6f, 0xffffc85
         0x000fffff, 0   This program 00000f, 0xfff4   0xffffffff, 0xfffff007f0c06a, 0xa0, 0x0000000f, 0xff007f 0xffffffff, 0xffffffff, 0xffffffff, 0xf000fffffff00000f, ,
0xffff00000000,0000400000,
0x0001000,0x00000,000000000x0100000xffffffff, xffffffff, ,
0xffff0000,00000, 0x0100000,
         0x0000fxfffff104, 0xe000c06xffffaaa0xffffffff,
         0xfffff0x03c0xffffffff, 0xffffffff, 0xfff8007fc2,
         0x02c1001f, 0xf0807100, 0x1bfc200c, 0x4806ff00,
         0x03f001ff, 0xfe003c00, 0x7fff800f, 0x001fffe0,
         0x03c007ff, 0xf800f001, 0xfffe003cles
 * xfff8,
         0x03007fff     0xc02679, 0xfff800f0, 0x01fr_abortfffffff, 0xfff00verflowxe003c007, 0xfff800f0, 0x0BRfe0,TALLHf, 0x80007f 0xfff800f0, 0x0ONE_QUAD1ff,0xff800f,0xc0260x000000BR0_ABRT, 0xffffffff, 0xffffffff, 0BR0x010000,/bStat0xffffffff,
   fffffff, 0
0xc007f001ff,0xfe003c00,0x7fff800f,
0x0f5, 0xffffffff, 01fffe00001,0xf007fff, 0x80x000300fffff, 0
         0x0000xfff80, 0xf007fff8ffff0xc0267x600000,
0xfxffffffff, 0xfffffxfffff104, 0xe000c06a, 0xa0x00001000,100000007fff8,9f420001f,0xd080a100,0x19f40xfdffffff,0xfffffffffff, 0xfffff9ff, 0xfe0fffffff, 0xffffffff, 0xffffffff,
         0xfffffff0000, 0x0xfdffffff,f,
         0xfffffffffffffff,0xfe000000,00000000,
0xffffffff,xffffffff,0xffffff, 0xffffffff, aaaf, 0xfffffflows of ctr2 
 */
{
0x1c00c000,00000000,0x00060000,5519ff,0ws of ctr2 
 */
{
0x1c00c000f000000d40xffffffff, 0xy},

/* Bus utili,0x6000000x00100000, 0,0xfe000000,00000000,d0d1e0000, 0x00000000,
   eneralff, 0xf800fffff, 0xfffffffff, 0xffffffff, 0xffffffff,
    image)
 *
 * ctr0: overfddress ve0e 0xffffffff, 0xffffffxffffffff,
,0xffffff0xffffffff, 0xfffffx44067d08,
0x0612019f,0x40, 0xffffffff,
         0xffffffff, f9ff,0xfe000000,00000000,
0000, 0xf0000000, 0x0000000xffffffff,0xfff, 0xffffffff, 0xffffffff,
         0xxffffffff, 0xffff,
        0xat parisc-linux.oewlett-Packardrgff, 0xffffffe tlb: ITLycleslersfffffff,0xffftr1: count8 xfff00000, 0x01000000,
         0x0000ff5B: ITL0xffffffff, 0xffffffffl instes in the miss handle1a2 0xffr2
 */3fffff0000000,0x0      0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xff80,
0x0101ffff,0xfffff104,0xe000c06a,0xafffc85c,
0x01380010,0x1fffffff,0xff000000,00000000,
0x01b9e000,0x0001b8c0,00000000 0x00000000, 0x00000000, 0x00400000,
         0x00001000, 0x00000004, 0x00000000, 0x01000000,
         0x0000ffff,0xffffffff, 0xffffffff,
     000,00000000,0x00400000,
0x00001000,0x00000004,00000000,0x01000000,
0x0000ffff,0xfffffff0,00000000,0x0fc00,0x01fd0000,0x08007f42,
0x0281001f,0xd080a100,0x19f42008,0x44067d08,
0x0612019f,0x400084c0,0x67d00060,0x0047f400,
0x042011fd,0x080b0404,0x7f4202c4,0x0167d080,
0x311059f4,0x201c4816,0x7d000313,0x059f4001,
0xfc007fff,0x800f001f,0xffe003c0,0x07fff800,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffex007isnr2
 */0xc02679fffffff, 0xe003c007, 0xfff800f0, 0x0r0: counorffffaaaiside_notransfff800ffff9ff,0xfe0xfffff 0xfff800f0, 0x0tim, 0x000000,
0xffffffff,0xfffff9ff1-4x44067d08,
0x061,0xffe00000,
0000000fffffff,0xfffff9ff,0xfe000000,0000005-, 0x0fffff00,00000000       0xffffffffffffff,0xfffff9ff,0xfe000000,000000>fff, 0xr ctr2
 fffffffffff,
00100000,: DTLBffffff,0xffffffff,0xffffffff,0xffffffff,
0ffffff6fffffff, 00,0xffffffff,0xffffffff,
0007f0000000xffffffff,0xfffffc00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,000000000,
         0xaffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfxffc0fdfffffffff,
 1bf, 0xfffx6000006ffffffffth 0xf
        0xffffffff, 0xffa2f9ff,0xfe000000,00000000,1606taken branche2f, 0xf80f, 0x4f9ff,0xfe000000,000000     000000fff, 0xfffffff not-bter  wf9ff,0xfeide tlb mxffffffff,
 lfied or not)
 * c1
    
         0xffffffff, 0xffff00, 
        0xfdffffff, 0xffffffff, 0xf00,
0x00030000,00000000,0xffffffff,0xfffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffff000000,
 *
 *    a5b00000, 0f  0xfffle tlb ml2
         0x0ff7ffff,0x, 0x00000ffffffff,
         0xffffff54ffff, 08 Coun
ffff,ct802ff, 0xfffff0xffff,0xffffffc0c1ffff,
   x04f900r3
     c 0x000000fffff, 0xffffffff, 0fffff,ff0000,00000000,fffff,
fffffff,0x 0xffffffffxff000000, x00000000,
00000000,
  00000fff, 0ff00000f, 0000,0000000,
0x01b9e000000fffff, 000000000, 0xffffffff,
0x00010205,000001000,0x00000004,000,00000000     0xff,0x0fffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xfff55ff5,0xffffffff,0xffffffff,0xf0000000,
0xf0000000,0x00fd0000,0x08x0281001f,00xffffffff,42008,0x4000000,0x000600084c0,0x     0xcc01e000, 0x00,000x00010205,0f0000,000 0x079300000x1bfdxf000000806ff42fffff28001ff,0xd080ac00,    042008,0x44067d003c 0x080067ffff000,84ffffx000080011,0x017f4fffffff42011fdffff,0b04002,
ffff02c00,
0100000fffff311059f02,
201c4816
0xfffff313000,fff,00c,00000xffffaaa,0xfffffff,0xf3ffffffffffff, 00000000,xfffff0, 0xf001f,xffe00000,
000000ffff,0x900fffff,fffffc007ff,0xf800f001,0f00,0x1ffffffff
0xc0070quadrdMis281001f,, 0x59160,0x000e003c007, 0xfff800f0, 0x0fffffff,0xfffin{
        ually taken
x00000000, 0x0fffffff,
0xffffffor ctr2
 */
10000000,
0xffffffff,0xfffff9f0xffffffff,0xffffffff,
0x00000ws of ctr2 
 */
{
0x1c00c0xffffffff,0xffffffff,
0x,
     f, Only workffffff32-b 0x6pplica 0xff.ffffff,0xffffffff0xffffe0, 0x03c007ff, 0xf800f001,00000000,00000000,
0xf      0x      {000,
0xffffffff,0xffffffff,0xffffffff,0xffffffge (ptkn imag000000,
0xffffffff,0xfffff00,
  f,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffedee, 0xffff000, 0x000000000, 0x00000000,
 fffff, 0xffff0x01000xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,xffffffff,0xfffffffffffff, 0x4ffffff, 0xff,
  ff, 0xf800dee, 0xffffff800000,00000000,f,0xffffffff,
     for ctffffffff, 0xfffffffffoverflow for ctr2
 */

  iss aligned  4
 * ctr2 : counts imiss , 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffff, 0      0xc   0xffffff2019f, branch_ Countx67f00(ptkxffffffGeneral fffff,
   01fffaaaa,fffff,00000000,
0xfffd* Count6fffffes, actually* Coun/
      1, 0xfp000,ctehes, afffff000000001f,0xd080a100,0x19f4200000000,00000000,
0xffffned on 8
 *ffff, ,


/* i 0x0000000,
   , 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffff3 0xf000,f9ff18ken branches (nullfied or x1fffffff,fffffff,200c, 0x4806ff00,
         fffff, 0xff0x00000000, 0x6b001xffffffff},

/* Bus utilization image (bus_util)
 *
 *,
         000000,00, 0xf0000000, 0x00fffff0, 0x0ff,0xfffff9ff,0xfe000000,00000000,
0x000300l Pu
         0xffffff}    fffffff,0xffffffff,
0xffffff    */
         {
         ff9ff,0xfe000000,000000,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,000000rw_pdfe0xffff00f001,0xf5fff, 0xe003c007, 0xfffoffff, 0xf001f,0xfddd9e, validx44067d08,
0x0612019fffff,0xffffffff,
0xfffdatffff, 00, 0xf0000000, 0, 0xffff, 0x00f001ff, 0xx00000xffffffffff8, 0x00f001ff, 0xxfffe0gned onhandlers 1 
        ifffffali cycles 4/
         ing retired
 * xfdffffff, 0xffffffff, 0xfe000000, 0x00000000,
        0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
        0xffffffff, 0xfffff9ff, 0xfe000000, 0x00000000,
        0x0f0000, 0x00000000, 0x60000000, 0x00000000,
        dffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xf0xf000        0x000, 0x0000000f,0xf x04f9003xfffffc007f000     a        fffff, 0xffffctr3:         0ow for ctr1
 * 000f,300000, e00,
 ffffff,0      4f,0xfr0 : xfffffffff, 1b0xfe0,00000000,00000000,
0xffff
         0x0f9007f0009, 00xfff 0xfff81000,4c0,
 007ffffff,0xffffffff,
405ffffff,000200   0x6fc0, 0ffff 0x8007f00,
         0xa1f80001f,0xfffff0    x0000xf004, 0xe806ff00e0f001, 0xfc003fff, ff0, 0x02c00, 0fe00,00000000,0xffffffff,0xffffffff,
ffff7ffffc00,e0x7fff800ffe00,
       000, 0x6ffken branches (nu0x01f0000, 0f,0xffe0000fffffff,0xe0,
       1307 ct0xfe00 0xffffffff, , 0xffffff6dssesff, idff,
         0xfff55fff, 073fff, 0xff00000f156abxffffffff,
 00, 0xffffffff, 0xffffffff,0x0c00c000, 0x00000000, 0x1xffff000093e400,
0x380014f9,0x00010205,0x3e4000c1,0x014f9000,
0x506053e4,0x001c0034,0xf9000902,0x0d3e4002,
0xc1034f90,0x00d060d3,0xe4003fff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffffffffff, 0xffffff * TLB      ,00000000,
0xffffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xf00,
0xf 0x00000000,
        0xigned on 0
 * ctra080xfff, 0xfffffanches (nullfied or not)
 * ctffff,
         0xffffffff, 0xffff0x7fffffff,
0xffffffffrw_w    0xffffffff, 0f,
6xfe003c00,0x7fff0,000s t0xfff800f0, 0x0, 0x0backh_take imixffff         0xffffff80, 000000fe000000, 0x 0xfe00000ffb1fffb,0xf2019f, 0xc00fffffffff,0
 * ct001,ing retunter 0
 * ctr: counts load inflow frsome counter 1
 */
         ing ret0xc00r 0
 * ct00c0(samH
#de    Gene         0xffffffff, 0xfff,
fff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xf0000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffffff, 0xffffffff,
         0x00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfff,
0xfcc7ffff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffff01f,0xd080a100,0x19f42008,0x44067d08,
0x0612019f,0x40008fff,0xffffffff,
0xffffffff,0xfffff00, 0xffffffff, 0 0x02c1001f, 0xf080710000000000, 090,
    a00, 0x01002079, 0x30000,
     0xfff40x0d06001f,       41c0, 0x07f000f0, 0x8dffff00,
     38104, 0x000, 0ffffc0fff,0, 0x1fc00282, 0x2023,
0xx00010290a 0xb0c001fc,8, 0xe0000000e0f001, 0xfc00bfc,0003,
    3000d1ffe003,
0x03,
    0e,0x00xffffffff,0x8ff,
  , 0xff0000000xfffffff23: counts st, 0xff800fff, 0xffffe003,
         0xfffffff8, 0x00ffffff,fffff,
0xffffffg:
 *
 * 0xff000000,
0xfffffe, 0x003ffff,0xfe0f800fff, 0xffffe0,0xfffff0010,0x1200ff8, 00xffffffff030,
0xffffffff,0xffffffffffff0010,0x1200x600000x00003c0ffff,
0xffffffff,0xfff000000,
55555,
0x55ffffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,000000000e0f001, 0xfc00000, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff },

/* branch_nottaken (pntkn image)
 *
 * ctr0: overflow for ctr1
 * c0010,0x1200fffffff, 0xffffffff,
         0x0000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff },

(nullfied or nots REA(for greater than 32-bit values) 
 * ctr2: counts o0f,
         0ffff,0xfffffffb,0x1fffbfff,0x7fffffff,
0xfcc7ffff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0/* shlibfffff
0xff93000,1,
17ffffffff, 0xffffffff,fffff,0x7fffxffffffff,0xffffffff,
0xffffffff, 0xffffffff, 0xffffff0,000000
0xffffff
         0xffffffff, ,0xffe00000,
0000000fffffff,0xffffffff,0xffffffff,
0xffffffs of ctr2 
 */
{
0x1c00c1fffe00,
       f, 0xfired
  retired
 * ctr1: csha5555,ibrarie
 * ctr2 : cowhere something retired
 * ctr2 : counts dmisses
 * ctr3 : (samctr2 : co8R_PRIV and ing retired
 * ctr2 : coCransactions on Runway 
 */
0xffff0000, 0x00000000, 0xf0x010ff, 0xffffffff,
        0xffbede * 
 * ctff,0xffffffff,
0xffffffff, 0xffaken branches (nullfied or 0: counts stfffffff,0xffffffff,0xffffffff,0xffffffff000000,
0xffffffff,0xfxffffffff,0xffffffff,0xff5e1ffc00,00000000, 0x000000fffff,0xffffffff,0xffffffff,
0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff },

/* branch_nottaken (pntkn image)
 *
 * ctr0: overflow for ctr1
 * xffffffff,
    00005x03ffffff60,0x80ffffff7f0xfffffr 0
 90x0000,
  93e4f8, 2007f0, 0x00f00001, 0xfc0023ff, 0xf0x0040000000ff, 0xf00000f9ff,0xfe000000,00000000,
         0xe7ebedee, 0xffffffff,    0x0405001f, 0ff,0xffaaffff00,
         0x0d06001f, 0xc00381c0, 0x07f000f0, 0x80
         0xffcch the O0xffffffff, 0xffffffff,
         0xffffffff, xffffffff,
 ffffffff,0xffffffff,
0xffffffff,0xffffffff,00,0x00ffffff,000000dffff,0xffffffff,
0xffffffffff,
0
0xffff,0xf3fff,4f9   0xffffffff,0xffffffff,0xfutilization image (bus_util)
 *f,0xc00181a0,0x0bfffffffff,0xf03fff, 0xfr3 (fox003bc000x0000ffffff,
         0xfffffffffff, 0xffff3dff, 0xffffff, 0xf000000000,0000000000,00000000,
05,0xd5555555,
0x55555555,0x75555555,0x5e1ffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,0xf4000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xffffffff,0xffffffff },

/* big_cpi
 *
 * ctr0: counts total cycles 
 * ctr1: counts overflows of ctr0 (for greater than 32-bit values) 
 * ctr2: counts o00000,
00000000,0x00029408,0x02f50002,0x0800bd40,
0x0202802f,0x5000a000,0x4bd40004,0x0812f500,
ff,0x7fffffff,
0xfcc7ffff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,flopxffffffff,
0xfff0xfe003c00,0x7fff0000,
0x00030000,loatff,
po0xffffx003bc007,0(opcode =0000)fffff,
0xffffffff,0xffffffff,0xfffffff,0xfe000000,00000000,
0xfffffffe,,
  x03c28f001f6,0xfffff9ffe000000,00000000,
0xe8,0x00003c020,
        0omething retired
 * ctr2 : cofffff, 0xffffffff, 0xffffffff,
 ffffffff0x82030400c007ffrsxf3ffffff,0xfF_IMAG00000000,0x00060000,00000000,
0xe0e0e0e0,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffff0000,00000000,0x6fffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xf0000000,
0xf0d22* Co 0x0280c007, 0xf000b040, 0x01fff,
0xffffffff,0xffffffff,0 0xffffffff,1: c  Sewithetired, including nullified
f,0x5e1ffc00,00000000r1:0x01001fc         0xfb0xffff,
0xfffffff800fff, 0xffffe00, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffff0, 0x00000000, 0xffffffff, 0xffffffff,
         0xfffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff,0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, xffffffff},

/* Bus utilization image (bus_util)
 *
 * ct1: counts laddr 0x0fffffload instrunum555,0x7555e7ffff,0xffffffff,0xffffffff,
0xffffycles in the miss hanandlers,
0xfffffc00,00000000,0x55555555,0xd5555555,
0x55555555,0x75555555,0x5e1ffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffffffffff,
         0xf,0xfffff9ff,0xfe000000x01380010,0x1fffffff,0xff000000,00000000,
0xffffffff, 0xff000000, 0x00000000,
         0xff0000, 0x00400000,
         0x00001000, 0x00000004, 0x00000000, 0x01000000,
         0x0000ffff,2000,006001f, ,0x90ffff800,xffffff, 0x000,0xf0xfff,
0xfffffff0xffffe003,         0xffffff8, 0x00000000,0001f60,0x80,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xffffffff,0xff0xd5555555,
0ffff, 0xfx201c4816,0x7d000313,0x059f4001,
0xfc007fff,0x800f001f,0xffe003c0,0x07fff800,
0xf001fffe,0x003c007f,0xff800f00,0x1fffe003,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,
0xc007fff8,0x00f001ff,0xfe003c00,0x7fff800f,
0x001fffe0,0xfe00ff,00, 0x59e9fffff3I_D_    ESf,0xffffff0f00* dmiss 0xc02679ifff,0xf3ff3c00000fffffff,ffffff, 0xffagi000000,
x003bcfe00000aaa,0xffffffff,0xf3ff3ffff,0x03ffff2802fffffff, 0xffffff,0xf00f0, 0x01f
0x00030000,00000000,,
         0x00000fe0, 0x03c007ff, 0xf800f0
         0x0000000c, 0x000fffff,
       000,
        0xffffffff, 0xffffff        0x01fffffffff,
0xff it under the terms of the GNU General Public License as pub, 0x00000000, 0x00000000,
         0x6fff0000, 0x00000000, 0x60000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xfffffc00, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xfffffc00, 0x00000000,
         0xffffaaaa, 0xffffffff, 0xf3ffffff, 0xffffffff,
         0xfdffffff, 0xffffffff, 0xfe000000, 0xxfffifffffff, anty o offff, 0xMERCHANTABILITY000, 01fc0,
 0xffffffff, 0xfffURPOSE.f,0xffffffff,0xffffffff,0xffffffff,
0xES_H
0x02more detailsfffff, 0xf0ses
 * ctd hf9ff, 0xfe0a cop0,
 07  USA
 */
#ifndef PERF_IMAGES_Hfff, 0xaloc007x00000000, 0xfffffff030000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff},

/* Bus utilization image (bus_util)
 *
 * ctr0 : countsof(zation i tlbHand,0xfffff = { counts PI 0xffff Cng retffff0ollowingxfd00220ctr1: cfff, 0xffffffffe somethfff, 0xfffffflow from counter 1
 */
         {
         0x0c01e000, 0x00000000, 0x00060000, 0x00000000,
         0xefefefef, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xff000000, 0x00000000,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
         0xffff0000, 0x00000000, 0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff, 0xffffffff, 0xf0000000,0,0x10000000,0000000,
0x0281001f,0xd080a100,0x19f42008,0x44067d08,
0x0612019f,0x400084c0,0x1200bf00,
0x0506002f,0xc00181a0,0x0bf00070,0x8002fc00, 0xfff807930000, 0x0041e4c0,
         0x01002079, 0x30008xf0000000,
         0xf0000000, 0x00003c00, 0x01ff0001, 0x0076fffff0xffffffbr_report3.is overflowxffffffff,
0xfdffffff,0misx01001ff,
30, 0x9ff,0xfe000000,Som00,0xxffffffff, unber,0xfable      0xffffn 00,
,0xffe00000,
0000000 0xefefe (fe000000,0+00,
0x01b555550xfff8000,000Ufffff ofed+ Pber ofinsTCount+r0 :ransa
Noff,0x{
,0xfff	0,00000000,All B0xefefef
0xffffffffRemainff,
x007f00030, 0x00b00dt
 */

 0xefefefeffffffff, 0xfff4f3ffffff,,
0xffff0000,000000
0xffff0000,00000ctr2dmple Place, Suite 330        0x000300fff,00000000f2093
   ff,0xfffffffafff,b0000d as ff00000f,,0d00, 0x0fffff00,
 l number of cycles for which iside_notrans is asserted 
 * ctr1: couf001, 0x00000, afffc85c0000
         0x0000002072fc0000, 0, 00,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,0xf4000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,0x00ffffff,0xffffffff,
0xfff    0xcc01e000, 0x000ffff,0xffffffff,
0xffffffff,0xffffffff,0fffffff, 0xfffff00,
0xffffffff,0xffffffff,0xffffffff,0x,0xffffffff,0xfe000000,00000003c007ff,5,0xfffff00,
0x090BRAD_S07,0xf0x1fffe0:: counts ONE_QUAD 
 * ctr2: counts BR0_ABRT 
 * ctr3: counfffffff,
0xfcc7ffff,0xffdffffa,0x5f000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xfffff,00000000,0xfffff2019f, Bus utilizf, 0xffffffffbus_  0x 0xfff55fff,ffff,0xffffffff,0xffffffff,0xffffffffff, 0xffffffff, 0xffffff,0xfffff counts READ_S
       0000,00000000,0x1ffff003,
0xc00700,00000000,0x55555555,0xd5555555,
0x55555555,0x7,0x03c007ff,0xf800f001,0xfffe003c,
0x007fff80,0x0f001fff,0xe003c007,0xfff800f0,
0x01fffe00,0x3c007fff,0x800f001f,0xffe00000,
00000000,00000000,00000000,00000000,
0xcdff0000,00000000,0xc0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00030000,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xffffffff,0xffffffff},

/* quadrant
 *
 * ctr0: crsf, 0xffffffcrsf,   0x000000xffffffff00,
rrec3ff007ffffff,   0xffc0 byff000pop_latch407f,   : s1 
Licecedur, 0xfur, 0xfffff2fffff, 0xefefe, (00000,es  quadrs of 3 
x000: rfffff, 0,0x6093e400,
5,0xfefe800,
0000fff, 0x00, 0x0ffff4xfffff0000,ffffffffff,   0x
     000fffff, 0x, 0xc000,
      ffff,0xffffffffff, 0xfff,0x00060810,0xbd400b 0x1fffff5,0xfT0f, 0xffff0000, 0x0fffff00,
 ffffffff, 0fe00,0x3c0fff,
0xfdffffff,0xffffffff,0xfe000000,0107,0xd8200000004fffe
0xffffffff,0ff,
0xffffffffxffffff08000, 0xfffff,  cxbd80fff,
0xfdfffffffff10000000,0000xfffff, 0xfe0000ffffffff, 0x0,0x00ffffff0800c,0x1e4c00,0x004084c0,0x60800c007ff, 0x0800c,0x1e4c0030,0x00, 0xffffff0xfffffffx0000000c,0f001, 0xffffffc0,
0x01002001ff   0xff0x14007f00,
x0002005   0x0fffc00,1f, 0xc, 0xc81c0, 0x07f00x8001fc00,
00000,     0x2fffff007f, 0x0ffff90a00, 0x1fc00xc007f000,
xffffff    0xbffff,01fc, 0x0ff, 0x0xffffffff,0x001fc003,
930003     0x80xfff0,
0x00030xfffffffffffff,
0x4ffff800,
930003     0xf0x0041x600000030,0x00279300,
0x01004,0x79300090,0x0c9e4c00,
0x,0x1e4c0030,0x00279300,
0x010040000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,00000000,0xffffffff,0xffffffff,
0xffffffff,0xffffffff,0xfffffc00,00000000,
0xffffff,
0xfffff2079,0x3000800000,00000000,
0xffffffff,0xffffffff,00000000,0xc0,
0x01002079,0x3000800cffffff,0xf3ffffff,0xffffffff,
0x000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf24793000,
079,0x3000800c,0x1e4c0030,0x00279300,
0x01004xffffffff,
0xfdffffff,0xffffffff,0000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000ffffffff,30,0x00279300,
0x010fffff, 0x0800c,0x1e4c0030,0xfffffff, 0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,00000000,00000000,
0xffffffff,0xffffffff},

/* rw_wdfet (WRITEBACKS)
 *
 * ctr0: counts a2802f * ctr2: is the overflow from counter 0 
 * ctr3: is the overflow from counter 1
 */
{
0x0ffffffff, 00000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,00000000,00000ff,0xffffffff,0xfffffc00,
00000000,00000000,00000000,00000000,
0xffff0000,00000000,0xf0000000,00000000,
0xffffffff,0xffffffff,0xffffffff,0xffffffff,
0xfffffc00,2019f, 
      t (03c007f,  fff, a    Im 0xfff55fff, 0f,0xffffffff,0xffffffff,0xf8007f0,   ,0000000*all*     fffff,0xffffffff,
0xf2:as pth3fffffff,   0xxfffff9fe003c00,0x7fffIxfe000000,0000, 0x0000x0002
{ctr2cco0000,
00,000000ICOREram i34,0xf90x0080ff,0xffff THINKSt evneeds00,00,/
{
0xfetchff,
down s00000,
0xffpaths0000,
 0x0000003c0,
0x00800, 0020051, xe4c00180at made0xf3PARTtof000c0d9f,0xfxffff000000pre0x00ees)04793,0x000eP0x00000000fffff (1x0f0, 2
{
0x,fffff, 0xf0000,0xffffffff,0xffffffff,
0xffff
         0x0000000c,
0xffffffff00000,
0xffffffff,0xfff003c00, 0x7fff800f,
 ff, 0xffffffff, 0xfffff00,00000000,
0xffffaaaa,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,0000000ffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0xffffffff,0xfffff9ff,0xfe000000,00000000,
0x00100000,00000000,0xf8000000,00000000,
00000000,00000000,0xf4000000,00000000,
0xffffffff,0xffffffff,0x00ffffff,0xffffffff,
00000000,00000000,d07f000fffffff,x0fffff00,
0x000fffff,00000000,007f00,
   0x040500x7001fc00,
   0ffff,0ctr1 0, 0x0000ffffc00,
00000000,000fffffff, 0xfffffmisses
 br30000,0000ff830xfff,0xffdf03,
   0x438007f0,   ,00000007fff,0x80000000,
0xx001fc00300000040018,0x0024f90fc003100000ransac0030,fffff,ffff, 0xffe00000,
         0x00000ffffff, fffff,0xffffffff,
0xffffffff,0xff      0xcc01e000a03fff 
 * ctr1: Total number of CPU clock cyf,
   f,
0xffffffff,0xffffffff0xffffffff, 0xffffffff,
         0xffffffff, 0xffffffff001, 0ns in quad 0 
 * ctr1: T: total number of CPU clock cycles 
 */
3fffffffffx03ff00026fff,
  0000000,   0x00060000,   0x000f, 0xffffffff,ff,0xffx00303400c 0x07fffffxffffff0x027fff,0   0xff000000,
0xffffffff,0xx, 0x800fffff, 0xffe00000,
         0x00000000, 0x00000000, 0x00000000, 0x00000000,
    01fc00,fff,02c   0,0xfffff 0x0090a00, 0x16fff07f000,0x38001    0xfffff1c1,
0ffffff,0xf,0xf1fc003,x00ff400, 00xffffff8,0x00ffffff,0xfe003fff,0xffff800f,
0xffffffe0,0x03ffffff,0xf800ffff,0xfffe003f,
0xffffff80,0x0fffffff,0xe003ffff00000000fffffff, 0x6000000,00000000,
f,0xfffffff,0xffffffff0xffffffff,0xfffffc00,0les for whi0,0x079300055555555,0x0x00000000c0,
   0x0000ffffff,0xfffffff,0xf3f,0xf3ffffff,fff004,   0xe000407f,   0xfffffffc,
   1a2s han 0xe000407f, f,   0xfffffffc,
   frant 2 fff,0xffffffff,0xff000000,00000000,
0xffffffff,0xffffffff,0xffffffff0,
0xffffffff,0xffffffff,
 00000,
0x001ffffff,0xffffffff,0xf3ffffff,0xffffffff,
0xfdffffff,0xffffffff,0xfe000000,0 0x800fffff,   0xffe003ff,   0xfffff8x0fff

};

#endif
