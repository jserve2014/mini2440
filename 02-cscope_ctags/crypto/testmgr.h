/*
 * Algorithm testing framework and tests.
 *
 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>
 * Copyright (c) 2002 Jean-Francois Dive <jef@linuxbe.org>
 * Copyright (c) 2007 Nokia Siemens Networks
 * Copyright (c) 2008 Herbert Xu <herbert@gondor.apana.org.au>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 */
#ifndef _CRYPTO_TESTMGR_H
#define _CRYPTO_TESTMGR_H

#include <linux/netlink.h>
#include <linux/zlib.h>

#include <crypto/compress.h>

#define MAX_DIGEST_SIZE		64
#define MAX_TAP			8

#define MAX_KEYLEN		56
#define MAX_IVLEN		32

struct hash_testvec {
	/* only used with keyed hash algorithms */
	char *key;
	char *plaintext;
	char *digest;
	unsigned char tap[MAX_TAP];
	unsigned char psize;
	unsigned char np;
	unsigned char ksize;
};

struct cipher_testvec {
	char *key;
	char *iv;
	char *input;
	char *result;
	unsigned short tap[MAX_TAP];
	int np;
	unsigned char fail;
	unsigned char wk; /* weak key flag */
	unsigned char klen;
	unsigned short ilen;
	unsigned short rlen;
};

struct aead_testvec {
	char *key;
	char *iv;
	char *input;
	char *assoc;
	char *result;
	unsigned char tap[MAX_TAP];
	unsigned char atap[MAX_TAP];
	int np;
	int anp;
	unsigned char fail;
	unsigned char novrfy;	/* ccm dec verification failure expected */
	unsigned char wk; /* weak key flag */
	unsigned char klen;
	unsigned short ilen;
	unsigned short alen;
	unsigned short rlen;
};

struct cprng_testvec {
	char *key;
	char *dt;
	char *v;
	char *result;
	unsigned char klen;
	unsigned short dtlen;
	unsigned short vlen;
	unsigned short rlen;
	unsigned short loops;
};

static char zeroed_string[48];

/*
 * MD4 test vectors from RFC1320
 */
#define MD4_TEST_VECTORS	7

static struct hash_testvec md4_tv_template [] = {
	{
		.plaintext = "",
		.digest	= "\x31\xd6\xcf\xe0\xd1\x6a\xe9\x31"
			  "\xb7\x3c\x59\xd7\xe0\xc0\x89\xc0",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xbd\xe5\x2c\xb3\x1d\xe3\x3e\x46"
			  "\x24\x5e\x05\xfb\xdb\xd6\xfb\x24",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xa4\x48\x01\x7a\xaf\x21\xd8\x52"
			  "\x5f\xc1\x0a\xe8\x7a\xa6\x72\x9d",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\xd9\x13\x0a\x81\x64\x54\x9f\xe8"
			"\x18\x87\x48\x06\xe1\xc7\x01\x4b",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xd7\x9e\x1c\x30\x8a\xa5\xbb\xcd"
			  "\xee\xa8\xed\x63\xdf\x41\x2d\xa9",
		.np	= 2,
		.tap	= { 13, 13 },
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\x04\x3f\x85\x82\xf2\x41\xdb\x35"
			  "\x1c\xe6\x27\xe1\x53\xe7\xf0\xe4",
	}, {
		.plaintext = "123456789012345678901234567890123456789012345678901234567890123"
			   "45678901234567890",
		.psize	= 80,
		.digest	= "\xe3\x3b\x4d\xdc\x9c\x38\xf2\x19"
			  "\x9c\x3e\x7b\x16\x4f\xcc\x05\x36",
	},
};

/*
 * MD5 test vectors from RFC1321
 */
#define MD5_TEST_VECTORS	7

static struct hash_testvec md5_tv_template[] = {
	{
		.digest	= "\xd4\x1d\x8c\xd9\x8f\x00\xb2\x04"
			  "\xe9\x80\x09\x98\xec\xf8\x42\x7e",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x0c\xc1\x75\xb9\xc0\xf1\xb6\xa8"
			  "\x31\xc3\x99\xe2\x69\x77\x26\x61",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x90\x01\x50\x98\x3c\xd2\x4f\xb0"
			  "\xd6\x96\x3f\x7d\x28\xe1\x7f\x72",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\xf9\x6b\x69\x7d\x7c\xb7\x93\x8d"
			  "\x52\x5a\x2f\x31\xaa\xf1\x61\xd0",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xc3\xfc\xd3\xd7\x61\x92\xe4\x00"
			  "\x7d\xfb\x49\x6c\xca\x67\xe1\x3b",
		.np	= 2,
		.tap	= {13, 13}
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xd1\x74\xab\x98\xd2\x77\xd9\xf5"
			  "\xa5\x61\x1c\x2c\x9f\x41\x9d\x9f",
	}, {
		.plaintext = "12345678901234567890123456789012345678901234567890123456789012"
			   "345678901234567890",
		.psize	= 80,
		.digest	= "\x57\xed\xf4\xa2\x2b\xe3\xc9\x55"
			  "\xac\x49\xda\x2e\x21\x07\xb6\x7a",
	}

};

/*
 * RIPEMD-128 test vectors from ISO/IEC 10118-3:2004(E)
 */
#define RMD128_TEST_VECTORS     10

static struct hash_testvec rmd128_tv_template[] = {
	{
		.digest	= "\xcd\xf2\x62\x13\xa1\x50\xdc\x3e"
			  "\xcb\x61\x0f\x18\xf6\xb3\x8b\x46",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x86\xbe\x7a\xfa\x33\x9d\x0f\xc7"
			  "\xcf\xc7\x85\xe7\x2f\x57\x8d\x33",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xc1\x4a\x12\x19\x9c\x66\xe4\xba"
			  "\x84\x63\x6b\x0f\x69\x14\x4c\x77",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x9e\x32\x7b\x3d\x6e\x52\x30\x62"
			  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xfd\x2a\xa6\x07\xf7\x1d\xc8\xf5"
			  "\x10\x71\x49\x22\xb3\x71\x83\x4e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xd1\xe9\x59\xeb\x17\x9c\x91\x1f"
			  "\xae\xa4\x62\x4c\x60\xc5\xc7\x02",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x3f\x45\xef\x19\x47\x32\xc2\xdb"
			  "\xb2\xc4\xa2\xc7\x69\x79\x5f\xa3",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighij"
			     "hijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\xa1\xaa\x06\x89\xd0\xfa\xfa\x2d"
			  "\xdc\x22\xe8\x8b\x49\x13\x3a\x06",
		.np	= 2,
		.tap	= { 28, 28 },
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghi"
			     "jklmghijklmnhijklmnoijklmnopjklmnopqklmnopqr"
			     "lmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\xd4\xec\xc9\x13\xe1\xdf\x77\x6b"
			  "\xf4\x8d\xe9\xd5\x5b\x1f\x25\x46",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x13\xfc\x13\xe8\xef\xff\x34\x7d"
			  "\xe1\x93\xff\x46\xdb\xac\xcf\xd4",
	}
};

/*
 * RIPEMD-160 test vectors from ISO/IEC 10118-3:2004(E)
 */
#define RMD160_TEST_VECTORS     10

static struct hash_testvec rmd160_tv_template[] = {
	{
		.digest	= "\x9c\x11\x85\xa5\xc5\xe9\xfc\x54\x61\x28"
			  "\x08\x97\x7e\xe8\xf5\x48\xb2\x25\x8d\x31",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x0b\xdc\x9d\x2d\x25\x6b\x3e\xe9\xda\xae"
			  "\x34\x7b\xe6\xf4\xdc\x83\x5a\x46\x7f\xfe",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x8e\xb2\x08\xf7\xe0\x5d\x98\x7a\x9b\x04"
			  "\x4a\x8e\x98\xc6\xb0\x87\xf1\x5a\x0b\xfc",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x5d\x06\x89\xef\x49\xd2\xfa\xe5\x72\xb8"
			  "\x81\xb1\x23\xa8\x5f\xfa\x21\x59\x5f\x36",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xf7\x1c\x27\x10\x9c\x69\x2c\x1b\x56\xbb"
			  "\xdc\xeb\x5b\x9d\x28\x65\xb3\x70\x8d\xbc",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xb0\xe2\x0b\x6e\x31\x16\x64\x02\x86\xed"
			  "\x3a\x87\xa5\x71\x30\x79\xb2\x1f\x51\x89",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x9b\x75\x2e\x45\x57\x3d\x4b\x39\xf4\xdb"
			  "\xd3\x32\x3c\xab\x82\xbf\x63\x32\x6b\xfb",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighij"
			     "hijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x12\xa0\x53\x38\x4a\x9c\x0c\x88\xe4\x05"
			  "\xa0\x6c\x27\xdc\xf4\x9a\xda\x62\xeb\x2b",
		.np	= 2,
		.tap	= { 28, 28 },
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghi"
			     "jklmghijklmnhijklmnoijklmnopjklmnopqklmnopqr"
			     "lmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x6f\x3f\xa3\x9b\x6b\x50\x3c\x38\x4f\x91"
			  "\x9a\x49\xa7\xaa\x5c\x2c\x08\xbd\xfb\x45",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x94\xc2\x64\x11\x54\x04\xe6\x33\x79\x0d"
			  "\xfc\xc8\x7b\x58\x7d\x36\x77\x06\x7d\x9f",
	}
};

/*
 * RIPEMD-256 test vectors
 */
#define RMD256_TEST_VECTORS     8

static struct hash_testvec rmd256_tv_template[] = {
	{
		.digest	= "\x02\xba\x4c\x4e\x5f\x8e\xcd\x18"
			  "\x77\xfc\x52\xd6\x4d\x30\xe3\x7a"
			  "\x2d\x97\x74\xfb\x1e\x5d\x02\x63"
			  "\x80\xae\x01\x68\xe3\xc5\x52\x2d",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xf9\x33\x3e\x45\xd8\x57\xf5\xd9"
			  "\x0a\x91\xba\xb7\x0a\x1e\xba\x0c"
			  "\xfb\x1b\xe4\xb0\x78\x3c\x9a\xcf"
			  "\xcd\x88\x3a\x91\x34\x69\x29\x25",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xaf\xbd\x6e\x22\x8b\x9d\x8c\xbb"
			  "\xce\xf5\xca\x2d\x03\xe6\xdb\xa1"
			  "\x0a\xc0\xbc\x7d\xcb\xe4\x68\x0e"
			  "\x1e\x42\xd2\xe9\x75\x45\x9b\x65",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x87\xe9\x71\x75\x9a\x1c\xe4\x7a"
			  "\x51\x4d\x5c\x91\x4c\x39\x2c\x90"
			  "\x18\xc7\xc4\x6b\xc1\x44\x65\x55"
			  "\x4a\xfc\xdf\x54\xa5\x07\x0c\x0e",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\x64\x9d\x30\x34\x75\x1e\xa2\x16"
			  "\x77\x6b\xf9\xa1\x8a\xcc\x81\xbc"
			  "\x78\x96\x11\x8a\x51\x97\x96\x87"
			  "\x82\xdd\x1f\xd9\x7d\x8d\x51\x33",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\x57\x40\xa4\x08\xac\x16\xb7\x20"
			  "\xb8\x44\x24\xae\x93\x1c\xbb\x1f"
			  "\xe3\x63\xd1\xd0\xbf\x40\x17\xf1"
			  "\xa8\x9f\x7e\xa6\xde\x77\xa0\xb8",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x06\xfd\xcc\x7a\x40\x95\x48\xaa"
			  "\xf9\x13\x68\xc0\x6a\x62\x75\xb5"
			  "\x53\xe3\xf0\x99\xbf\x0e\xa4\xed"
			  "\xfd\x67\x78\xdf\x89\xa8\x90\xdd",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighij"
			     "hijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x38\x43\x04\x55\x83\xaa\xc6\xc8"
			  "\xc8\xd9\x12\x85\x73\xe7\xa9\x80"
			  "\x9a\xfb\x2a\x0f\x34\xcc\xc3\x6e"
			  "\xa9\xe7\x2f\x16\xf6\x36\x8e\x3f",
		.np	= 2,
		.tap	= { 28, 28 },
	}
};

/*
 * RIPEMD-320 test vectors
 */
#define RMD320_TEST_VECTORS     8

static struct hash_testvec rmd320_tv_template[] = {
	{
		.digest	= "\x22\xd6\x5d\x56\x61\x53\x6c\xdc\x75\xc1"
			  "\xfd\xf5\xc6\xde\x7b\x41\xb9\xf2\x73\x25"
			  "\xeb\xc6\x1e\x85\x57\x17\x7d\x70\x5a\x0e"
			  "\xc8\x80\x15\x1c\x3a\x32\xa0\x08\x99\xb8",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xce\x78\x85\x06\x38\xf9\x26\x58\xa5\xa5"
			  "\x85\x09\x75\x79\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x2c\xfc\xf6\xfb\xe7\x7f\x63\x54"
			  "\x2f\x99\xb0\x47\x05\xd6\x97\x0d\xff\x5d",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xde\x4c\x01\xb3\x05\x4f\x89\x30\xa7\x9d"
			  "\x09\xae\x73\x8e\x92\x30\x1e\x5a\x17\x08"
			  "\x5b\xef\xfd\xc1\xb8\xd1\x16\x71\x3e\x74"
			  "\xf8\x2f\xa9\x42\xd6\x4c\xdb\xc4\x68\x2d",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x3a\x8e\x28\x50\x2e\xd4\x5d\x42\x2f\x68"
			  "\x84\x4f\x9d\xd3\x16\xe7\xb9\x85\x33\xfa"
			  "\x3f\x2a\x91\xd2\x9f\x84\xd4\x25\xc8\x8d"
			  "\x6b\x4e\xff\x72\x7d\xf6\x6a\x7c\x01\x97",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xca\xbd\xb1\x81\x0b\x92\x47\x0a\x20\x93"
			  "\xaa\x6b\xce\x05\x95\x2c\x28\x34\x8c\xf4"
			  "\x3f\xf6\x08\x41\x97\x51\x66\xbb\x40\xed"
			  "\x23\x40\x04\xb8\x82\x44\x63\xe6\xb0\x09",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xed\x54\x49\x40\xc8\x6d\x67\xf2\x50\xd2"
			  "\x32\xc3\x0b\x7b\x3e\x57\x70\xe0\xc6\x0c"
			  "\x8c\xb9\xa4\xca\xfe\x3b\x11\x38\x8a\xf9"
			  "\x92\x0e\x1b\x99\x23\x0b\x84\x3c\x86\xa4",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x55\x78\x88\xaf\x5f\x6d\x8e\xd6\x2a\xb6"
			  "\x69\x45\xc6\xd2\xa0\xa4\x7e\xcd\x53\x41"
			  "\xe9\x15\xeb\x8f\xea\x1d\x05\x24\x95\x5f"
			  "\x82\x5d\xc7\x17\xe4\xa0\x08\xab\x2d\x42",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighij"
			     "hijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\xd0\x34\xa7\x95\x0c\xf7\x22\x02\x1b\xa4"
			  "\xb8\x4d\xf7\x69\xa5\xde\x20\x60\xe2\x59"
			  "\xdf\x4c\x9b\xb4\xa4\x26\x8c\x0e\x93\x5b"
			  "\xbc\x74\x70\xa9\x69\xc9\xd0\x72\xa1\xac",
		.np	= 2,
		.tap	= { 28, 28 },
	}
};

/*
 * SHA1 test vectors  from from FIPS PUB 180-1
 */
#define SHA1_TEST_VECTORS	2

static struct hash_testvec sha1_tv_template[] = {
	{
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xa9\x99\x3e\x36\x47\x06\x81\x6a\xba\x3e"
			  "\x25\x71\x78\x50\xc2\x6c\x9c\xd0\xd8\x9d",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x84\x98\x3e\x44\x1c\x3b\xd2\x6e\xba\xae"
			  "\x4a\xa1\xf9\x51\x29\xe5\xe5\x46\x70\xf1",
		.np	= 2,
		.tap	= { 28, 28 }
	}
};


/*
 * SHA224 test vectors from from FIPS PUB 180-2
 */
#define SHA224_TEST_VECTORS     2

static struct hash_testvec sha224_tv_template[] = {
	{
		.plaintext = "abc",
		.psize  = 3,
		.digest = "\x23\x09\x7D\x22\x34\x05\xD8\x22"
			  "\x86\x42\xA4\x77\xBD\xA2\x55\xB3"
			  "\x2A\xAD\xBC\xE4\xBD\xA0\xB3\xF7"
			  "\xE3\x6C\x9D\xA7",
	}, {
		.plaintext =
		"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize  = 56,
		.digest = "\x75\x38\x8B\x16\x51\x27\x76\xCC"
			  "\x5D\xBA\x5D\xA1\xFD\x89\x01\x50"
			  "\xB0\xC6\x45\x5C\xB4\xF5\x8B\x19"
			  "\x52\x52\x25\x25",
		.np     = 2,
		.tap    = { 28, 28 }
	}
};

/*
 * SHA256 test vectors from from NIST
 */
#define SHA256_TEST_VECTORS	2

static struct hash_testvec sha256_tv_template[] = {
	{
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xba\x78\x16\xbf\x8f\x01\xcf\xea"
			  "\x41\x41\x40\xde\x5d\xae\x22\x23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
			  "\xb4\x10\xff\x61\xf2\x00\x15\xad",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x24\x8d\x6a\x61\xd2\x06\x38\xb8"
			  "\xe5\xc0\x26\x93\x0c\x3e\x60\x39"
			  "\xa3\x3c\xe4\x59\x64\xff\x21\x67"
			  "\xf6\xec\xed\xd4\x19\xdb\x06\xc1",
		.np	= 2,
		.tap	= { 28, 28 }
	},
};

/*
 * SHA384 test vectors from from NIST and kerneli
 */
#define SHA384_TEST_VECTORS	4

static struct hash_testvec sha384_tv_template[] = {
	{
		.plaintext= "abc",
		.psize	= 3,
		.digest	= "\xcb\x00\x75\x3f\x45\xa3\x5e\x8b"
			  "\xb5\xa0\x3d\x69\x9a\xc6\x50\x07"
			  "\x27\x2c\x32\xab\x0e\xde\xd1\x63"
			  "\x1a\x8b\x60\x5a\x43\xff\x5b\xed"
			  "\x80\x86\x07\x2b\xa1\xe7\xcc\x23"
			  "\x58\xba\xec\xa1\x34\xc8\x25\xa7",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x33\x91\xfd\xdd\xfc\x8d\xc7\x39"
			  "\x37\x07\xa6\x5b\x1b\x47\x09\x39"
			  "\x7c\xf8\xb1\xd1\x62\xaf\x05\xab"
			  "\xfe\x8f\x45\x0d\xe5\xf3\x6b\xc6"
			  "\xb0\x45\x5a\x85\x20\xbc\x4e\x6f"
			  "\x5f\xe9\x5b\x1f\xe3\xc8\x45\x2b",
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x09\x33\x0c\x33\xf7\x11\x47\xe8"
			  "\x3d\x19\x2f\xc7\x82\xcd\x1b\x47"
			  "\x53\x11\x1b\x17\x3b\x3b\x05\xd2"
			  "\x2f\xa0\x80\x86\xe3\xb0\xf7\x12"
			  "\xfc\xc7\xc7\x1a\x55\x7e\x2d\xb9"
			  "\x66\xc3\xe9\xfa\x91\x74\x60\x39",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
		.psize	= 104,
		.digest	= "\x3d\x20\x89\x73\xab\x35\x08\xdb"
			  "\xbd\x7e\x2c\x28\x62\xba\x29\x0a"
			  "\xd3\x01\x0e\x49\x78\xc1\x98\xdc"
			  "\x4d\x8f\xd0\x14\xe5\x82\x82\x3a"
			  "\x89\xe1\x6f\x9b\x2a\x7b\xbc\x1a"
			  "\xc9\x38\xe2\xd1\x99\xe8\xbe\xa4",
		.np	= 4,
		.tap	= { 26, 26, 26, 26 }
	},
};

/*
 * SHA512 test vectors from from NIST and kerneli
 */
#define SHA512_TEST_VECTORS	4

static struct hash_testvec sha512_tv_template[] = {
	{
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xdd\xaf\x35\xa1\x93\x61\x7a\xba"
			  "\xcc\x41\x73\x49\xae\x20\x41\x31"
			  "\x12\xe6\xfa\x4e\x89\xa9\x7e\xa2"
			  "\x0a\x9e\xee\xe6\x4b\x55\xd3\x9a"
			  "\x21\x92\x99\x2a\x27\x4f\xc1\xa8"
			  "\x36\xba\x3c\x23\xa3\xfe\xeb\xbd"
			  "\x45\x4d\x44\x23\x64\x3c\xe8\x0e"
			  "\x2a\x9a\xc9\x4f\xa5\x4c\xa4\x9f",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x20\x4a\x8f\xc6\xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\x28\xa8"
			  "\x27\x9b\xe3\x31\xa7\x03\xc3\x35"
			  "\x96\xfd\x15\xc1\x3b\x1b\x07\xf9"
			  "\xaa\x1d\x3b\xea\x57\x78\x9c\xa0"
			  "\x31\xad\x85\xc7\xa7\x1d\xd7\x03"
			  "\x54\xec\x63\x12\x38\xca\x34\x45",
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x8e\x95\x9b\x75\xda\xe3\x13\xda"
			  "\x8c\xf4\xf7\x28\x14\xfc\x14\x3f"
			  "\x8f\x77\x79\xc6\xeb\x9f\x7f\xa1"
			  "\x72\x99\xae\xad\xb6\x88\x90\x18"
			  "\x50\x1d\x28\x9e\x49\x00\xf7\xe4"
			  "\x33\x1b\x99\xde\xc4\xb5\x43\x3a"
			  "\xc7\xd3\x29\xee\xb6\xdd\x26\x54"
			  "\x5e\x96\xe5\x5b\x87\x4b\xe9\x09",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
		.psize	= 104,
		.digest	= "\x93\x0d\x0c\xef\xcb\x30\xff\x11"
			  "\x33\xb6\x89\x81\x21\xf1\xcf\x3d"
			  "\x27\x57\x8a\xfc\xaf\xe8\x67\x7c"
			  "\x52\x57\xcf\x06\x99\x11\xf7\x5d"
			  "\x8f\x58\x31\xb5\x6e\xbf\xda\x67"
			  "\xb2\x78\xe6\x6d\xff\x8b\x84\xfe"
			  "\x2b\x28\x70\xf7\x42\xa5\x80\xd8"
			  "\xed\xb4\x19\x87\x23\x28\x50\xc9",
		.np	= 4,
		.tap	= { 26, 26, 26, 26 }
	},
};


/*
 * WHIRLPOOL test vectors from Whirlpool package
 * by Vincent Rijmen and Paulo S. L. M. Barreto as part of the NESSIE
 * submission
 */
#define WP512_TEST_VECTORS	8

static struct hash_testvec wp512_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
			  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7"
			  "\x3E\x83\xBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x88\xE3\xE0\x3C\x4F\x07\x57"
			  "\xEA\x89\x64\xE5\x9B\x63\xD9\x37"
			  "\x08\xB1\x38\xCC\x42\xA6\x6E\xB3",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42"
			  "\xD1\x1B\xC6\x45\x41\x3A\xEF\xF6"
			  "\x3A\x42\x39\x1A\x39\x14\x5A\x59"
			  "\x1A\x92\x20\x0D\x56\x01\x95\xE5"
			  "\x3B\x47\x85\x84\xFD\xAE\x23\x1A",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
			  "\x71\x81\xEE\xBD\xB6\xC5\x7E\x27"
			  "\x7D\x0E\x34\x95\x71\x14\xCB\xD6"
			  "\xC7\x97\xFC\x9D\x95\xD8\xB5\x82"
			  "\xD2\x25\x29\x20\x76\xD4\xEE\xF5",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x37\x8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\x8D\x00\x03\x22\x30\xF5\x3C"
			  "\xE1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6"
			  "\x92\xED\x92\x00\x52\x83\x8F\x33"
			  "\x62\xE8\x6D\xBD\x37\xA8\x90\x3E",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x44\x2E\xE1\x3B\x80\x54\xE4\x1B"
			  "\x08\xBF\x2A\x92\x51\xC3\x0B\x6A"
			  "\x0B\x8A\xAE\x86\x17\x7A\xB4\xA6"
			  "\xF6\x8F\x67\x3E\x72\x07\x86\x5D"
			  "\x5D\x98\x19\xA3\xDB\xA4\xEB\x3B",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\xCF\x9E\xE6\x9B"
			  "\xF1\x1F\x00\xED\x9A\xBA\x26\x90"
			  "\x1D\xD7\xC2\x8C\xDE\xC0\x66\xCC"
			  "\x6A\xF4\x2E\x40\xF8\x2F\x3A\x1E"
			  "\x08\xEB\xA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6"
			  "\x55\x17\xCC\x87\x9D\x7B\x96\x21"
			  "\x42\xC6\x5F\x5A\x7A\xF0\x14\x67",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			   "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x46\x6E\xF1\x8B\xAB\xB0\x15\x4D"
			  "\x25\xB9\xD3\x8A\x64\x14\xF5\xC0"
			  "\x87\x84\x37\x2B\xCC\xB2\x04\xD6"
			  "\x54\x9C\x4A\xFA\xDB\x60\x14\x29"
			  "\x4D\x5B\xD8\xDF\x2A\x6C\x44\xE5"
			  "\x38\xCD\x04\x7B\x26\x81\xA5\x1A"
			  "\x2C\x60\x48\x1E\x88\xC5\xA2\x0B"
			  "\x2C\x2A\x80\xCF\x3A\x9A\x08\x3B",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x2A\x98\x7E\xA4\x0F\x91\x70\x61"
			  "\xF5\xD6\xF0\xA0\xE4\x64\x4F\x48"
			  "\x8A\x7A\x5A\x52\xDE\xEE\x65\x62"
			  "\x07\xC5\x62\xF9\x88\xE9\x5C\x69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x05\x0B\x56"
			  "\x93\x9B\xAA\xA0\xAD\xFF\x9A\xE6"
			  "\x74\x5B\x7B\x18\x1C\x3B\xE3\xFD",
	},
};

#define WP384_TEST_VECTORS	8

static struct hash_testvec wp384_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
			  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7"
			  "\x3E\x83\xBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x88\xE3\xE0\x3C\x4F\x07\x57",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42"
			  "\xD1\x1B\xC6\x45\x41\x3A\xEF\xF6"
			  "\x3A\x42\x39\x1A\x39\x14\x5A\x59",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
			  "\x71\x81\xEE\xBD\xB6\xC5\x7E\x27"
			  "\x7D\x0E\x34\x95\x71\x14\xCB\xD6",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x37\x8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\x8D\x00\x03\x22\x30\xF5\x3C"
			  "\xE1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x44\x2E\xE1\x3B\x80\x54\xE4\x1B"
			  "\x08\xBF\x2A\x92\x51\xC3\x0B\x6A"
			  "\x0B\x8A\xAE\x86\x17\x7A\xB4\xA6",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\xCF\x9E\xE6\x9B"
			  "\xF1\x1F\x00\xED\x9A\xBA\x26\x90"
			  "\x1D\xD7\xC2\x8C\xDE\xC0\x66\xCC"
			  "\x6A\xF4\x2E\x40\xF8\x2F\x3A\x1E"
			  "\x08\xEB\xA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			   "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x46\x6E\xF1\x8B\xAB\xB0\x15\x4D"
			  "\x25\xB9\xD3\x8A\x64\x14\xF5\xC0"
			  "\x87\x84\x37\x2B\xCC\xB2\x04\xD6"
			  "\x54\x9C\x4A\xFA\xDB\x60\x14\x29"
			  "\x4D\x5B\xD8\xDF\x2A\x6C\x44\xE5"
			  "\x38\xCD\x04\x7B\x26\x81\xA5\x1A",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x2A\x98\x7E\xA4\x0F\x91\x70\x61"
			  "\xF5\xD6\xF0\xA0\xE4\x64\x4F\x48"
			  "\x8A\x7A\x5A\x52\xDE\xEE\x65\x62"
			  "\x07\xC5\x62\xF9\x88\xE9\x5C\x69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x05\x0B\x56",
	},
};

#define WP256_TEST_VECTORS	8

static struct hash_testvec wp256_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
			  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x37\x8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\x8D\x00\x03\x22\x30\xF5\x3C"
			  "\xE1\xF5\x70\x0C\x0F\xFB\x4D\x3B",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x44\x2E\xE1\x3B\x80\x54\xE4\x1B",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\xCF\x9E\xE6\x9B"
			  "\xF1\x1F\x00\xED\x9A\xBA\x26\x90"
			  "\x1D\xD7\xC2\x8C\xDE\xC0\x66\xCC"
			  "\x6A\xF4\x2E\x40\xF8\x2F\x3A\x1E",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			   "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x46\x6E\xF1\x8B\xAB\xB0\x15\x4D"
			  "\x25\xB9\xD3\x8A\x64\x14\xF5\xC0"
			  "\x87\x84\x37\x2B\xCC\xB2\x04\xD6"
			  "\x54\x9C\x4A\xFA\xDB\x60\x14\x29",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x2A\x98\x7E\xA4\x0F\x91\x70\x61"
			  "\xF5\xD6\xF0\xA0\xE4\x64\x4F\x48"
			  "\x8A\x7A\x5A\x52\xDE\xEE\x65\x62"
			  "\x07\xC5\x62\xF9\x88\xE9\x5C\x69",
	},
};

/*
 * TIGER test vectors from Tiger website
 */
#define TGR192_TEST_VECTORS	6

static struct hash_testvec tgr192_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x76\xb1\xbb\x92\x5f"
			  "\xf3\x73\xde\x2d\x49\x58\x4e\x7a",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest = "\xf2\x58\xc1\xe8\x84\x14\xab\x2a"
			  "\x52\x7a\xb5\x41\xff\xc5\xb8\xbf"
			  "\x93\x5f\x7b\x95\x1c\x13\x29\x51",
	}, {
		.plaintext = "Tiger",
		.psize	= 5,
		.digest = "\x9f\x00\xf5\x99\x07\x23\x00\xdd"
			  "\x27\x6a\xbb\x38\xc8\xeb\x6d\xec"
			  "\x37\x79\x0c\x11\x6f\x9d\x2b\xdf",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
		.psize	= 64,
		.digest = "\x87\xfb\x2a\x90\x83\x85\x1c\xf7"
			  "\x47\x0d\x2c\xf8\x10\xe6\xdf\x9e"
			  "\xb5\x86\x44\x50\x34\xa5\xa3\x86",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
		.psize	= 64,
		.digest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9"
			  "\x57\x89\x65\x65\x97\x5f\x91\x97",
	}, {
		.plaintext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24"
			  "\xdd\x68\x15\x1d\x50\x39\x74\xfc",
	},
};

#define TGR160_TEST_VECTORS	6

static struct hash_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x76\xb1\xbb\x92\x5f"
			  "\xf3\x73\xde\x2d",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest = "\xf2\x58\xc1\xe8\x84\x14\xab\x2a"
			  "\x52\x7a\xb5\x41\xff\xc5\xb8\xbf"
			  "\x93\x5f\x7b\x95",
	}, {
		.plaintext = "Tiger",
		.psize	= 5,
		.digest = "\x9f\x00\xf5\x99\x07\x23\x00\xdd"
			  "\x27\x6a\xbb\x38\xc8\xeb\x6d\xec"
			  "\x37\x79\x0c\x11",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
		.psize	= 64,
		.digest = "\x87\xfb\x2a\x90\x83\x85\x1c\xf7"
			  "\x47\x0d\x2c\xf8\x10\xe6\xdf\x9e"
			  "\xb5\x86\x44\x50",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
		.psize	= 64,
		.digest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9"
			  "\x57\x89\x65\x65",
	}, {
		.plaintext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24"
			  "\xdd\x68\x15\x1d",
	},
};

#define TGR128_TEST_VECTORS	6

static struct hash_testvec tgr128_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x76\xb1\xbb\x92\x5f",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest = "\xf2\x58\xc1\xe8\x84\x14\xab\x2a"
			  "\x52\x7a\xb5\x41\xff\xc5\xb8\xbf",
	}, {
		.plaintext = "Tiger",
		.psize	= 5,
		.digest = "\x9f\x00\xf5\x99\x07\x23\x00\xdd"
			  "\x27\x6a\xbb\x38\xc8\xeb\x6d\xec",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
		.psize	= 64,
		.digest = "\x87\xfb\x2a\x90\x83\x85\x1c\xf7"
			  "\x47\x0d\x2c\xf8\x10\xe6\xdf\x9e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
		.psize	= 64,
		.digest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9",
	}, {
		.plaintext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24",
	},
};

/*
 * HMAC-MD5 test vectors from RFC2202
 * (These need to be fixed to not use strlen).
 */
#define HMAC_MD5_TEST_VECTORS	7

static struct hash_testvec hmac_md5_tv_template[] =
{
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x92\x94\x72\x7a\x36\x38\xbb\x1c"
			  "\x13\xf4\x8e\xf8\x15\x8b\xfc\x9d",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x75\x0c\x78\x3e\x6a\xb0\xb5\x03"
			  "\xea\xa8\x6e\x31\x0a\x5d\xb7\x38",
		.np	= 2,
		.tap	= {14, 14}
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 16,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\x56\xbe\x34\x52\x1d\x14\x4c\x88"
			  "\xdb\xb8\xc7\x33\xf0\xe8\xb3\xf6",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\x69\x7e\xaf\x0a\xca\x3a\x3a\xea"
			  "\x3a\x75\x16\x47\x46\xff\xaa\x79",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 16,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.digest	= "\x56\x46\x1e\xf2\x34\x2e\xdc\x00"
			  "\xf9\xba\xb9\x95\x69\x0e\xfd\x4c",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\x6b\x1a\xb7\xfe\x4b\xd7\xbf\x8f"
			  "\x0b\x62\xe6\xce\x61\xb9\xd0\xcd",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x6f\x63\x0f\xad\x67\xcd\xa0\xee"
			  "\x1f\xb1\xf5\x62\xdb\x3a\xa5\x3e",
	},
};

/*
 * HMAC-RIPEMD128 test vectors from RFC2286
 */
#define HMAC_RMD128_TEST_VECTORS	7

static struct hash_testvec hmac_rmd128_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\xfb\xf6\x1f\x94\x92\xaa\x4b\xbf"
			  "\x81\xc1\x72\xe8\x4e\x07\x34\xdb",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x87\x5f\x82\x88\x62\xb6\xb3\x34"
			  "\xb4\x27\xc5\x5f\x9f\x7f\xf0\x9b",
		.np	= 2,
		.tap	= { 14, 14 },
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 16,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\x09\xf0\xb2\x84\x6d\x2f\x54\x3d"
			  "\xa3\x63\xcb\xec\x8d\x62\xa3\x8d",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\xbd\xbb\xd7\xcf\x03\xe4\x4b\x5a"
			  "\xa6\x0a\xf8\x15\xbe\x4d\x22\x94",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 16,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.digest	= "\xe7\x98\x08\xf2\x4b\x25\xfd\x03"
			  "\x1c\x15\x5f\x0d\x55\x1d\x9a\x3a",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\xdc\x73\x29\x28\xde\x98\x10\x4a"
			  "\x1f\x59\xd3\x73\xc1\x50\xac\xbb",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x5c\x6b\xec\x96\x79\x3e\x16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\xc5",
	},
};

/*
 * HMAC-RIPEMD160 test vectors from RFC2286
 */
#define HMAC_RMD160_TEST_VECTORS	7

static struct hash_testvec hmac_rmd160_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x24\xcb\x4b\xd6\x7d\x20\xfc\x1a\x5d\x2e"
			  "\xd7\x73\x2d\xcc\x39\x37\x7f\x0a\x56\x68",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xdd\xa6\xc0\x21\x3a\x48\x5a\x9e\x24\xf4"
			  "\x74\x20\x64\xa7\xf0\x33\xb4\x3c\x40\x69",
		.np	= 2,
		.tap	= { 14, 14 },
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 20,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\xb0\xb1\x05\x36\x0d\xe7\x59\x96\x0a\xb4"
			  "\xf3\x52\x98\xe1\x16\xe2\x95\xd8\xe7\xc1",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\xd5\xca\x86\x2f\x4d\x21\xd5\xe6\x10\xe1"
			  "\x8b\x4c\xf1\xbe\xb9\x7a\x43\x65\xec\xf4",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 20,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.digest	= "\x76\x19\x69\x39\x78\xf9\x1d\x90\x53\x9a"
			  "\xe7\x86\x50\x0f\xf3\xd8\xe0\x51\x8e\x39",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\x64\x66\xca\x07\xac\x5e\xac\x29\xe1\xbd"
			  "\x52\x3e\x5a\xda\x76\x05\xb7\x91\xfd\x8b",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x69\xea\x60\x79\x8d\x71\x61\x6c\xce\x5f"
			  "\xd0\x87\x1e\x23\x75\x4c\xd7\x5d\x5a\x0a",
	},
};

/*
 * HMAC-SHA1 test vectors from RFC2202
 */
#define HMAC_SHA1_TEST_VECTORS	7

static struct hash_testvec hmac_sha1_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\xb6\x17\x31\x86\x55\x05\x72\x64"
			  "\xe2\x8b\xc0\xb6\xfb\x37\x8c\x8e\xf1"
			  "\x46\xbe",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xef\xfc\xdf\x6a\xe5\xeb\x2f\xa2\xd2\x74"
			  "\x16\xd5\xf1\x84\xdf\x9c\x25\x9a\x7c\x79",
		.np	= 2,
		.tap	= { 14, 14 }
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 20,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\x12\x5d\x73\x42\xb9\xac\x11\xcd\x91\xa3"
			  "\x9a\xf4\x8a\xa1\x7b\x4f\x63\xf1\x75\xd3",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\x4c\x90\x07\xf4\x02\x62\x50\xc6\xbc\x84"
			  "\x14\xf9\xbf\x50\xc8\x6c\x2d\x72\x35\xda",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 20,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.digest	= "\x4c\x1a\x03\x42\x4b\x55\xe0\x7f\xe7\xf2"
			  "\x7b\xe1\xd5\x8b\xb9\x32\x4a\x9a\x5a\x04",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\xaa\x4a\xe5\xe1\x52\x72\xd0\x0e\x95\x70"
			  "\x56\x37\xce\x8a\x3b\x55\xed\x40\x21\x12",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\xe8\xe9\x9d\x0f\x45\x23\x7d\x78\x6d\x6b"
			  "\xba\xa7\x96\x5c\x78\x08\xbb\xff\x1a\x91",
	},
};


/*
 * SHA224 HMAC test vectors from RFC4231
 */
#define HMAC_SHA224_TEST_VECTORS    4

static struct hash_testvec hmac_sha224_tv_template[] = {
	{
		.key    = "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			"\x0b\x0b\x0b\x0b",
		.ksize  = 20,
		/*  ("Hi There") */
		.plaintext = "\x48\x69\x20\x54\x68\x65\x72\x65",
		.psize  = 8,
		.digest = "\x89\x6f\xb1\x12\x8a\xbb\xdf\x19"
			"\x68\x32\x10\x7c\xd4\x9d\xf3\x3f"
			"\x47\xb4\xb1\x16\x99\x12\xba\x4f"
			"\x53\x68\x4b\x22",
	}, {
		.key    = "Jefe",
		.ksize  = 4,
		/* ("what do ya want for nothing?") */
		.plaintext = "\x77\x68\x61\x74\x20\x64\x6f\x20"
			"\x79\x61\x20\x77\x61\x6e\x74\x20"
			"\x66\x6f\x72\x20\x6e\x6f\x74\x68"
			"\x69\x6e\x67\x3f",
		.psize  = 28,
		.digest = "\xa3\x0e\x01\x09\x8b\xc6\xdb\xbf"
			"\x45\x69\x0f\x3a\x7e\x9e\x6d\x0f"
			"\x8b\xbe\xa2\xa3\x9e\x61\x48\x00"
			"\x8f\xd0\x5e\x44",
		.np = 4,
		.tap    = { 7, 7, 7, 7 }
	}, {
		.key    = "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa",
		.ksize  = 131,
		/* ("Test Using Larger Than Block-Size Key - Hash Key First") */
		.plaintext = "\x54\x65\x73\x74\x20\x55\x73\x69"
			"\x6e\x67\x20\x4c\x61\x72\x67\x65"
			"\x72\x20\x54\x68\x61\x6e\x20\x42"
			"\x6c\x6f\x63\x6b\x2d\x53\x69\x7a"
			"\x65\x20\x4b\x65\x79\x20\x2d\x20"
			"\x48\x61\x73\x68\x20\x4b\x65\x79"
			"\x20\x46\x69\x72\x73\x74",
		.psize  = 54,
		.digest = "\x95\xe9\xa0\xdb\x96\x20\x95\xad"
			"\xae\xbe\x9b\x2d\x6f\x0d\xbc\xe2"
			"\xd4\x99\xf1\x12\xf2\xd2\xb7\x27"
			"\x3f\xa6\x87\x0e",
	}, {
		.key    = "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa",
		.ksize  = 131,
		/* ("This is a test using a larger than block-size key and a")
		(" larger than block-size data. The key needs to be")
			(" hashed before being used by the HMAC algorithm.") */
		.plaintext = "\x54\x68\x69\x73\x20\x69\x73\x20"
			"\x61\x20\x74\x65\x73\x74\x20\x75"
			"\x73\x69\x6e\x67\x20\x61\x20\x6c"
			"\x61\x72\x67\x65\x72\x20\x74\x68"
			"\x61\x6e\x20\x62\x6c\x6f\x63\x6b"
			"\x2d\x73\x69\x7a\x65\x20\x6b\x65"
			"\x79\x20\x61\x6e\x64\x20\x61\x20"
			"\x6c\x61\x72\x67\x65\x72\x20\x74"
			"\x68\x61\x6e\x20\x62\x6c\x6f\x63"
			"\x6b\x2d\x73\x69\x7a\x65\x20\x64"
			"\x61\x74\x61\x2e\x20\x54\x68\x65"
			"\x20\x6b\x65\x79\x20\x6e\x65\x65"
			"\x64\x73\x20\x74\x6f\x20\x62\x65"
			"\x20\x68\x61\x73\x68\x65\x64\x20"
			"\x62\x65\x66\x6f\x72\x65\x20\x62"
			"\x65\x69\x6e\x67\x20\x75\x73\x65"
			"\x64\x20\x62\x79\x20\x74\x68\x65"
			"\x20\x48\x4d\x41\x43\x20\x61\x6c"
			"\x67\x6f\x72\x69\x74\x68\x6d\x2e",
		.psize  = 152,
		.digest = "\x3a\x85\x41\x66\xac\x5d\x9f\x02"
			"\x3f\x54\xd5\x17\xd0\xb3\x9d\xbd"
			"\x94\x67\x70\xdb\x9c\x2b\x95\xc9"
			"\xf6\xf5\x65\xd1",
	},
};

/*
 * HMAC-SHA256 test vectors from
 * draft-ietf-ipsec-ciph-sha-256-01.txt
 */
#define HMAC_SHA256_TEST_VECTORS	10

static struct hash_testvec hmac_sha256_tv_template[] = {
	{
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20",
		.ksize	= 32,
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xa2\x1b\x1f\x5d\x4c\xf4\xf7\x3a"
			  "\x4d\xd9\x39\x75\x0f\x7a\x06\x6a"
			  "\x7f\x98\xcc\x13\x1c\xb1\x6a\x66"
			  "\x92\x75\x90\x21\xcf\xab\x81\x81",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20",
		.ksize	= 32,
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x10\x4f\xdc\x12\x57\x32\x8f\x08"
			  "\x18\x4b\xa7\x31\x31\xc5\x3c\xae"
			  "\xe6\x98\xe3\x61\x19\x42\x11\x49"
			  "\xea\x8c\x71\x24\x56\x69\x7d\x30",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20",
		.ksize	= 32,
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
			   "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 112,
		.digest	= "\x47\x03\x05\xfc\x7e\x40\xfe\x34"
			  "\xd3\xee\xb3\xe7\x73\xd9\x5a\xab"
			  "\x73\xac\xf0\xfd\x06\x04\x47\xa5"
			  "\xeb\x45\x95\xbf\x33\xa9\xd1\xa3",
	}, {
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			"\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 32,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x19\x8a\x60\x7e\xb4\x4b\xfb\xc6"
			  "\x99\x03\xa0\xf1\xcf\x2b\xbd\xc5"
			  "\xba\x0a\xa3\xf3\xd9\xae\x3c\x1c"
			  "\x7a\x3b\x16\x96\xa0\xb6\x8c\xf7",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x5b\xdc\xc1\x46\xbf\x60\x75\x4e"
			  "\x6a\x04\x24\x26\x08\x95\x75\xc7"
			  "\x5a\x00\x3f\x08\x9d\x27\x39\x83"
			  "\x9d\xec\x58\xb9\x64\xec\x38\x43",
		.np	= 2,
		.tap	= { 14, 14 }
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 32,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\xcd\xcb\x12\x20\xd1\xec\xcc\xea"
			  "\x91\xe5\x3a\xba\x30\x92\xf9\x62"
			  "\xe5\x49\xfe\x6c\xe9\xed\x7f\xdc"
			  "\x43\x19\x1f\xbd\xe4\x5c\x30\xb0",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
			  "\x21\x22\x23\x24\x25",
		.ksize	= 37,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\xd4\x63\x3c\x17\xf6\xfb\x8d\x74"
			  "\x4c\x66\xde\xe0\xf8\xf0\x74\x55"
			  "\x6e\xc4\xaf\x55\xef\x07\x99\x85"
			  "\x41\x46\x8e\xb4\x9b\xd2\xe9\x17",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c"
			"\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c"
			"\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 32,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.digest	= "\x75\x46\xaf\x01\x84\x1f\xc0\x9b"
			  "\x1a\xb9\xc3\x74\x9a\x5f\x1c\x17"
			  "\xd4\xf5\x89\x66\x8a\x58\x7b\x27"
			  "\x00\xa9\xc9\x7c\x11\x93\xcf\x42",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\x69\x53\x02\x5e\xd9\x6f\x0c\x09"
			  "\xf8\x0a\x96\xf7\x8e\x65\x38\xdb"
			  "\xe2\xe7\xb8\x20\xe3\xdd\x97\x0e"
			  "\x7d\xdd\x39\x09\x1b\x32\x35\x2f",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than "
			   "One Block-Size Data",
		.psize	= 73,
		.digest	= "\x63\x55\xac\x22\xe8\x90\xd0\xa3"
			  "\xc8\x48\x1a\x5c\xa4\x82\x5b\xc8"
			  "\x84\xd3\xe7\xa1\xff\x98\xa2\xfc"
			  "\x2a\xc7\xd8\xe0\x64\xc3\xb2\xe6",
	},
};

#define XCBC_AES_TEST_VECTORS 6

static struct hash_testvec aes_xcbc128_tv_template[] = {
	{
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = zeroed_string,
		.digest = "\x75\xf0\x25\x1d\x52\x8a\xc0\x1c"
			  "\x45\x73\xdf\xd5\x84\xd7\x9f\x29",
		.psize	= 0,
		.ksize	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = "\x00\x01\x02",
		.digest	= "\x5b\x37\x65\x80\xae\x2f\x19\xaf"
			  "\xe7\x21\x9c\xee\xf1\x72\x75\x6f",
		.psize	= 3,
		.ksize	= 16,
	} , {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = "\x00\x01\x02\x03\x04\x05\x06\x07"
			     "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.digest = "\xd2\xa2\x46\xfa\x34\x9b\x68\xa7"
			  "\x99\x98\xa4\x39\x4f\xf7\xa2\x63",
		.psize	= 16,
		.ksize	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = "\x00\x01\x02\x03\x04\x05\x06\x07"
			     "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			     "\x10\x11\x12\x13",
		.digest = "\x47\xf5\x1b\x45\x64\x96\x62\x15"
			  "\xb8\x98\x5c\x63\x05\x5e\xd3\x08",
		.tap	= { 10, 10 },
		.psize	= 20,
		.np	= 2,
		.ksize	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = "\x00\x01\x02\x03\x04\x05\x06\x07"
			     "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			     "\x10\x11\x12\x13\x14\x15\x16\x17"
			     "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.digest = "\xf5\x4f\x0e\xc8\xd2\xb9\xf3\xd3"
			  "\x68\x07\x73\x4b\xd5\x28\x3f\xd4",
		.psize	= 32,
		.ksize	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = "\x00\x01\x02\x03\x04\x05\x06\x07"
			     "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			     "\x10\x11\x12\x13\x14\x15\x16\x17"
			     "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
			     "\x20\x21",
		.digest = "\xbe\xcb\xb3\xbc\xcd\xb5\x18\xa3"
			  "\x06\x77\xd5\x48\x1f\xb6\xb4\xd8",
		.tap	= { 17, 17 },
		.psize	= 34,
		.np	= 2,
		.ksize	= 16,
	}
};

#define VMAC_AES_TEST_VECTORS	1
static char vmac_string[128] = {'\x01', '\x01', '\x01', '\x01',
				'\x02', '\x03', '\x02', '\x02',
				'\x02', '\x04', '\x01', '\x07',
				'\x04', '\x01', '\x04', '\x03',};
static struct hash_testvec aes_vmac128_tv_template[] = {
	{
		.key    = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.plaintext = vmac_string,
		.digest = "\xcb\xd7\x8a\xfd\xb7\x33\x79\xe7",
		.psize  = 128,
		.ksize  = 16,
	},
};

/*
 * SHA384 HMAC test vectors from RFC4231
 */

#define HMAC_SHA384_TEST_VECTORS	4

static struct hash_testvec hmac_sha384_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			  "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			  "\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\xaf\xd0\x39\x44\xd8\x48\x95\x62"
			  "\x6b\x08\x25\xf4\xab\x46\x90\x7f"
			  "\x15\xf9\xda\xdb\xe4\x10\x1e\xc6"
			  "\x82\xaa\x03\x4c\x7c\xeb\xc5\x9c"
			  "\xfa\xea\x9e\xa9\x07\x6e\xde\x7f"
			  "\x4a\xf1\x52\xe8\xb2\xfa\x9c\xb6",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xaf\x45\xd2\xe3\x76\x48\x40\x31"
			  "\x61\x7f\x78\xd2\xb5\x8a\x6b\x1b"
			  "\x9c\x7e\xf4\x64\xf5\xa0\x1b\x47"
			  "\xe4\x2e\xc3\x73\x63\x22\x44\x5e"
			  "\x8e\x22\x40\xca\x5e\x69\xe2\xc7"
			  "\x8b\x32\x39\xec\xfa\xb2\x16\x49",
		.np	= 4,
		.tap	= { 7, 7, 7, 7 }
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa",
		.ksize	= 131,
		.plaintext = "Test Using Larger Than Block-Siz"
			   "e Key - Hash Key First",
		.psize	= 54,
		.digest	= "\x4e\xce\x08\x44\x85\x81\x3e\x90"
			  "\x88\xd2\xc6\x3a\x04\x1b\xc5\xb4"
			  "\x4f\x9e\xf1\x01\x2a\x2b\x58\x8f"
			  "\x3c\xd1\x1f\x05\x03\x3a\xc4\xc6"
			  "\x0c\x2e\xf6\xab\x40\x30\xfe\x82"
			  "\x96\x24\x8d\xf1\x63\xf4\x49\x52",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa",
		.ksize	= 131,
		.plaintext = "This is a test u"
			   "sing a larger th"
			   "an block-size ke"
			   "y and a larger t"
			   "han block-size d"
			   "ata. The key nee"
			   "ds to be hashed "
			   "before being use"
			   "d by the HMAC al"
			   "gorithm.",
		.psize	= 152,
		.digest	= "\x66\x17\x17\x8e\x94\x1f\x02\x0d"
			  "\x35\x1e\x2f\x25\x4e\x8f\xd3\x2c"
			  "\x60\x24\x20\xfe\xb0\xb8\xfb\x9a"
			  "\xdc\xce\xbb\x82\x46\x1e\x99\xc5"
			  "\xa6\x78\xcc\x31\xe7\x99\x17\x6d"
			  "\x38\x60\xe6\x11\x0c\x46\x52\x3e",
	},
};

/*
 * SHA512 HMAC test vectors from RFC4231
 */

#define HMAC_SHA512_TEST_VECTORS	4

static struct hash_testvec hmac_sha512_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			  "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b"
			  "\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x87\xaa\x7c\xde\xa5\xef\x61\x9d"
			  "\x4f\xf0\xb4\x24\x1a\x1d\x6c\xb0"
			  "\x23\x79\xf4\xe2\xce\x4e\xc2\x78"
			  "\x7a\xd0\xb3\x05\x45\xe1\x7c\xde"
			  "\xda\xa8\x33\xb7\xd6\xb8\xa7\x02"
			  "\x03\x8b\x27\x4e\xae\xa3\xf4\xe4"
			  "\xbe\x9d\x91\x4e\xeb\x61\xf1\x70"
			  "\x2e\x69\x6c\x20\x3a\x12\x68\x54",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x16\x4b\x7a\x7b\xfc\xf8\x19\xe2"
			  "\xe3\x95\xfb\xe7\x3b\x56\xe0\xa3"
			  "\x87\xbd\x64\x22\x2e\x83\x1f\xd6"
			  "\x10\x27\x0c\xd7\xea\x25\x05\x54"
			  "\x97\x58\xbf\x75\xc0\x5a\x99\x4a"
			  "\x6d\x03\x4f\x65\xf8\xf0\xe6\xfd"
			  "\xca\xea\xb1\xa3\x4d\x4a\x6b\x4b"
			  "\x63\x6e\x07\x0a\x38\xbc\xe7\x37",
		.np	= 4,
		.tap	= { 7, 7, 7, 7 }
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			  "\xaa\xaa\xaa",
		.ksize	= 131,
		.plaintext = "Test Using Large"
			   "r Than Block-Siz"
			   "e Key - Hash Key"
			   " First",
		.psize	= 54,
		.digest	= "\x80\xb2\x42\x63\xc7\xc1\xa3\xeb"
			"\xb7\x14\x93\xc1\xdd\x7b\xe8\xb4"
			"\x9b\x46\xd1\xf4\x1b\x4a\xee\xc1"
			"\x12\x1b\x01\x37\x83\xf8\xf3\x52"
			"\x6b\x56\xd0\x37\xe0\x5f\x25\x98"
			"\xbd\x0f\xd2\x21\x5d\x6a\x1e\x52"
			"\x95\xe6\x4f\x73\xf6\x3f\x0a\xec"
			"\x8b\x91\x5a\x98\x5d\x78\x65\x98",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa",
		.ksize	= 131,
		.plaintext =
			  "This is a test u"
			  "sing a larger th"
			  "an block-size ke"
			  "y and a larger t"
			  "han block-size d"
			  "ata. The key nee"
			  "ds to be hashed "
			  "before being use"
			  "d by the HMAC al"
			  "gorithm.",
		.psize	= 152,
		.digest	= "\xe3\x7b\x6a\x77\x5d\xc8\x7d\xba"
			"\xa4\xdf\xa9\xf9\x6e\x5e\x3f\xfd"
			"\xde\xbd\x71\xf8\x86\x72\x89\x86"
			"\x5d\xf5\xa3\x2d\x20\xcd\xc9\x44"
			"\xb6\x02\x2c\xac\x3c\x49\x82\xb1"
			"\x0d\x5e\xeb\x55\xc3\xe4\xde\x15"
			"\x13\x46\x76\xfb\x6d\xe0\x44\x60"
			"\x65\xc9\x74\x40\xfa\x8c\x6a\x58",
	},
};

/*
 * DES test vectors.
 */
#define DES_ENC_TEST_VECTORS		10
#define DES_DEC_TEST_VECTORS		4
#define DES_CBC_ENC_TEST_VECTORS	5
#define DES_CBC_DEC_TEST_VECTORS	4
#define DES3_EDE_ENC_TEST_VECTORS	3
#define DES3_EDE_DEC_TEST_VECTORS	3
#define DES3_EDE_CBC_ENC_TEST_VECTORS	1
#define DES3_EDE_CBC_DEC_TEST_VECTORS	1

static struct cipher_testvec des_enc_tv_template[] = {
	{ /* From Applied Cryptography */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7",
		.ilen	= 8,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d",
		.rlen	= 8,
	}, { /* Same key, different plaintext block */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x22\x33\x44\x55\x66\x77\x88\x99",
		.ilen	= 8,
		.result	= "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b",
		.rlen	= 8,
	}, { /* Sbox test from NBS */
		.key	= "\x7c\xa1\x10\x45\x4a\x1a\x6e\x57",
		.klen	= 8,
		.input	= "\x01\xa1\xd6\xd0\x39\x77\x67\x42",
		.ilen	= 8,
		.result	= "\x69\x0f\x5b\x0d\x9a\x26\x93\x9b",
		.rlen	= 8,
	}, { /* Three blocks */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\x22\x33\x44\x55\x66\x77\x88\x99"
			  "\xca\xfe\xba\xbe\xfe\xed\xbe\xef",
		.ilen	= 24,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b"
			  "\xb4\x99\x26\xf7\x1f\xe1\xd4\x90",
		.rlen	= 24,
	}, { /* Weak key */
		.fail	= 1,
		.wk	= 1,
		.key	= "\x01\x01\x01\x01\x01\x01\x01\x01",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7",
		.ilen	= 8,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d",
		.rlen	= 8,
	}, { /* Two blocks -- for testing encryption across pages */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\x22\x33\x44\x55\x66\x77\x88\x99",
		.ilen	= 16,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b",
		.rlen	= 16,
		.np	= 2,
		.tap	= { 8, 8 }
	}, { /* Four blocks -- for testing encryption with chunking */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\x22\x33\x44\x55\x66\x77\x88\x99"
			  "\xca\xfe\xba\xbe\xfe\xed\xbe\xef"
			  "\x22\x33\x44\x55\x66\x77\x88\x99",
		.ilen	= 32,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b"
			  "\xb4\x99\x26\xf7\x1f\xe1\xd4\x90"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b",
		.rlen	= 32,
		.np	= 3,
		.tap	= { 14, 10, 8 }
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\x22\x33\x44\x55\x66\x77\x88\x99"
			  "\xca\xfe\xba\xbe\xfe\xed\xbe\xef",
		.ilen	= 24,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b"
			  "\xb4\x99\x26\xf7\x1f\xe1\xd4\x90",
		.rlen	= 24,
		.np	= 4,
		.tap	= { 2, 1, 3, 18 }
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\x22\x33\x44\x55\x66\x77\x88\x99",
		.ilen	= 16,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\xf7\x9c\x89\x2a\x33\x8f\x4a\x8b",
		.rlen	= 16,
		.np	= 5,
		.tap	= { 2, 2, 2, 2, 8 }
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xe7",
		.ilen	= 8,
		.result	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d",
		.rlen	= 8,
		.np	= 8,
		.tap	= { 1, 1, 1, 1, 1, 1, 1, 1 }
	},
};

static struct cipher_testvec des_dec_tv_template[] = {
	{ /* From Applied Cryptography */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d",
		.ilen	= 8,
		.result	= "\x01\x23\x45\x67\x89\xab\xcd\xe7",
		.rlen	= 8,
	}, { /* Sbox test from NBS */
		.key	= "\x7c\xa1\x10\x45\x4a\x1a\x6e\x57",
		.klen	= 8,
		.input	= "\x69\x0f\x5b\x0d\x9a\x26\x93\x9b",
		.ilen	= 8,
		.result	= "\x01\xa1\xd6\xd0\x39\x77\x67\x42",
		.rlen	= 8,
	}, { /* Two blocks, for chunking test */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\x69\x0f\x5b\x0d\x9a\x26\x93\x9b",
		.ilen	= 16,
		.result	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\xa3\x99\x7b\xca\xaf\x69\xa0\xf5",
		.rlen	= 16,
		.np	= 2,
		.tap	= { 8, 8 }
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.input	= "\xc9\x57\x44\x25\x6a\x5e\xd3\x1d"
			  "\x69\x0f\x5b\x0d\x9a\x26\x93\x9b",
		.ilen	= 16,
		.result	= "\x01\x23\x45\x67\x89\xab\xcd\xe7"
			  "\xa3\x99\x7b\xca\xaf\x69\xa0\xf5",
		.rlen	= 16,
		.np	= 3,
		.tap	= { 3, 12, 1 }
	},
};

static struct cipher_testvec des_cbc_enc_tv_template[] = {
	{ /* From OpenSSL */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.input	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 24,
		.result	= "\xcc\xd1\x73\xff\xab\x20\x39\xf4"
			  "\xac\xd8\xae\xfd\xdf\xd8\xa1\xeb"
			  "\x46\x8e\x91\x15\x78\x88\xba\x68",
		.rlen	= 24,
	}, { /* FIPS Pub 81 */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x12\x34\x56\x78\x90\xab\xcd\xef",
		.input	= "\x4e\x6f\x77\x20\x69\x73\x20\x74",
		.ilen	= 8,
		.result	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.rlen	= 8,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.input	= "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 8,
		.result	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.rlen	= 8,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.input	= "\x66\x6f\x72\x20\x61\x6c\x6c\x20",
		.ilen	= 8,
		.result	= "\x68\x37\x88\x49\x9a\x7c\x05\xf6",
		.rlen	= 8,
	}, { /* Copy of openssl vector for chunk testing */
	     /* From OpenSSL */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.input	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.ilen	= 24,
		.result	= "\xcc\xd1\x73\xff\xab\x20\x39\xf4"
			  "\xac\xd8\xae\xfd\xdf\xd8\xa1\xeb"
			  "\x46\x8e\x91\x15\x78\x88\xba\x68",
		.rlen	= 24,
		.np	= 2,
		.tap	= { 13, 11 }
	},
};

static struct cipher_testvec des_cbc_dec_tv_template[] = {
	{ /* FIPS Pub 81 */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x12\x34\x56\x78\x90\xab\xcd\xef",
		.input	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.ilen	= 8,
		.result	= "\x4e\x6f\x77\x20\x69\x73\x20\x74",
		.rlen	= 8,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\xe5\xc7\xcd\xde\x87\x2b\xf2\x7c",
		.input	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.ilen	= 8,
		.result	= "\x68\x65\x20\x74\x69\x6d\x65\x20",
		.rlen	= 8,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.input	= "\x68\x37\x88\x49\x9a\x7c\x05\xf6",
		.ilen	= 8,
		.result	= "\x66\x6f\x72\x20\x61\x6c\x6c\x20",
		.rlen	= 8,
	}, { /* Copy of above, for chunk testing */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.klen	= 8,
		.iv	= "\x43\xe9\x34\x00\x8c\x38\x9c\x0f",
		.input	= "\x68\x37\x88\x49\x9a\x7c\x05\xf6",
		.ilen	= 8,
		.result	= "\x66\x6f\x72\x20\x61\x6c\x6c\x20",
		.rlen	= 8,
		.np	= 2,
		.tap	= { 4, 4 }
	},
};

static struct cipher_testvec des3_ede_enc_tv_template[] = {
	{ /* These are from openssl */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\x55\x55\x55\x55\x55\x55\x55\x55"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.klen	= 24,
		.input	= "\x73\x6f\x6d\x65\x64\x61\x74\x61",
		.ilen	= 8,
		.result	= "\x18\xd7\x48\xe5\x63\x62\x05\x72",
		.rlen	= 8,
	}, {
		.key	= "\x03\x52\x02\x07\x67\x20\x82\x17"
			  "\x86\x02\x87\x66\x59\x08\x21\x98"
			  "\x64\x05\x6a\xbd\xfe\xa9\x34\x57",
		.klen	= 24,
		.input	= "\x73\x71\x75\x69\x67\x67\x6c\x65",
		.ilen	= 8,
		.result	= "\xc0\x7d\x2a\x0f\xa5\x66\xfa\x30",
		.rlen	= 8,
	}, {
		.key	= "\x10\x46\x10\x34\x89\x98\x80\x20"
			  "\x91\x07\xd0\x15\x89\x19\x01\x01"
			  "\x19\x07\x92\x10\x98\x1a\x01\x01",
		.klen	= 24,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 8,
		.result	= "\xe1\xef\x62\xc3\x32\xfe\x82\x5b",
		.rlen	= 8,
	},
};

static struct cipher_testvec des3_ede_dec_tv_template[] = {
	{ /* These are from openssl */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\x55\x55\x55\x55\x55\x55\x55\x55"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.klen	= 24,
		.input	= "\x18\xd7\x48\xe5\x63\x62\x05\x72",
		.ilen	= 8,
		.result	= "\x73\x6f\x6d\x65\x64\x61\x74\x61",
		.rlen	= 8,
	}, {
		.key	= "\x03\x52\x02\x07\x67\x20\x82\x17"
			  "\x86\x02\x87\x66\x59\x08\x21\x98"
			  "\x64\x05\x6a\xbd\xfe\xa9\x34\x57",
		.klen	= 24,
		.input	= "\xc0\x7d\x2a\x0f\xa5\x66\xfa\x30",
		.ilen	= 8,
		.result	= "\x73\x71\x75\x69\x67\x67\x6c\x65",
		.rlen	= 8,
	}, {
		.key	= "\x10\x46\x10\x34\x89\x98\x80\x20"
			  "\x91\x07\xd0\x15\x89\x19\x01\x01"
			  "\x19\x07\x92\x10\x98\x1a\x01\x01",
		.klen	= 24,
		.input	= "\xe1\xef\x62\xc3\x32\xfe\x82\x5b",
		.ilen	= 8,
		.result	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.rlen	= 8,
	},
};

static struct cipher_testvec des3_ede_cbc_enc_tv_template[] = {
	{ /* Generated from openssl */
		.key	= "\xE9\xC0\xFF\x2E\x76\x0B\x64\x24"
			  "\x44\x4D\x99\x5A\x12\xD6\x40\xC0"
			  "\xEA\xC2\x84\xE8\x14\x95\xDB\xE8",
		.klen	= 24,
		.iv	= "\x7D\x33\x88\x93\x0F\x93\xB2\x42",
		.input	= "\x6f\x54\x20\x6f\x61\x4d\x79\x6e"
			  "\x53\x20\x63\x65\x65\x72\x73\x74"
			  "\x54\x20\x6f\x6f\x4d\x20\x6e\x61"
			  "\x20\x79\x65\x53\x72\x63\x74\x65"
			  "\x20\x73\x6f\x54\x20\x6f\x61\x4d"
			  "\x79\x6e\x53\x20\x63\x65\x65\x72"
			  "\x73\x74\x54\x20\x6f\x6f\x4d\x20"
			  "\x6e\x61\x20\x79\x65\x53\x72\x63"
			  "\x74\x65\x20\x73\x6f\x54\x20\x6f"
			  "\x61\x4d\x79\x6e\x53\x20\x63\x65"
			  "\x65\x72\x73\x74\x54\x20\x6f\x6f"
			  "\x4d\x20\x6e\x61\x20\x79\x65\x53"
			  "\x72\x63\x74\x65\x20\x73\x6f\x54"
			  "\x20\x6f\x61\x4d\x79\x6e\x53\x20"
			  "\x63\x65\x65\x72\x73\x74\x54\x20"
			  "\x6f\x6f\x4d\x20\x6e\x61\x0a\x79",
		.ilen	= 128,
		.result	= "\x0e\x2d\xb6\x97\x3c\x56\x33\xf4"
			  "\x67\x17\x21\xc7\x6e\x8a\xd5\x49"
			  "\x74\xb3\x49\x05\xc5\x1c\xd0\xed"
			  "\x12\x56\x5c\x53\x96\xb6\x00\x7d"
			  "\x90\x48\xfc\xf5\x8d\x29\x39\xcc"
			  "\x8a\xd5\x35\x18\x36\x23\x4e\xd7"
			  "\x76\xd1\xda\x0c\x94\x67\xbb\x04"
			  "\x8b\xf2\x03\x6c\xa8\xcf\xb6\xea"
			  "\x22\x64\x47\xaa\x8f\x75\x13\xbf"
			  "\x9f\xc2\xc3\xf0\xc9\x56\xc5\x7a"
			  "\x71\x63\x2e\x89\x7b\x1e\x12\xca"
			  "\xe2\x5f\xaf\xd8\xa4\xf8\xc9\x7a"
			  "\xd6\xf9\x21\x31\x62\x44\x45\xa6"
			  "\xd6\xbc\x5a\xd3\x2d\x54\x43\xcc"
			  "\x9d\xde\xa5\x70\xe9\x42\x45\x8a"
			  "\x6b\xfa\xb1\x91\x13\xb0\xd9\x19",
		.rlen	= 128,
	},
};

static struct cipher_testvec des3_ede_cbc_dec_tv_template[] = {
	{ /* Generated from openssl */
		.key	= "\xE9\xC0\xFF\x2E\x76\x0B\x64\x24"
			  "\x44\x4D\x99\x5A\x12\xD6\x40\xC0"
			  "\xEA\xC2\x84\xE8\x14\x95\xDB\xE8",
		.klen	= 24,
		.iv	= "\x7D\x33\x88\x93\x0F\x93\xB2\x42",
		.input	= "\x0e\x2d\xb6\x97\x3c\x56\x33\xf4"
			  "\x67\x17\x21\xc7\x6e\x8a\xd5\x49"
			  "\x74\xb3\x49\x05\xc5\x1c\xd0\xed"
			  "\x12\x56\x5c\x53\x96\xb6\x00\x7d"
			  "\x90\x48\xfc\xf5\x8d\x29\x39\xcc"
			  "\x8a\xd5\x35\x18\x36\x23\x4e\xd7"
			  "\x76\xd1\xda\x0c\x94\x67\xbb\x04"
			  "\x8b\xf2\x03\x6c\xa8\xcf\xb6\xea"
			  "\x22\x64\x47\xaa\x8f\x75\x13\xbf"
			  "\x9f\xc2\xc3\xf0\xc9\x56\xc5\x7a"
			  "\x71\x63\x2e\x89\x7b\x1e\x12\xca"
			  "\xe2\x5f\xaf\xd8\xa4\xf8\xc9\x7a"
			  "\xd6\xf9\x21\x31\x62\x44\x45\xa6"
			  "\xd6\xbc\x5a\xd3\x2d\x54\x43\xcc"
			  "\x9d\xde\xa5\x70\xe9\x42\x45\x8a"
			  "\x6b\xfa\xb1\x91\x13\xb0\xd9\x19",
		.ilen	= 128,
		.result	= "\x6f\x54\x20\x6f\x61\x4d\x79\x6e"
			  "\x53\x20\x63\x65\x65\x72\x73\x74"
			  "\x54\x20\x6f\x6f\x4d\x20\x6e\x61"
			  "\x20\x79\x65\x53\x72\x63\x74\x65"
			  "\x20\x73\x6f\x54\x20\x6f\x61\x4d"
			  "\x79\x6e\x53\x20\x63\x65\x65\x72"
			  "\x73\x74\x54\x20\x6f\x6f\x4d\x20"
			  "\x6e\x61\x20\x79\x65\x53\x72\x63"
			  "\x74\x65\x20\x73\x6f\x54\x20\x6f"
			  "\x61\x4d\x79\x6e\x53\x20\x63\x65"
			  "\x65\x72\x73\x74\x54\x20\x6f\x6f"
			  "\x4d\x20\x6e\x61\x20\x79\x65\x53"
			  "\x72\x63\x74\x65\x20\x73\x6f\x54"
			  "\x20\x6f\x61\x4d\x79\x6e\x53\x20"
			  "\x63\x65\x65\x72\x73\x74\x54\x20"
			  "\x6f\x6f\x4d\x20\x6e\x61\x0a\x79",
		.rlen	= 128,
	},
};

/*
 * Blowfish test vectors.
 */
#define BF_ENC_TEST_VECTORS	6
#define BF_DEC_TEST_VECTORS	6
#define BF_CBC_ENC_TEST_VECTORS	1
#define BF_CBC_DEC_TEST_VECTORS	1

static struct cipher_testvec bf_enc_tv_template[] = {
	{ /* DES test vectors from OpenSSL */
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 8,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 8,
		.result	= "\x4e\xf9\x97\x45\x61\x98\xdd\x78",
		.rlen	= 8,
	}, {
		.key	= "\x1f\x1f\x1f\x1f\x0e\x0e\x0e\x0e",
		.klen	= 8,
		.input	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.ilen	= 8,
		.result	= "\xa7\x90\x79\x51\x08\xea\x3c\xae",
		.rlen	= 8,
	}, {
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87",
		.klen	= 8,
		.input	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ilen	= 8,
		.result	= "\xe8\x7a\x24\x4e\x2c\xc8\x5e\x82",
		.rlen	= 8,
	}, { /* Vary the keylength... */
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f",
		.klen	= 16,
		.input	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ilen	= 8,
		.result	= "\x93\x14\x28\x87\xee\x3b\xe1\x5c",
		.rlen	= 8,
	}, {
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f"
			  "\x00\x11\x22\x33\x44",
		.klen	= 21,
		.input	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ilen	= 8,
		.result	= "\xe6\xf5\x1e\xd7\x9b\x9d\xb2\x1f",
		.rlen	= 8,
	}, { /* Generated with bf488 */
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f"
			  "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x04\x68\x91\x04\xc2\xfd\x3b\x2f"
			  "\x58\x40\x23\x64\x1a\xba\x61\x76"
			  "\x1f\x1f\x1f\x1f\x0e\x0e\x0e\x0e"
			  "\xff\xff\xff\xff\xff\xff\xff\xff",
		.klen	= 56,
		.input	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.ilen	= 8,
		.result	= "\xc0\x45\x04\x01\x2e\x4e\x1f\x53",
		.rlen	= 8,
	},
};

static struct cipher_testvec bf_dec_tv_template[] = {
	{ /* DES test vectors from OpenSSL */
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 8,
		.input	= "\x4e\xf9\x97\x45\x61\x98\xdd\x78",
		.ilen	= 8,
		.result	= "\x00\x00\x00\x00\x00\x00\x00\x00",
		.rlen	= 8,
	}, {
		.key	= "\x1f\x1f\x1f\x1f\x0e\x0e\x0e\x0e",
		.klen	= 8,
		.input	= "\xa7\x90\x79\x51\x08\xea\x3c\xae",
		.ilen	= 8,
		.result	= "\x01\x23\x45\x67\x89\xab\xcd\xef",
		.rlen	= 8,
	}, {
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87",
		.klen	= 8,
		.input	= "\xe8\x7a\x24\x4e\x2c\xc8\x5e\x82",
		.ilen	= 8,
		.result	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.rlen	= 8,
	}, { /* Vary the keylength... */
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f",
		.klen	= 16,
		.input	= "\x93\x14\x28\x87\xee\x3b\xe1\x5c",
		.ilen	= 8,
		.result	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.rlen	= 8,
	}, {
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f"
			  "\x00\x11\x22\x33\x44",
		.klen	= 21,
		.input	= "\xe6\xf5\x1e\xd7\x9b\x9d\xb2\x1f",
		.ilen	= 8,
		.result	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.rlen	= 8,
	}, { /* Generated with bf488, using OpenSSL, Libgcrypt and Nettle */
		.key	= "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87"
			  "\x78\x69\x5a\x4b\x3c\x2d\x1e\x0f"
			  "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x04\x68\x91\x04\xc2\xfd\x3b\x2f"
			  "\x58\x40\x23\x64\x1a\xba\x61\x76"
			  "\x1f\x1f\x1f\x1f\x0e\x0e\x0e\x0e"
			  "\xff\xff\xff\xff\xff\xff\xff\xff",
		.klen	= 56,
		.input	= "\xc0\x45\x04\x01\x2e\x4e\x1f\x53",
		.ilen	= 8,
		.result	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.rlen	= 8,
	},
};

static struct cipher_testvec bf_cbc_enc_tv_template[] = {
	{ /* From OpenSSL */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87",
		.klen	= 16,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.input	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20"
			  "\x66\x6f\x72\x20\x00\x00\x00\x00",
		.ilen	= 32,
		.result	= "\x6b\x77\xb4\xd6\x30\x06\xde\xe6"
			  "\x05\xb1\x56\xe2\x74\x03\x97\x93"
			  "\x58\xde\xb9\xe7\x15\x46\x16\xd9"
			  "\x59\xf1\x65\x2b\xd5\xff\x92\xcc",
		.rlen	= 32,
	},
};

static struct cipher_testvec bf_cbc_dec_tv_template[] = {
	{ /* From OpenSSL */
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xf0\xe1\xd2\xc3\xb4\xa5\x96\x87",
		.klen	= 16,
		.iv	= "\xfe\xdc\xba\x98\x76\x54\x32\x10",
		.input	= "\x6b\x77\xb4\xd6\x30\x06\xde\xe6"
			  "\x05\xb1\x56\xe2\x74\x03\x97\x93"
			  "\x58\xde\xb9\xe7\x15\x46\x16\xd9"
			  "\x59\xf1\x65\x2b\xd5\xff\x92\xcc",
		.ilen	= 32,
		.result	= "\x37\x36\x35\x34\x33\x32\x31\x20"
			  "\x4e\x6f\x77\x20\x69\x73\x20\x74"
			  "\x68\x65\x20\x74\x69\x6d\x65\x20"
			  "\x66\x6f\x72\x20\x00\x00\x00\x00",
		.rlen	= 32,
	},
};

/*
 * Twofish test vectors.
 */
#define TF_ENC_TEST_VECTORS		3
#define TF_DEC_TEST_VECTORS		3
#define TF_CBC_ENC_TEST_VECTORS		4
#define TF_CBC_DEC_TEST_VECTORS		4

static struct cipher_testvec tf_enc_tv_template[] = {
	{
		.key	= zeroed_string,
		.klen	= 16,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10"
			  "\x00\x11\x22\x33\x44\x55\x66\x77",
		.klen	= 24,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\xcf\xd1\xd2\xe5\xa9\xbe\x9c\xdf"
			  "\x50\x1f\x13\xb8\x92\xbd\x22\x48",
		.rlen	= 16,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10"
			  "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.klen	= 32,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x37\x52\x7b\xe0\x05\x23\x34\xb8"
			  "\x9f\x0c\xfc\xca\xe8\x7c\xfa\x20",
		.rlen	= 16,
	},
};

static struct cipher_testvec tf_dec_tv_template[] = {
	{
		.key	= zeroed_string,
		.klen	= 16,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10"
			  "\x00\x11\x22\x33\x44\x55\x66\x77",
		.klen	= 24,
		.input	= "\xcf\xd1\xd2\xe5\xa9\xbe\x9c\xdf"
			  "\x50\x1f\x13\xb8\x92\xbd\x22\x48",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= "\x01\x23\x45\x67\x89\xab\xcd\xef"
			  "\xfe\xdc\xba\x98\x76\x54\x32\x10"
			  "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.klen	= 32,
		.input	= "\x37\x52\x7b\xe0\x05\x23\x34\xb8"
			  "\x9f\x0c\xfc\xca\xe8\x7c\xfa\x20",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};

static struct cipher_testvec tf_cbc_enc_tv_template[] = {
	{ /* Generated with Nettle */
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= zeroed_string,
		.ilen	= 48,
		.result	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a"
			  "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19"
			  "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.rlen	= 48,
	},
};

static struct cipher_testvec tf_cbc_dec_tv_template[] = {
	{ /* Reverse of the first four above */
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.input	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.input	= "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a"
			  "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19"
			  "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 48,
		.result	= zeroed_string,
		.rlen	= 48,
	},
};

/*
 * Serpent test vectors.  These are backwards because Serpent writes
 * octet sequences in right-to-left mode.
 */
#define SERPENT_ENC_TEST_VECTORS	4
#define SERPENT_DEC_TEST_VECTORS	4

#define TNEPRES_ENC_TEST_VECTORS	4
#define TNEPRES_DEC_TEST_VECTORS	4

static struct cipher_testvec serpent_enc_tv_template[] = {
	{
		.input	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ilen	= 16,
		.result	= "\x12\x07\xfc\xce\x9b\xd0\xd6\x47"
			  "\x6a\xe9\x8f\xbe\xd1\x43\xa0\xe2",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ilen	= 16,
		.result	= "\x4c\x7d\x8a\x32\x80\x72\xa2\x2c"
			  "\x82\x3e\x4a\x1f\x3a\xcd\xa1\x6d",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.ilen	= 16,
		.result	= "\xde\x26\x9f\xf8\x33\xe4\x32\xb8"
			  "\x5b\x2e\x88\xd2\x70\x1c\xe7\x5c",
		.rlen	= 16,
	}, {
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\xdd\xd2\x6b\x98\xa5\xff\xd8\x2c"
			  "\x05\x34\x5a\x9d\xad\xbf\xaf\x49",
		.rlen	= 16,
	},
};

static struct cipher_testvec tnepres_enc_tv_template[] = {
	{ /* KeySize=128, PT=0, I=1 */
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.key    = "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen   = 16,
		.ilen	= 16,
		.result	= "\x49\xaf\xbf\xad\x9d\x5a\x34\x05"
			  "\x2c\xd8\xff\xa5\x98\x6b\xd2\xdd",
		.rlen	= 16,
	}, { /* KeySize=192, PT=0, I=1 */
		.key	= "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 24,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 16,
		.result	= "\xe7\x8e\x54\x02\xc7\x19\x55\x68"
			  "\xac\x36\x78\xf7\xa3\xf6\x0c\x66",
		.rlen	= 16,
	}, { /* KeySize=256, PT=0, I=1 */
		.key	= "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 32,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 16,
		.result	= "\xab\xed\x96\xe7\x66\xbf\x28\xcb"
			  "\xc0\xeb\xd2\x1a\x82\xef\x08\x19",
		.rlen	= 16,
	}, { /* KeySize=256, I=257 */
		.key	= "\x1f\x1e\x1d\x1c\x1b\x1a\x19\x18"
			  "\x17\x16\x15\x14\x13\x12\x11\x10"
			  "\x0f\x0e\x0d\x0c\x0b\x0a\x09\x08"
			  "\x07\x06\x05\x04\x03\x02\x01\x00",
		.klen	= 32,
		.input	= "\x0f\x0e\x0d\x0c\x0b\x0a\x09\x08"
			  "\x07\x06\x05\x04\x03\x02\x01\x00",
		.ilen	= 16,
		.result	= "\x5c\xe7\x1c\x70\xd2\x88\x2e\x5b"
			  "\xb8\x32\xe4\x33\xf8\x9f\x26\xde",
		.rlen	= 16,
	},
};


static struct cipher_testvec serpent_dec_tv_template[] = {
	{
		.input	= "\x12\x07\xfc\xce\x9b\xd0\xd6\x47"
			  "\x6a\xe9\x8f\xbe\xd1\x43\xa0\xe2",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\x4c\x7d\x8a\x32\x80\x72\xa2\x2c"
			  "\x82\x3e\x4a\x1f\x3a\xcd\xa1\x6d",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\xde\x26\x9f\xf8\x33\xe4\x32\xb8"
			  "\x5b\x2e\x88\xd2\x70\x1c\xe7\x5c",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= "\xdd\xd2\x6b\x98\xa5\xff\xd8\x2c"
			  "\x05\x34\x5a\x9d\xad\xbf\xaf\x49",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};

static struct cipher_testvec tnepres_dec_tv_template[] = {
	{
		.input	= "\x41\xcc\x6b\x31\x59\x31\x45\x97"
			  "\x6d\x6f\xbb\x38\x4b\x37\x21\x28",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\xea\xf4\xd7\xfc\xd8\x01\x34\x47"
			  "\x81\x45\x0b\xfa\x0c\xd6\xad\x6e",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x64\xa9\x1a\x37\xed\x9f\xe7\x49"
			  "\xa8\x4e\x76\xd6\xf5\x0d\x78\xee",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, { /* KeySize=128, I=121 */
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= "\x3d\xda\xbf\xc0\x06\xda\xab\x06"
			  "\x46\x2a\xf4\xef\x81\x54\x4e\x26",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};


/* Cast6 test vectors from RFC 2612 */
#define CAST6_ENC_TEST_VECTORS	3
#define CAST6_DEC_TEST_VECTORS  3

static struct cipher_testvec cast6_enc_tv_template[] = {
	{
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\x0a\xf7\x56\x47\xf2\x9f\x61\x5d",
		.klen	= 16,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\xc8\x42\xa0\x89\x72\xb4\x3d\x20"
			  "\x83\x6c\x91\xd1\xb7\x53\x0f\x6b",
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\xba\xc7\x7a\x77\x17\x94\x28\x63",
		.klen	= 24,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x1b\x38\x6c\x02\x10\xdc\xad\xcb"
			  "\xdd\x0e\x41\xaa\x08\xa7\xa7\xe8",
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\x8d\x7c\x47\xce\x26\x49\x08\x46"
			  "\x1c\xc1\xb5\x13\x7a\xe6\xb6\x04",
		.klen	= 32,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x4f\x6a\x20\x38\x28\x68\x97\xb9"
			  "\xc9\x87\x01\x36\x55\x33\x17\xfa",
		.rlen	= 16,
	},
};

static struct cipher_testvec cast6_dec_tv_template[] = {
	{
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\x0a\xf7\x56\x47\xf2\x9f\x61\x5d",
		.klen	= 16,
		.input	= "\xc8\x42\xa0\x89\x72\xb4\x3d\x20"
			  "\x83\x6c\x91\xd1\xb7\x53\x0f\x6b",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\xba\xc7\x7a\x77\x17\x94\x28\x63",
		.klen	= 24,
		.input	= "\x1b\x38\x6c\x02\x10\xdc\xad\xcb"
			  "\xdd\x0e\x41\xaa\x08\xa7\xa7\xe8",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\x8d\x7c\x47\xce\x26\x49\x08\x46"
			  "\x1c\xc1\xb5\x13\x7a\xe6\xb6\x04",
		.klen	= 32,
		.input	= "\x4f\x6a\x20\x38\x28\x68\x97\xb9"
			  "\xc9\x87\x01\x36\x55\x33\x17\xfa",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};


/*
 * AES test vectors.
 */
#define AES_ENC_TEST_VECTORS 3
#define AES_DEC_TEST_VECTORS 3
#define AES_CBC_ENC_TEST_VECTORS 4
#define AES_CBC_DEC_TEST_VECTORS 4
#define AES_LRW_ENC_TEST_VECTORS 8
#define AES_LRW_DEC_TEST_VECTORS 8
#define AES_XTS_ENC_TEST_VECTORS 4
#define AES_XTS_DEC_TEST_VECTORS 4
#define AES_CTR_ENC_TEST_VECTORS 3
#define AES_CTR_DEC_TEST_VECTORS 3
#define AES_CTR_3686_ENC_TEST_VECTORS 7
#define AES_CTR_3686_DEC_TEST_VECTORS 6
#define AES_GCM_ENC_TEST_VECTORS 9
#define AES_GCM_DEC_TEST_VECTORS 8
#define AES_CCM_ENC_TEST_VECTORS 7
#define AES_CCM_DEC_TEST_VECTORS 7
#define AES_CCM_4309_ENC_TEST_VECTORS 7
#define AES_CCM_4309_DEC_TEST_VECTORS 10

static struct cipher_testvec aes_enc_tv_template[] = {
	{ /* From FIPS-197 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x69\xc4\xe0\xd8\x6a\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17",
		.klen	= 24,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x8e\xa2\xb7\xca\x51\x67\x45\xbf"
			  "\xea\xfc\x49\x90\x4b\x49\x60\x89",
		.rlen	= 16,
	},
};

static struct cipher_testvec aes_dec_tv_template[] = {
	{ /* From FIPS-197 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\x69\xc4\xe0\xd8\x6a\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17",
		.klen	= 24,
		.input	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x8e\xa2\xb7\xca\x51\x67\x45\xbf"
			  "\xea\xfc\x49\x90\x4b\x49\x60\x89",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16,
	},
};

static struct cipher_testvec aes_cbc_enc_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv	= "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "\xb4\x22\xda\x80\x2c\x9f\xac\x41",
		.input	= "Single block msg",
		.ilen   = 16,
		.result = "\xe3\x53\x77\x9c\x10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.rlen   = 16,
	}, {
		.key    = "\xc2\x86\x69\x6d\x88\x7c\x9a\xa0"
			  "\x61\x1b\xbb\x3e\x20\x25\xa4\x5a",
		.klen   = 16,
		.iv     = "\x56\x2e\x17\x99\x6d\x09\x3d\x28"
			  "\xdd\xb3\xba\x69\x5a\x2e\x6f\x58",
		.input  = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\xd6\x1a\xb1",
		.rlen   = 32,
	}, { /* From NIST SP800-38A */
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
			  "\xe5\xe7\x38\x76\x3f\x69\x14\x5a"
			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
		.rlen	= 64,
	}, {
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	= 32,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\xf5\x8c\x4c\x04\xd6\xe5\xf1\xba"
			  "\x77\x9e\xab\xfb\x5f\x7b\xfb\xd6"
			  "\x9c\xfc\x4e\x96\x7e\xdb\x80\x8d"
			  "\x67\x9f\x77\x7b\xc6\x70\x2c\x7d"
			  "\x39\xf2\x33\x69\xa9\xd9\xba\xcf"
			  "\xa5\x30\xe2\x63\x04\x23\x14\x61"
			  "\xb2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.rlen	= 64,
	},
};

static struct cipher_testvec aes_cbc_dec_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv     = "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "\xb4\x22\xda\x80\x2c\x9f\xac\x41",
		.input  = "\xe3\x53\x77\x9c\x10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.ilen   = 16,
		.result = "Single block msg",
		.rlen   = 16,
	}, {
		.key    = "\xc2\x86\x69\x6d\x88\x7c\x9a\xa0"
			  "\x61\x1b\xbb\x3e\x20\x25\xa4\x5a",
		.klen   = 16,
		.iv     = "\x56\x2e\x17\x99\x6d\x09\x3d\x28"
			  "\xdd\xb3\xba\x69\x5a\x2e\x6f\x58",
		.input  = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\xd6\x1a\xb1",
		.ilen   = 32,
		.result = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.rlen   = 32,
	}, { /* From NIST SP800-38A */
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
			  "\xe5\xe7\x38\x76\x3f\x69\x14\x5a"
			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
		.ilen	= 64,
		.result	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.rlen	= 64,
	}, {
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	= 32,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\xf5\x8c\x4c\x04\xd6\xe5\xf1\xba"
			  "\x77\x9e\xab\xfb\x5f\x7b\xfb\xd6"
			  "\x9c\xfc\x4e\x96\x7e\xdb\x80\x8d"
			  "\x67\x9f\x77\x7b\xc6\x70\x2c\x7d"
			  "\x39\xf2\x33\x69\xa9\xd9\xba\xcf"
			  "\xa5\x30\xe2\x63\x04\x23\x14\x61"
			  "\xb2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.ilen	= 64,
		.result	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.rlen	= 64,
	},
};

static struct cipher_testvec aes_lrw_enc_tv_template[] = {
	/* from http://grouper.ieee.org/groups/1619/email/pdf00017.pdf */
	{ /* LRW-32-AES 1 */
		.key    = "\x45\x62\xac\x25\xf8\x28\x17\x6d"
			  "\x4c\x26\x84\x14\xb5\x68\x01\x85"
			  "\x25\x8e\x2a\x05\xe7\x3e\x9d\x03"
			  "\xee\x5a\x83\x0c\xcc\x09\x4c\x87",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\xf1\xb2\x73\xcd\x65\xa3\xdf\x5f"
			  "\xe9\x5d\x48\x92\x54\x63\x4e\xb8",
		.rlen   = 16,
	}, { /* LRW-32-AES 2 */
		.key    = "\x59\x70\x47\x14\xf5\x57\x47\x8c"
			  "\xd7\x79\xe8\x0f\x54\x88\x79\x44"
			  "\x0d\x48\xf0\xb7\xb1\x5a\x53\xea"
			  "\x1c\xaa\x6b\x29\xc2\xca\xfb\xaf",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x02",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\x00\xc8\x2b\xae\x95\xbb\xcd\xe5"
			  "\x27\x4f\x07\x69\xb2\x60\xe1\x36",
		.rlen   = 16,
	}, { /* LRW-32-AES 3 */
		.key    = "\xd8\x2a\x91\x34\xb2\x6a\x56\x50"
			  "\x30\xfe\x69\xe2\x37\x7f\x98\x47"
			  "\xcd\xf9\x0b\x16\x0c\x64\x8f\xb6"
			  "\xb0\x0d\x0d\x1b\xae\x85\x87\x1f",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x02\x00\x00\x00\x00",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\x76\x32\x21\x83\xed\x8f\xf1\x82"
			  "\xf9\x59\x62\x03\x69\x0e\x5e\x01",
		.rlen   = 16,
	}, { /* LRW-32-AES 4 */
		.key    = "\x0f\x6a\xef\xf8\xd3\xd2\xbb\x15"
			  "\x25\x83\xf7\x3c\x1f\x01\x28\x74"
			  "\xca\xc6\xbc\x35\x4d\x4a\x65\x54"
			  "\x90\xae\x61\xcf\x7b\xae\xbd\xcc"
			  "\xad\xe4\x94\xc5\x4a\x29\xae\x70",
		.klen   = 40,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\x9c\x0f\x15\x2f\x55\xa2\xd8\xf0"
			  "\xd6\x7b\x8f\x9e\x28\x22\xbc\x41",
		.rlen   = 16,
	}, { /* LRW-32-AES 5 */
		.key    = "\x8a\xd4\xee\x10\x2f\xbd\x81\xff"
			  "\xf8\x86\xce\xac\x93\xc5\xad\xc6"
			  "\xa0\x19\x07\xc0\x9d\xf7\xbb\xdd"
			  "\x52\x13\xb2\xb7\xf0\xff\x11\xd8"
			  "\xd6\x08\xd0\xcd\x2e\xb1\x17\x6f",
		.klen   = 40,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x02\x00\x00\x00\x00",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\xd4\x27\x6a\x7f\x14\x91\x3d\x65"
			  "\xc8\x60\x48\x02\x87\xe3\x34\x06",
		.rlen   = 16,
	}, { /* LRW-32-AES 6 */
		.key    = "\xf8\xd4\x76\xff\xd6\x46\xee\x6c"
			  "\x23\x84\xcb\x1c\x77\xd6\x19\x5d"
			  "\xfe\xf1\xa9\xf3\x7b\xbc\x8d\x21"
			  "\xa7\x9c\x21\xf8\xcb\x90\x02\x89"
			  "\xa8\x45\x34\x8e\xc8\xc5\xb5\xf1"
			  "\x26\xf5\x0e\x76\xfe\xfd\x1b\x1e",
		.klen   = 48,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\xbd\x06\xb8\xe1\xdb\x98\x89\x9e"
			  "\xc4\x98\xe4\x91\xcf\x1c\x70\x2b",
		.rlen   = 16,
	}, { /* LRW-32-AES 7 */
		.key    = "\xfb\x76\x15\xb2\x3d\x80\x89\x1d"
			  "\xd4\x70\x98\x0b\xc7\x95\x84\xc8"
			  "\xb2\xfb\x64\xce\x60\x97\x87\x8d"
			  "\x17\xfc\xe4\x5a\x49\xe8\x30\xb7"
			  "\x6e\x78\x17\xe7\x2d\x5e\x12\xd4"
			  "\x60\x64\x04\x7a\xf1\x2f\x9e\x0c",
		.klen   = 48,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x02\x00\x00\x00\x00",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\x5b\x90\x8e\xc1\xab\xdd\x67\x5f"
			  "\x3d\x69\x8a\x95\x53\xc8\x9c\xe5",
		.rlen   = 16,
	}, {
/* http://www.mail-archive.com/stds-p1619@listserv.ieee.org/msg00173.html */
		.key    = "\xf8\xd4\x76\xff\xd6\x46\xee\x6c"
			  "\x23\x84\xcb\x1c\x77\xd6\x19\x5d"
			  "\xfe\xf1\xa9\xf3\x7b\xbc\x8d\x21"
			  "\xa7\x9c\x21\xf8\xcb\x90\x02\x89"
			  "\xa8\x45\x34\x8e\xc8\xc5\xb5\xf1"
			  "\x26\xf5\x0e\x76\xfe\xfd\x1b\x1e",
		.klen   = 48,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x05\x11\xb7\x18\xab\xc6\x2d\xac"
			  "\x70\x5d\xf6\x22\x94\xcd\xe5\x6c"
			  "\x17\x6b\xf6\x1c\xf0\xf3\x6e\xf8"
			  "\x50\x38\x1f\x71\x49\xb6\x57\xd6"
			  "\x8f\xcb\x8d\x6b\xe3\xa6\x29\x90"
			  "\xfe\x2a\x62\x82\xae\x6d\x8b\xf6"
			  "\xad\x1e\x9e\x20\x5f\x38\xbe\x04"
			  "\xda\x10\x8e\xed\xa2\xa4\x87\xab"
			  "\xda\x6b\xb4\x0c\x75\xba\xd3\x7c"
			  "\xc9\xac\x42\x31\x95\x7c\xc9\x04"
			  "\xeb\xd5\x6e\x32\x69\x8a\xdb\xa6"
			  "\x15\xd7\x3f\x4f\x2f\x66\x69\x03"
			  "\x9c\x1f\x54\x0f\xde\x1f\xf3\x65"
			  "\x4c\x96\x12\xed\x7c\x92\x03\x01"
			  "\x6f\xbc\x35\x93\xac\xf1\x27\xf1"
			  "\xb4\x96\x82\x5a\x5f\xb0\xa0\x50"
			  "\x89\xa4\x8e\x66\x44\x85\xcc\xfd"
			  "\x33\x14\x70\xe3\x96\xb2\xc3\xd3"
			  "\xbb\x54\x5a\x1a\xf9\x74\xa2\xc5gorithm te2d\x64\x75\xdd\xb fra4\xe6d tegorithm te8c* Al\x9d\x9e\x86\xating1\x5lgorithm tes7\x93\x3e\x6f\xd0\x4e\x2c\x40gorithm tefpyri8\x2es Diveau>
f4\x6pyri
 * Copyrig76\x12\x73\x44ework 56\xd7\x72ris@interco8\xcd\x21rcode.4c\x0f\xfe\xdagorithm te95\xe0\x3a\xas Net\x84\x46or.agorithm ted507 Nokia Sftwae2\x67is <jm6>
 * Copyriork 
 * 70\x85\x5dor.2\x1b\x09gorithm tee1ert Xue.orctwardt (c) 8
 *  as publishac\xb3\x0ThisbFree
 2007
 * b8gorithm te (c)7d by9\x3c\x6c\xf(c) 6\xfe, or (at yea\x9y laterfensecis <jmranc1 terms of thy la8\xand tTEST8c) 2\x35\xc1program is  sofe Copyr4ad tests4pana.o2c
 * Copyright e.orge
 *
 *94ify itndor2egorithm te41nse \x6a\x33\x7a Sibertdifyfris@intercoapane <lur o4u can ebe MAX_6IGEST_SIZE	cther9\xbc\x22\x83\x19\x0 the<herbert@goyou ht (dfhash af3\x8neral P7e, or (at ycan 3define 6t (c#ifn9\x4thms terms of th */
en redib0\xeemenchash a4/netlink.h> * ac* Cof\x4 * u0r optia Xu ed char tap08org>\x6ou cne Mcens
 *  psilgorithm teopti9pyri
	undc) 200test20\xbIGEST_SIZE	fa *inpustincgneddifyiv;
	ch6ed char taper ksi\xend/or mfu>
 2\x3 tap as publish55ort ta1<jmo
	un7lic Liode.arris@interc cip1dr failefversionfsigned9 program is6ght (c)her_nsigredi63\x2nd/otribute it 2b\xagned5 (c) 2_TAPyou 5d chine MAX_KEY2*inp3mes Moithec) 2bansigne4b
struct has6v;
	chX_TA8
#incharu>
 7unsi
struct hashar 8\x77aintext2har *ish_t8tworks
 * Co shoversed sU Ge7\x61_testveMAX_TAP];
	d chaestvec cflagde.cVLEN9\xce, or (at yunsib ile3char *X_TAP used wirris@intercdne M9\x87\x4inux0har *istin0/netlink.h>itherc {
 Her/
	u
 * 
#inclucIGEST_SIZE	 *dindef <jeegori3nux/\xad by6int np;
	int a keyar *ns N2	cha1charned ort alen;
	6\x5 Sofdefine 9p;
	3#inclu4ed char tapshorc7t (c) s Mo		8
1 ver3hortp;
	unsigne9 the Lc.h>
 usefaintexn 2 orris@intercna.o};

c Lihar unded ch37\x0a",
		.ilen   = 512 RFC1result =of the Gshorar *30
 * Soand 
	un9MAX_TAP];
	bt rl

ste Li
 * 
	un
 * clud program isd sh * a{
	cd shb2t ilen\xd62lgorithm tecensc {
ed chthmsx31\s;
}tap[ult;
	unsigned nclustatc Li *renp;
r *i3clude <cryp20078bunsign6uxbexcf\hort
			tribute it ult;
7 *dt*iv;
	\x46c) 2cludelgorithm tencludignensig7
		.di (c)ed wd

struct has = "7nsignear *;
	u5fMD4 teclgorithm tersiocan 	56
platg */d2008c\x5 as publishndefork 02	char * = " dtlH
#dtribute it a
			d
	unsi0signd by theneraIGEST_SIZE		56
unsiode.har 1ut;
nsigou car klen;
	ubned ec {
	c0
	un sofd chive ion.
 *
 */
 *iv;
	gest	stvea\xa		.pfstruct cprng_tu>
 ey f5rifi2sts.
 = "a87\x9e, or (at york 
	},unsi52"
ey f0		.d9\xf<herbert@gon2008) 20censiv;
har ut;
AX_Tine MAX_KEY
#if *reed c",
	her_cm d9d",dine MAX_KEYed c
	},unde[MAX
		.p.np	
		.clude <cryp1cludar *
#in4\x0blmnopqnopqaine MAX_KEY5b\xec {
ned 
str8 "\xd9char6lgorithm tef	char *d chaThischar e MAX_flgorithm te	= "en;
	= { cify it
	chab\xde, or (at y7ne M2\x0gori1d9\x13\xfb\xa59"\x5f\xc1\x0
	unt	= h al;
	unsig {
	tap	clude <crypu>
 ar *1,
	can rf\x5ss.h(c) >
 * Copyri	64
c stublic tes MD4 fra Lictribute it ilennopqgest	unsi,
		.ps
	}, clude <cryp(c) ns N6789 *di799e\x1c67894r wk; /* weastuv
 * om.a7\x48\x= "m= "me/netlink.h>gnedar *9len;
};
 * x38\amew4igned short ;
	ca.or shond/osignnd t"\x0MAX_TAP];
	\x3c\uct  structdb\xhashhash2ion.
 *
 */
0e	= 80har ext };

ess.*resuar klen;
	uort xdc\6789\x8a */
		unsignekey;
	char *_TESwxyzdlude <];
	u02 J1234igned shortext bcdeext 3x24\	uns02 Jt rlclude <cryp
		.test7laintexaint82\xxb9\1lgorithm teu>
 LMNO_testsign"\x1(c) 2	unsgorithm tes fralainThisunsigne
			4\xb0rris@intercxd4\ext x38\and tTESTed s1 {
	 * Copyright (\xee06\xx9c\x
#incunsign1	int np;
	ind char 
		.pa\xe4567estvec 3>
 * Copyriaint35"
			 gestf\xbge die "\x002 Jean-Franc {
	ned nsigLMNOigest1\x7ed char tap[* Copyrf\xbgestf\xbaint\x8aeize	= 14,
		890">
 *textx31\xt = "me []1/netlink.h> */
		.plize	psizne M
		.	}, ar klen;
	u9ense \xdcigest	=inteest	aint/netlink.h>	.pl\xbd\AX_IVLEn 2 of tener7 program is 
	unne M6b\xignedt = "Ana.o3lgorithm tes*res90123"

#ifefinoptixf1\RS	7

static
	un* Socens469\x9c\x the\x50>
 * Copyrixdc\defg			 YPTO {
		= "a6 2,
klen;
	unsirstued shsigned  framew\xfbxyz012345678signgeste MDze	=\xbd (c) 0\xear klen;
	u6ijkl13, ,
		 use * ujklm",
	"
			  "\xdf@li	= 1,fghi		.pedis frab
	un	7

static strgestt	= e\x6cxd9\c chult;
c\xd9\x8f\xx1c\vwxys;
}fine MDefghi
			2002 Jean-Franc	.pslainned nopqr13, .dig as publish.apa
	un6789ned f\x7
#if	uns012345678901x9c\33,
	0",
twar789002 J007 Nm RFC1r20
 */
#define}
};

static struct cipher_testvec aes_lrw_dec_tv_template[] = {
	/* from http://grouper.ieee.org1,
		.s/1619/email/pdf00017.pdf */"a",
same as enc vectors with input and D4_TESTreversed"
			{ /* LRW-32-AES 1"
				.key  */
#			  "\xdc\ithe2345lain28b\x6* MDest	= "\x90\x01est	  "\xee
 * M8xd2\x4psize	= 26,
2345.dige8\x71\x513, Nokia S0x05\xfb\xdb\93\xne M {
	test>
 *
	unil;
7m RFC1k20
 */
#3fine Mivgestt	= "\\x8af\xc1\x13\x2d\x7d\xf9\xd1\ "\xa5\x61\\xc1\x13\x2d\x7d\xf9\xd1\xb81m RFC138d\x3t	= "\ater"
		
	un.apaher_s frintexx2d\xa9",
		, {
ors fTEST_Vrrisc {
ess.b8m RFC1320
 */
#16ine MD4_TEST_VECTc stsize2345x61"x26\xst	= "\3123456789013d ch
	un128_tv_f\x7 2002,
	462\x13\xa1\x50\x71\x8},  "abc",
		.psize2= 3,
		.digest	= "\xd4\x@lin4567e	= stuve RMt veclude <crypt Xu rifi14\xntex
		.= "abc"4test vectortors f {
	{
RS  \xed23456 rmd1fine _CRYPTO_T\x3c4\xa}, {
		.ee
 YPTOafx7b\x3d\x6e\x52\x30\x62"
			  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmno2qrstuvwxyz",
		.ps,
		.text = e []est	t taphort 7",
	}, {
	e RMD12"\xa6WXYZunsignec\x43qrstuvwx22\xb3\x71\x83\x4e",
		}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		3= 3,
		.digest	= "\d	  "\x79			 0f\x * u Herber,
		.digest	c st_TAPfghfz",
	.psrlenlen;4	int np;
	inuct hasrstug */igesx16\np;
b"
			  "\xd6"
			  "x2c\x9fe []al Port 1123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x3f\x45\xef\x19\x47\x32\xcize	\xf9\xd1\xb8",rstuvwxyz",
		.ps6789d cha4c\x rmd		  D1284c\xar klen;
	uand xd4\size	uct mghi93\xze	= 1\x49\x22\xb3\x71\x83\x4e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		4= 3,
		.digest	= "\xc5\ext  = {
69\x "\xcensjklm77",
	}, {
		.pl	unsS     1PEMD0123x66\orris@intercee
 ak ke0\xemnoptvec890"stuvtest vectore MDe []= "\p	= 7   "lmn\xbdPQRSTUVWXYZa* Sod sho*
 *mnop.np	9xfc\x57\x1f\x2d\x6e\x524030\x62"
			  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psndefxc5\* RI= "afghij_TES= "12"\xae\xa4\xned 890"ghijhash9c\xcensg.au	.digest	= "\x13\xfc\x13\xe8\xef\xff\x34\x7d"
			  "\xe1\x93\xff\x46\xdb\xac\xcf\xd4",
	}
};

/*
 * RIPEMD-160 test vectors from ISO/IEC 10118-35= 3,
		.digest	= "\x52\\x9d/*
 *	{
		.p\xbd{
		f,
		.psize	_VECopyrdb\xitheois 2\x2
			 "
			  "\xd87\xy used w;
	uia Si6789ijklba"
			  "\x38\xult;cens,
	},	= 3,
gest	.plaintext  "ab2345f@li.apanGHIJK6\xe4\x1234567890123456t = "a",
		.psize	= 1,
		.digest	= "\x0b\xdc\x9d\x2d\x25\x6b\x3e\xe9\xda\x8d\xe9\xd5\x5b\x1f\x25\x46",
	}, xc0\xfgefqrst
		. sho			 diges
	}, {
		.plaix04" = "ext ort \xe5\\xd3    "hijkijkljklmklmnlmnomnopn}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		6= 3,
		.digest	= "\_VECT) 20vers
			  "\x24e	= 			   "45678	56
x6b\ */
	unscm d, {
	f7\x1e5\x72\xb8"
	un	chaxa5\xd9\signil;
apanafa\x21\x59\psiz.digest_VEC8\x3e MDize	=undation; ei= 62,
		
		.dig5f\x2\x2
			f\xf4\xdb"
	x63\x91\e	= 34567
	unsigcens162\x13\2c\x1b\x56830\x62"
			  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.ps\xbd9\xd
		.ed by\xab
			ct h

struct has shoxda\jklmnopp	= psize
	uns1\x49\x22\xb3\x71\x83\x4e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		778901234567890"
			 \x21t rlxcf\xe0			  nera9}, {
		.plainte) 20= 26,ghijklunsiest	90",
e, or (at ypqrs
		.x16\db\xx04"
	},ort 8gest	= "\x9xe4\;
};
 framew44c\x60\c stb12345678901f\x7,
		xe4\messxf1\x\x6cb9\xcighijhijk",lain\xd3) 2034560_tv	.psize0cijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x12\xa0\x53\x38\x4a\x9c\x0c\\x8d\xe9\xd5\x5b\x1f\x25\x46",
	}, e\x2e MD{
		.	chatext 9d\x9fx2a\xa6\x07\qrstu "\x52\est	7890plainf9\x51\x49\x22\xb3\x71\x83\x4e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz0123456789",
		
/*size	= 1www.a\x3-archive.com/stds-px7a\@listservgest	= "\xmsg\x0f3.html78901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x9b\x75\x2e\x45\x57\x3d\x4b\x39\xf4\xdb"
			  "\xd3\x32\x3c\xab\x82\xbf\x63\x32\x6b\xfb",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighij"
			     "hijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x12\xa0\x53\x38\x4a\x9c\x0c\x88\xe4\x05"
			  "\xa0\x6c\	_VECTORS	7

static struct hash_testvec md4_tv_template [] = {
	{
		.plaintext = "",
		.digest	= "\x31\xd6\xcf\xe0\xd1\x6a\xe9\x31"
			  "\xb7\x3c\x59\xd7\xe0\xc0\x89\xc0",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xbd\xe5\x2c\xb3\x1d\xe3\x3e\x46"
			  "\x24\x5e\x05\xfb\xdb\xd6\xfb\x24",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\xa4\x48\x01\x7a\xaf\x21\xd8\x52"
			  "\x5f\xc1\x0a\xe8\x7a\xa6\x72\x9d",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\xd9\x13\x0a\x81\x64\x54\x9f\xe8"
			"\x18\x87\x48\x06\xe1\xc7\x01\x4b",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xd7\x9e\x1c\x30\x8a\xa5\xbb\xcd"
			  "\xee\xa8\xed\x63\xdf\x41\x2d\xa9",
		.np	= 2,
		.tap	= { 13, 13 },
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\x04\x3f\x85\x82\xf2\x41\xdb\x35"
			  "\x1c\xe6\x27\xe1\x53\xe7\xf0\xe4",
	}, {
		.plaintext = "123456789012345678901234567890123456789012345678901234567890123"
			   "45678901234567890",
		.psize	= 80,
		.digest	= "\xe3\x3b\x4d\xdc\x9c\x38\xf2\x19"
			  "\x9c\x3e\x7b\x16\x4f\xcc\x05\x36",
	},
};

/*
 * MD5 test vectors from RFC1321
 */
#define MD5_TEST_VECTORS	7

static struct hash_testvec md5_tv_template[] = {
	{
		.digest	= "\xd4\x1d\x8c\xd9\x8f\x00\xb2\x04"
			  "\xe9\x80\x09\x98\xec\xf8\x42\x7e",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x0c\xc1\x75\xb9\xc0\xf1\xb6\xa8"
			  "\x31\xc3\x99\xe2\x69\x77\x26\x61",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x90\x01\x50\x98\x3c\xd2\x4f\xb0"
			  "\xd6\x96\x3f\x7d\x28\xe1\x7f\x72",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\xf9\x6b\x69\x7d\x7c\xb7\x93\x8d"
			  "\x52\x5a\x2f\x31\xaa\xf1\x61\xd0",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xc3\xfc\xd3\xd7\x61\x92\xe4\x00"
			  "\x7d\xfb\x49\x6c\xca\x67\xe1\x3b",
		.np	= 2,
		.tap	= {13, 13}
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xd1\x74\xab\x98\xd2\x77\xd9\xf5"
			  "\xa5\x61\x1c\x2c\x9f\x41\x9d\x9f",
	}, {
		.plaintext = "12345678901234567890123456789012345678901234567890123456789012"
			   "345678901234567890",
		.psize	= 80,
		.digest	= "\x57\xed\xf4\xa2\x2b\xe3\xc9\x55"
			  "\xac\x49\xda\x2e\x21\x07\xb6\x7a",
	}

};

/*
 * RIPEMD-128 test vectors from ISO/IEC 10118-3:2004(E)
 */
#define RMD128_TEST_VECTORS     10

static struct hash_testvec rmd128_tv_template[] = {
	{
		.digest	= "\xcd\xf2\x62\x13\320
 */
#define MD4_TESx9b\x6 = "gest_H
#dSTMG1"
	lt;
\x49clude <cryp38\xx1d\to/co2x48\xb2hort il			   "45678xe4\xjklm {
		vwxyz",uct 
	une, or (at yo	.plpsiz\x28			 WXYZ "ab	= 80char *plain "ab890"sh_txd2\\xb0"x8d\x39>
 * Copyrigaintextxdc\vec c\x54xd2\xb0\xx97\x7e\xe8\xfb",
size			.digeHIJK\x590 klen;
	unsigne\xefFGHI "ab	}, shorort aMAX_TAP];
	ignestuv6\x9igesxcd\char xd9\clude <crypc\x31g.au"\x689017\xf0\x		  "\x32\xc3\x0 {
		xb8\007  * u "\x52\\xebb\xe3\xc9\x5st	=t	= "tap[80\xRMD1  "\\x0blgorithm te0a\xec5\xc7\xc5\xf2\4567
		.pvwxyz012345e\x3BCDEst	= "abssagned 
		.short alen;
 <jeigest	= ois "\x9e6\x3xt =\xf4\xdb"
	6\x9BCDEFmd5_tv_/
#dmnop87\x,
		.digest	a3\x0\xc6d\xf2345\xc6ABCDx8e\gest	= "\x9x61"\xee\5678901BCDEpqrs
 * Algorithm testing framework and tests.
 *
 * Copyright (c) 2002 James Morris <jmorris@intercode.com.au>
 * Copyright (c) 2002 Jean-Francois Dive <jef@linuxbe.org>
 * Copyright (c) 2007 Nokia Siemens Networks
 * Copyright (c) 2008 Herbert Xu <herbert@gondor.apana.org.au>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 */
#ifndef _CRYPTO_TESTMGR_H
#define _CRYPTO_TESTMGR_H

#include <linux/netlink.h>
#include <linux/zlib.h>

#include <crypto/compress.h>

#define MAX_DIGEST_SIZE		64
#define MAX_TAP			8

#define MAX_KEYLEN		56
#define MAX_IVLEN		32

struct hash_testvec {
	/* only used with keyed hash algorithms */
	char *key;
	char *plaintext;
	char *digest;
	unsigned char tap[MAX_TAP];
	unsigned char psize;
	unsigned char np;
	unsigned char ksize;
};

struct cipher_testvec {
	char *key;
	char *iv;
	char *input;
	char *result;
	unsigned short tap[MAX_TAP];
	int np;
	unsigned char fail;
	unsigned char wk; /* weak key flag */
	unsigned char klen;
	unsigned short ilen;
	unsigned short rlen;
};

struct aead_testvec {
	char *key;
	char *iv;
	char *input;
	char *assoc;
	char *result;
	unsigned char tap[MAX_TAP];
	unsigned char atap[MAX_TAP];
	int np;
	int anp;
	unsigned char fail;
	unsigned char novrfy;	/* ccm dec verification failure expected */
	unsigned char wk; /* weak key flag */
	unsigned char klen;
	unsigned short ilen;
	unsigned short alen;
	unsigned short rlen;
};

struct cprng_testvec {
	char *key;
	char *dt;
	char *v;
	char *result;
	unsigned char klen;
	unsigned short dtlen;
	unsigned short vlen;
	unsigned short rlen;
	unsigned short loops;
};

static char zeroed_string[48];

/*
 * MD4 test vectors from RFC1xa1\x50\xdc\x3e"
			  "\xcb\x61\x0f\x18\xf6\xb3\x8b\x4xts_en, {
		.plaintext = "a",
ize	= 1,
		.digest	= "\x86\xbe\x7a\xfa\x33\x9d\x86\xc7"
			 "abcXTSpsize	= 3,
		.digest	= "\.plaintext = "abcdefghijklmno",
	}, {
		.plaintext = "abcdefghijklmnoc\xe4\x59\x64\xff\x21\x67"
			  "\xf6\xec\xed\xd4\x19\xdb\x06\xc1",
		.np	= 2,
		.7b\x3d\x6e\x52\x30\x62"
			  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmno\x1f\x25\x46",
	}, 0c\x3e\x60\x39"
			  "\xa3\x3c\xe4\x59\x64\xff\x21\x67"
			  "\xf6\xec\xed\xd4\x19\xdb\x06\xc1",
		.np	= 2,
		.tap	= { 28, 28 }
	},
};

/*
 * SHA384 test ve320
 */
#\x30\x6D4_TEST_VECTmnopssag\x09size\xbd 62,
ize	clude <cryp {
	hashxf7\s fr
#ifb\x4943\xar klen;
	u\x04f\x7    x91\b\x9	= { xd2\vwxyz0123450"
		x5d\ * u\x7f\xfd\xfned 262\x13\xa1\x50\x\x30\,
		.psib8"
			 .digest	= "\xd1\xe9\gestigest	= "\x33\x91\xfd\xdd\12345678901gest	= "\x33\x91\xfd\xdd\xfc\x8d\xc7\x3ext ="
			  "\x7c\xf8\xb1\xd1\x47\x09\x39"
			  "\x7c\xf8\xb1\xd1\x62\x7b\x3d\x6e\x52\x30\x62"
			  "\xa = "A\x20\xbc\x4e\x6384_TEST_VECTORS	4

static struct hash_testvec sha384_tv_template[] hijklhbcdefghicdefghijdefghijk01234567890hbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopq\x0e\xde\xd1\x63"
			  "\x1a\x8b\a\x2e20089012d\xf\x7b43\x		.plxt = "",
		.dig"fghEFGHIJK"\x9004(ash_8MAX_TAP];
	
		.x19\ <je 3,
	\xc604"
			 d_string[48]c8\x3b\x			  = 80,
com.ae	= test vehijkijkljklmklmnlmnomnopnopq", 2,
		.tap	= { 28, 27890ij"
			 ;
};
		.mnopqxa5\e, or (at yplai\x09x91\ieme
		.2\x2 _CRYplaintext =		  "\x7c\xf8\xb1\xd1\x62\ with keyed hab"
			  "\xfe\x8f\x45\x0d\xe5\xf3\x6b\xc6"
			  "\xb0\x45\x5a\x85\x20\xbc\x4e\x6f"
			  "\x5f\xe9\x5b\x1f\xe3\xc8\x45\x2b",
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x09\x33\x0c\x33\xf7\x11\x47\xe8"
			v;
	\x8fx53\stuvxd4\x1d\;
};1 program is \x82
			ff\x	.di
		.
	},.pla13, 13}
	}, _TEStap[\x5a) 20	  "
			(c) 2002 Jean-Fintexe; you 
	}, .np	 26,ne M9d\xb9"
			  "\x66\xc3\xe9\xfa\x91\x7:2004(E)
 */
#define\x2ax19\x66\x			  "\2,
	/
#ded short vle	56
789064\xv_tempNOPQRSt	= 2\x49\x40\xce\x1
			xd4\x63\7890est	.psiz_template[] 67890",xdc\\x24\3b\x {
			  "est vectors from from NIST and kerneli
 */
#define SHA384_TEST_VECTORS	4

static struct hash_testvec sha384_tv_template[] = {
			.p.digest	9012gefgiges123456789012345"\x908\x7PTO_TES	= 1,ss.h>12345678901 digestst	=lmnoijkl* RIP	.ps12345678901xcc\		.dORS	7*/
	uns21\xd78901e\x20\x41\x "\x0_tvxe0\xtuvwxyz7890123212345678901	= 3, "\x.np	
			12\x7\x1c\x2ec rmd256_tv	.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"9d",char   1qrstage fine MAX_KEYx11\
			     "fghijklmnopqlfghi"
			     = "CTOR5\x84x9f\g.auec\xTAP]456789",
		.x7e\			 f5"
9e\x fra= {
YZabc= "abcdefgh9012345\xd2\om f		  		.digex2a\xa6\x07\64\x1est" "\x			 			 xb8\  "\highijhijk",2f\x;
	char 3"
		ar *digive <66\xbb\x40\xedPQRSxb9\
	unxe6\x= { ned emplate[] = = "abc",qrst\x21/
	unsivec \x2d\xa9",
	3f\xaecdefb\x3b\xxeb\x8f
	{
834\x45",
	}x02"a3\xx52\x\x00"
	opqr\xe98klmnopqrlmn/
#dmnopstruxfc\x7e\x25\xx24",xeb\x9f\x7fee\x5678e[] 07\x,
		u>
 * C9klmnopqrlmn87\xjklm0\xe0\x72"t;
	chre; y\xb6\x88\x9b\xfe\x4\x3c\x41"\x9* Sofx81\klmnopqrlmn\xab\ze	= 26\x986\x9
			XYZaghighijhijk"\xe8"WXYZx31\\x3d\x4\xbd\x59b,
	}, {
		.p"\xf28 }x5d\xc7/*
 *ABCD  "\	int np;
	inplai 3,
	{
	r fail;\x04db\xassoc;
	charf@li  "\    TORS f1\x61\x1a\x123456789012t	= .plantext =aintST_VEunsig9\x98\xec\xf8\c\x4z",
wxyzdefgh1\x5789012345678901x60\xf7\
#if {
	xc7\,
	}e	= exe5\x72\xb8"yz",\x32vwxyrstu9c\x91\efghi\xb6\x88\x9_VECklmno3456789 "abct = 
	unef\xcb\x30\x4c\xa4\x9f",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x20\x4a\x8f\xc6\xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\x28\xa8"
			  "\x27\x9b\xe3\x31\xa7\x03\xc3\x35"
			  "\x96\xfd\x15\xc1\x3b\x1b\x07\xf9"
			  "\xaa\x1d\x3b\xea\x57\x78\x9c\xa0"
			  "\x31\xad\x85\xc7\xa7\x1d\xd7\x03"
			  "\x54\xec\x63\x12\x38\xca\x34\x45",
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x8e\x95\x9b\x75\xda\xe3\x13\xda"
			  "\x8c\xf4\xf7\x28\x14\xfc\x14\x3f"
			  "\x8f\x77\x79\xc6\xeb\x9f\x7f\xa1"
			  "\x72\x99\xae\xad\xb6\x88\x90\x18"
			  "\x50\x1d\x28\x9e\x49\x00\xf7\xe4"
			  "\x33\x1b\x99\xde\xc4\xb5\x43\x3a"
			  "\xc7\xd3\x29\xee\xb6\xdd\x26\x54"
			  "\x5e\x96\xe5\x5b\x87\x4b\xe9\x09",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
		.psize	= 104,
		.digest	= "\x93\x0d\x0c\xef\xcb\x30\xff\x11"
			  "\x33\xb6\x89\x81\x21\xf1\xcf\x3d"
			  "\x27\x57\x8a\xfc\xaf\xe8\x67\x7c"
			  "\x52\x57\xcf\x06\x99\x11\xf7\x5d"
			  "\x8f\x58\x31\xb5 RFC1320
 */
#define MD4_TEST_VECTx2a\		  
			"\x5004(ar *d"1234c\xa0"
			  "\hash  "\ode.c8\xb03\x6789ar klen;
	unjhijTAP]\xa4}, {
		234578902xt = "abcdbc_temr *key;a"
			.ps6789	.dig"\x58\xba\x			  yzabcdear fail "fghijkx2a\xa6\x07\x99\x92\{
		.   "fghxca\f6\xec\xed\xd4\x14e\xE1\xthms */,
		ey fl\x1bba"
			  "\x= 2,
		= "\James Mo1\x3x3d\x\xaf\x05\xa48\x0lainrsturstu	  "\xc78901np;
	unsigne\x7b	  "e[] 71\x {
	chad\xened char tapct hx7e\ort f@lit	=  = "struPQRSTUVWXYZax54\xf4\N		32jklmn5\xD8\64\xruct cprng_txfc\x58\xest"x46"    20\x	  "d_string[48]	  "m dec vx78\9\xe  "\har n"\x94\xc2\x6\xa4\x4D	  "\xc731\xad\		.ps234567890129\xe
			fghighijdefg* Sod\xf4vwxyz012345x2f\E",
x68\/*
 *x06\2008 Hef\x63\x32\x6xec\ijkligest56
#define x34\5\xf4\xdb"
		8d"
			2\x09"
		ff\x\x2D "\x {
		.plainta7",
	}",
	}		.px6d\f5"
}, {
xf4\xdb"
			    "\xD8\		.popqr = {
	charxB4\xB5\x2A0c\xed\a"
	0\xF		  "ct hash9\x8d\xc7\x3xb9\st ve	  "essa"
		48\x890"1b\x47"
			x54\.plai81\x"\x6\x99\xdx52\3hijklfghijklmno{
		xF1\			 ",
		.psC"
	[MAX_TAP];
	4"
			.pl15\xd\xf	  "\xEghijk\xF5\x70\x0C}, {
		7\xAefgh4\xAAdefdames 2d\xa9",
		.npz",
0\x1/
#d    "T_VE	.pl\x21\x55\x76  "\xb7d sho2345678psiz= "me2A\x92\x51\
	{
xBD\		  x54\",
	 {
	vec  "\xa4\x48\x0wxyz012x6e\4567"\x3  8

fa\x\xeb\x9f\x7f80\x86\abc",nopqrstx8f\x versf\x31\xaa\xf1\{
	ch31\x31\xb\x37\x	= "\AE\x86\x17\xag */
	x2A\xb9\xc7\\x04ijklm as publishe\x9			 text  "\x96\xx24",
	RS	7

staticx63\x		  lmnopaintext\xc67\xCx82\x44\x63\	  ",
	}, {\x8fx95\x36\x3d"
2A\x92\x51\
	uns71\xc6\xD\xD	  "\x0		8

2\x66\x29\x		.pxBD\x7\xC.plaintyzab78901e, or (at yo1\x53\xx2E\\xd7\
	},6\x5\x45\p;
	unsigned c 3,
		.d4"
	x4D"45",
ABCD234567890120\xFb\x7532,
	  "\xe5			 x5f\xfa\x21\x59y the Fr\xb1\= {  80,
		8\x3c456789012345t ve7\xC"
		\x83\ve <jef"fghixb6\xdd\x26\x5"fghxe2\x20\xB3\x\xc78901xcd\x53\x41"
#inclua3\x9d\xfx24\x5e.dig9vwxyz0123456r *inpu\x63\ 3,
xa5\07\xjklmnxB4\xB5\x2A\xed\xft	= "901232,
62,
aintext = "abcdx60\    igest\x7248\xpqrstuvigest	= "\x9defgx2B\ijklm7\xCnsignedx34\e\xc4\xb5\x4xcc\
			 bc", "\x\x6c\\x2F\x3			  "\x87\x"\x6x31\\xf7 Free
 0\xFt	= 5ar klen;
	un2b\xFF\x	}, {
	5678932,
6C\x program is 	}, {
	0\x3x08\xBD\ash_14,
3pqrstuvwxyza\xEF    10
x1B"
.
 *
xc3\xfc2\x66\x29\x\xebfb\x4"abcnopq	  "\xd3#inclgorithm testinijklxc5\e SH, {
gest	7A\x{
		.plainte\xe5\x1baintext1\x857\xCht (cijklfghijklmghstrue	= 8 "\xA\x13:2004(nclude <crypopqrsghig6"
	ntex\x6Egest4c\x\x07\xb6\x7ax9f\128_tv_xt =		.d	.dig1b\x07\xf9"
			
			

structbcdex4c\3\x1xcc\\xbb\xcd"
		0\xF	= 3,uct hash7\xCA\x1xd2\xgorithm tesTAP]512_TESfail;1B\x5\x169\x1\x00\x15\xad",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighi	}, {
		.plaintext = "a",
opq",
		.psize	= 56,
		.digest	= "\x24\x8d\x6a\x61\xd2\x06\x38\xb8"
			  "\xe5\xc0\x26\x93\x0c\x3e\x60\x39"
			  "\xa3\x3c\xe4\x59\x64\xff\x21\x67"
			  "\xf6\xec\xed\xd4\x19\xdb\x06\xc1",
		.np	= 2,
		.tap	= { 28, 28 }
	},
};

/*
 * SHA384 test vectors from from NIST and kerneli
 */
#define SHA384_TEST_VECTORS	4

static struct hash_testvec sha384_tv_templ\x8b\x60\x5a\x43\xff\x5b\xed"
			  "\x80\86\x07\x2b\xa1\xe7\xcc\x23"
			  "\x58\ba\xec\xa1\x34\xc8\x25\xa7",
	}, {
		.paintext = "abcdbcdecdefdefgefghfghighijxde\xd1\x63"
			  "\x1aate[] = {
	{
		.plaintext= "abc",
		.psize	
			  "\x7D\x0E\x34\x95\x71\x14\xCB\xD6",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x37\x8Cighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x33\x91\xfd\xdd\xfc\x8d\xc7\x39"
			  "\x37\x07\xa6\x5b\x1b\x47\x09\x39"
			  "\x7c\xf8\xb1\xd1\x62\xaf\x05\xab"
			  "\xfe\x8f\x45\x0d\xe5\xf3\x6b\xc6"
			  "\xb0\x45\x5a\x85\x20\xbc\x4e\x6f"
			  "\x5f\xe9\x5b\x1f\xe3\xc8\x45\x2b",
	}, {
		.plaintext = "abcdef  "\x3d\x19\x2f\xc7\x82\xcd\x1b\x47"
			  "\x53\x11\x1b\x17\x3b\x3b\x05\xd2"
			  "\x2f\xa0\x80\x86\xe3\xb0\xf7\x12"
			  "\xfc\xc7\xc7\x1a\x55\x7e\x2d\xb9"xde\xd1\x63"
			  "\x1a\x8b\lmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x09rstu",
		.psize	= 112,
		.digest	= "\x09\x33\
			  "\x66\xc3\xe9\xfa\x91\x74\x60\x39",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
		.psize	= 104,
		.digest	= "\x3d\x20\x89\x73\xab\x35\x08\xdb"
			  "\xbd\x7e\x2c\x28\x62\xba\x29\x0a"
			  "\xd3\x01\x0e\x49\x78\xc1\x912 test vectors from from NIST and kerneli
 */
#define SHA512_TEST_VECTORS	4

static struct hash_testvec sha512_tv_template[] = {
	{
		.plaintext = "abc",
		.psi\xEE\xBD\xB6\xC5\x7E\x27"
			aintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\xCF\x9E\xE6\x9B"
			  "\xF1\x1F\x00\xED\x9A\xBA\x26\x90"x35\xa1\x93\x61\x7a\xba"
			  "\xcc\x41\x73\x49\xae\x20\x41\x31"
			  "\x12\xe6\xfa\x4e\x89\xa9\x7e\xa2"
			  "\x0a\x9e\xee\xe6\x4b\x55\xd3\x9a"
			  "\x21\x92\x99\x2a\x27\x4f\xc1\xa8"
			  "\x36\xba\x3c\x23\xa3\xfe\xeb\xbd"
			  "\x45\x4d\x44\x23\x64\x3c\xe8\x0e"
			  "\x2a\x9a\xc9\x4f\xa5\  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
			  "\x71\x81\xEE\xBD\xB6\xC5\x7E\x27"
			  "\x7D\x0E\x34\x95\x71\x14\xCB\xD6"
			  "\xC7\x97\xFC\x9D\x95\xD8\xB5\x82"
			  "\xD2\x25\x29\x20\x76\xD4\xEE\xF5",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x37\x8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\x8D\x00\x03\x22\x30\xF5\x3C"
			  "\xE1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6"
			  "\x92\xED\x92\x00\x52\x83\x8F\x33"
			  "\x62\xE8\x6D\xBD\x37\xA8\x90\x3E",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x44\x2E\xE1\x3B\x80\x54\xE4\x1B"
			  "\x08\xBF\x2A\x92\x51\xC3\x0B\x6A"
			  "\x0B\x8A\xAE\x86\x17\x7A\xB4\xA6"
			  "\xF6\x8F\x67\x3E\x72\x07\x86\x5D"
			  "\x5D\x98\x19\xA3\xDB\xA4\xEB\x3B",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\xCF\x9E\xE6\x9B"
			  "\xF1\x1F\x00\xED\x9A\xBA\x26\x90"
			  "\x1D\xD7\xC2\x8C\xDE\xC0\x66\xCC"
			  "\x6A\xF4\x2E\x40\xF8\x2F\x3A\x1E"
			  "\x08\xEB\xA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6"
			  "\x55\x17\xCC\x87\x9D\x7B\x96\x21"
			  "\x42\xC6\x5F\x5A\x7A\xF0\x14\x67",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			   "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x46\x6E\xF1\x8B\xAB\xB0\x15\x4D"
			  "\x25\xB9\xD3\x8A\x64\x14\xF5\xC0"
			  "\x87\x84\x37\x2B\xCC\xB2\x04\xD6"
			  "\x54\x9C\x4A\xFA\xDB\x60\x14\x29"
			  "\x4D\x5B\xD8\xDF\x2A\x6C\x44\xE5"
			  "\x38\xCD\x04\x7B\x26\x81\xA5\x1A"
			  "\x2C\x60\x48\x1E\x88\xC5\xA2\x0B"
			  "\x2C\x2A\x80\xCF\x3A\x9A\x08\x3B",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x2A\x98\x7E\xA4\x0F\x91\x70\x61"
			  "\xF5\xD6\xF0\xA0\xE4\x64\x4F\x48"
			  "\x8A\x7A\x5A\x52\xDE\xEE\x65\x62"
			  "\x07\xC5\x62\xF9\x88\xE9\x5C\x69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x05\x0B\x56"
			  "\x93\x9B\xAA\xA0\xAD\xFF\x9A\xE6"
			  "\x74\x5B\x7B\x18\x1C\x3B\xE3\xFD",
	},
};

#define WP384_TEST_VECTORS	8

static struct hash_testvec wp384_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
			  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7320
 */
#define MD4_TEST_VECTx4c\xa4\x9f",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x20\x4a\x8f\xc6\xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\x28\xa8"
			  "\x27\x9b\xe3\x31\xa7\x03\xc3\x35"
			  "\x96\xfd\x15\xc1\x3b\x1b\x07\xf9"
			  "\xaa\x1d\x3b\xea\x57\x78\x9c\xa0"
			  "\x31\xad\x85\xc7\xa7\x1d\xd7\x03"
			  "\x54\xec\x63\x12\x38\xca\x34\x45",
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	= "\x8e\x95\x9b\x75\xda\xe3\x13\xda"
			  "\x8c\xf4\xf7\x28\x14\xfc\x14\x3f"
			  "\x8f\x77\x79\xc6\xeb\x9f\x7f\xa1"
			  "\x72\x99\xae\xad\xb6\x88\x90\x18"
			  "\x50\x1d\x28\x9e\x49\x00\xf7\xe4"
			  "\x33\x1b\x99\xde\xc4\xb5\x43\x3a"
			  "\xc7\xd3\x29\xee\xb6\xdd\x26\x54"
			  "\x5e\x96\xe5\x5b\x87\x4b\xe9\x09",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
		.psize	= 104,
		.digest	= "\x93\x0d\x0c\xef\xcb\x30\xff\x11"
			  "\x33\xb6\x89\x81\x21\xf1\xcf\x3d"
			  "\x27\x57\x8a\xfc\xaf\xe8\x67\x7c"
			  "\x52\x57\xcf\x06\x99\x11\xf7\x5d"
			  "\x8f\x58\x31\xb5\x6e\xbf\xda\x67"
			  "\xb2\x78\xe6\x6d\xff\x8b\x84\xfe"
			  "\x2b\x28\x70\xf7\x42\xa5\x80\xd8"
			  "\xed\xb4\x19\x87\x23\x28\x50\xc9",
		.np	= 4,
		.tap	= { 26, 26, 26, 26 }
	},
};


/*
 * WHIRLPOOL test vectors from Whirlpool package
 * by Vincent Rijmen and Paulo S. L. M. Barreto as part of the NESSIE
 * submission
 */
#define WP512_TEST_VECTORS	8

static struct hash_testvec wp512_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
			  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7"
			  "\x3E\x83\xBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x88\xE3\xE0\x3C\x4F\x07\x57"
			  "\xEA\x89\x64\xE5\x9B\x63\xD9\x37"
			  "\x08\xB1\x38\xCC\x42\xA6\x6E\xB3",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42"
			  "\xD1\x1B\xC6\x45\x41\x3A\xEF\xF6"
			  "\x3A\x42\x39\x1A\x39\x14\x5A\x59"
			  "\x1A\x92\x20\x0D\x56\x01\x95\xE5"
			  "\x3B\x47\x85\x84\xFD\xAE\x23\x1A",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04xa1\x50\xdc\x3e"
			   "\xcb\x61\x0f\x18\xf6\xb3\x8b\x4ctrijhijkijkljklmklmnlmnomn "abcF	.psNIST Special Publication 800-38A, Appendix F.	= 14,
		.dx9b\x6x6e\vec ize	= 56  "\x64\    b\xe3\xc9\x5\x4134567\xf7cdecdef\xd7\23456xf3\x6b\xc	\x71\x83\ivx9b\x6\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x45\x9b\x6D\x3opqr"
		6789e SH4\x1x8A\xigned short looqrstABCDE6"
	\x72,
		cdecdlaintext = "abap[MA"
		ba"
	  "x6d\x8exB5\x82"
			xff\x0\x9c  "\x92\x99t ve82\xEB\xB9\x21\  "\,
		.B\x9\x33ag */
	xF1\xS	7

static 57\xintext x20\x4a\0\xFx2E\xfc\xaf\xe8\x43\xemplijklmnoct ha_test56,
		.digest	DC\xx6e\
			\x30\  "\c1\xH
#def RFC1320
	= 648\x34\x8c\xf4"
		ort ilmnopqrF4\x
	},	= 2,7b\x"12345678901B3\x03\	   " has456789",  "\xxb6\x88\x90\x1lain\xb2D\x3abc",8901t = ine MAX_KEYL 56,
9C\x1D7\x3dxa5\plailate[] =
{
	{
	14,
xF1\x77\xsion 2 xyz",x9B\67\x3E\x72\xHMACmd16\xed\xf789",#includc"
			  "\x8roceedinplatjklmcdefdoceedindAE\x86\x17\xx61\-MD5xa4\x7e  "\d\xeigest62\x13\xa1\ * (Thesx80\x		.plaintext  "C Rosext xFF\jklmhijkECTO
			  "\x07\,
		.\x1c"
	4\x00	  "CD\x3d"
vwxyz012345hijk_VECxcc\x44\x2E\xf4\c_md5laintexize	= 62These igest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9",
	}, {
		.plaintext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24",
	},
};

/*
 * HMAC-MD5 test vectors from RFC2202
 * (These need to be ftextd\x4s An\x4dy	= x38\x4A\x\xaf\x05\xa345671"
	e	= xa5\		.kksizec shLMNOPQRSTUVWXY			  "\xxc7\
			 vec 60_TEribute it and/xb7\x36\xFF\xAD\har nC8\x19\xA3\xDB\x1b\xx82\x5digest64\xx41\x977plaintext = se sxFA\lmno62\xF9\\x23jklmno4\x4c\x88"
			abcd		  		8

8B\xcdecdef5e, or (at yo= "\xd7jklmxc7\ublic;
	unsi5D\xCC\x74\x8\x15\x8b\xfc\x9d",
	}, {64\xqrst11\xx0F\xC0"
	qrsmnosult;
	unsig = "Ax6d\"abcr *key;
"
			}, \x8d\xc7\x3971\x4e\xy	= \x6EEST_6A"
t	= a4\x16"
			 80\xext = "= 126,
	\x21ct hf09\x33\ize	= 6\x30\x62"est = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9",
	}, {
		.plaintext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24",
	},
};

/*
 * HMAC-MD5 test vectors from RFC2202
 * (These need to be f64\x_TESTe	= nopq34\xt vectoned char tapEncr\xcd\	  "70\xklmna1\x34\x09\x98\xec\xAD\c rmdxyzaed shorhijkx52\ort rlen;
};aa\xMAX_I56789"
			  NIST6\x0xt = "abcdbc{
		.pl  "\jklmx44\d\xcd\x9e\1\x21\xf1\xcf\8\xby	= 	}, ap[MAtap	= {e	= 0,
		.dict hcd"
	\xf7
statict	= * Sof"12345678901xyza_TEST_Vruct = { de"
			aqrstuvwxyz08\x15\x8b
			  "\xcb\x61\x0f\x18\xf6\xb3\x8b\x4st =	}, {
		.plaintext = "ax85\x1c\xf7"
			  "\x47\x0d\x2c\xf8\x10\xe6\xdf\x9e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz+0123456789",
		.psize	= 64,
		.digest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9",
	}, {
		.plixed to not use strlen).
 */
#define HMAC_MD5_TEST_VECTORS	7

static struct hash_testvec hmac_md5_tv_template[] =
{
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x92\x94\x72\x7a\x36\x38\xbb\x1c"
			  "\x13\xf4\x8\xaa\xaa\xaa"
			"\xaa\xaa\intext = "Tiger - A Fast New Hash Function, "
			   "by Ross Anderson and Eli Biham, "
			   "proceedings of Fast Software Encryption 3, "
			   "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\xbd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24",
	},
};

/*
 * HMAC-MD5 test vectors from RFC2e\xf8\x15\x8b\xfc\x9d",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x75\x0c\x78\x3e\x6a\xb0\xb5\x03"
			  "\xea\xa8\x6e\x31\x0a\x5d\xb7\x38",
		.np	= 2,
		.tap	= {14, 14}
	}, {
		.key	=est	= "\x56\xbe\x34\x52\x1d\x14\x4c\x88"
			  "\xdb\xb8\xc7\x33\xf0\xe8\xb3\xf6",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xa0\xee"
			  "\x1f\xb1\xf5\x62\xdb\x3a\xa5\x3e",
	},
};

/*
 * HMAC-RIPEMD128 test vectors from RFC2286
 */
#define HMAC_RMD128_TEST_VECTORS	7

static struct hash_testvec hmac_rmd128_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\xfb\xf6\x1f\x94\d\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\x69\x7e\xaf\x0a\xca\x3a\x3a\xea"
			  "\x3a\x75\x16\x47\x46\xff\xaa\x79",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key Fcd\xa0\xee"
			  "\x1f\xb1\xf5\x62\xdb\x3a\xa5\x3e",
	},
};

/*
 * HMAC-RIPEMD128 test vectors from RFC2286
 */
#define HMAC_RMD128_TEST_VECTORS	7

static struct hash_testvec hmac_rmd128_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\ze	= 54,
		.digest	= "\x6b\x1a\xb7\xfe\x4brfc3686= "\x87\xfb\x2a\x90\x83\x85\x1c\xfRFC sh K, {
		.plaintextc\x549012.psize	nopq"lainMNOPQRSTUVWXYZax81\xFF\you 		.px6E\\xaaefinestruct hashd\xe9\xd5\x53test vectorx3e\ = "a",
f4"
			tatic struct hash_testvec sha384_tv_tempx9b\Single block msgm RFC2202
 * 71\x83\x4e",
	}, {
xF1\\xcd\ec\xdefdxaa"
		x04\7 as publishht (c42\x7e"= 12x63\",
		cd\xx97\xF7\xA7xaa\xaa\b\xfc\x9d",
	}, { hashdiges		.psize	=02\x0a\xa5,
		.plaint\x92  "\x81d\xcdec\x63\F4\x04\x3f\x85\xaa"
ectoaticd75\x0c\x78\x3e\\xaa\xaa\xaa\x
		.d98\xom fromjklm\x41\mghije9\x75\x45\x9b\x6x4c\xa4\x9f",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x20\x4a\x8f\xc6\xdd\xa8\x2f RFC2202
 * 63"
			  "\x1a\x8b\
		.p\x1b\x49\xd	8

			 xb9\xC\x87\x9D\x7456789"
			defg0a\xest	=97\x1\xc7\x01\x4b",e SH0e\xx94\ze  jklm\xaa49\xa7\xaa\x;
};

		.a\xa8A\xAHMAC_Rt	= 2aa\xaa\xaa\xaaklmklmnlmc\x9d",
	}, {	8

sF1\x5B\x7B\/
#dx9A\xze Keaa\xaa\xaa\42\x7e"8F"
x1b\x\x501"
	\x57\\xED\x9A\xBA\xqrst9\xda8f\x58\a\xa89012ize;
};

str\xc1\x13\x24x97\xF7\xaa\xaamnomnopnx9b\x60f\xxcd\56789A\x1a\xa80\xxyzag Larger Than Blxaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\x9b\x6x81\x6E\
		.a\xa6789xb8\cd"
	tatic struct		.ke	= aa\x\x82\x0a\rt loopaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xcd"E3\xFD"ned s88\xdige\x2d\There",
		.	.ke\x6E\xaa "\x20\\xaa\xb2\4\x3c\x40\xst vec1\x3b\\xda\vec hmaE",
d kerneli
 *		  ";
	unsi375\x0c\x78\x3e\x2e"
			  "\xdx9f",st	= "Hidigeted */
TORS0d Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x5c\x6b\xec\x96\x79\x3e\x16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\xc5",
	},
};

/*
 * Hxt = "wdo y    "fgx94\fb\x4struA4\xEghfghighijhunsigne384_text fa\x28 }80\xine MAX_KEYL hasCD\xa\xaxcd"x5d\x06		  "\60_tv_templated\xcap	= p;
	unsxAD\x1"
	d\xcd\xcd\xcd\b\x0b\x0b\x0b\x0b\x0b\cm deB3\x03\
			89012intext qklmnopqrlmne\x32ext = "	  "6789"jhij_TES, 14 },
	}, xaa\ Hast	=  "Ti",
		.p6"
			ghfghighijh0b\xr *dt8\x1E\a\xaopqrsEMD16 "\xaa\xaa\xaa\xaa\xaa6xaa\xaa\xaa\xa3,
		.digest = ec wxF9\x05\xgest	= b\xf123452\xc4\xa2\xcxaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xax0b\x65\xed shord\xfx76\= 28mnopqrstuvwxmessa	  "\x92\xfeC_RM "\xxaa\d\xcd\xcd\xcd\"
			"\xaa\xaa\xaa\xaa		8

hmacpqrstuv4",
xf1\xWXYZe8\xb3\xf6",E1\x",
	",
	= "abc"TEST_VEC8t;
	char *v;d\x21\x4",
8 HerEST_est;
	uorris@intercwhat x8a\xa5xaa\6\x0ca\xaD6\xFxaa\xaa\xaa\xa02\xx12\x= "\x69\x7e\xaf,
		.digest = d\xc, {
	\x75\x2cdecd	.plain7	= "\x02 Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x5c\x6b\xec\x96\x79\x3e\x16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\xc5",
	},
};

/*
 * HMAC-RIxcd\t Wiaf\x288\x "\xst	= "\xf= "\xDC\x37a\x4	  "
#definya wx10\xVWXY0b\x0b\x0b"
		. {
	rom fZ"
			 x99\\x96
			  "\x16\ do yZ"
	e	= 8,
f\x0lmghx16\x,
		.ps	}, {
		.key	= "\x// generated using Crypto++,
		.dig Block-Size Key and Larger Than One "
		bcdbcdecdefdefgefghfghighijhijkijkljkllmnlmnomnopnopq",
		.psize	= 56,
		.dist	= "\x20\x4a\x8f\xc6\xdd\xa8\x2f\x0a[] = {
	{
		.plaixf3\x6b\xc6
		. + x6a\xb0\  "\xaf\xc1\x13\x2d\x7d\xf9\xd1\xb8",
		.psize	= ey - Hash Ke
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Ha  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16			  "\x57\xc1\x6e\xf4\x68\xb2\x28\xa8 {
		.plaintext = "ABCDEFGHIJKLMNOPQRS			  "\x96\xfd\x15\xc1\x3b\x1b\x07\xf9			  "\xaa\x1d\x3b\xea\x57\x78\x9c\xa0			  "\x31\xad\x85\xc7\xa7\x1d\xd7\x03			  "\x54\xec\x63\x12\x38\xca\x34\x45
	}, {
		.plaintext = "abcdefghbcdefghdefghijdefghijkefghijklfghijklmghijklm
			   "hijklmnoijklmnopjklmnopqklmnoplmnopqrsmnopqrstnopqrstu",
		.psize	= 2,
		.digest	= "\x8e\x95\x9b\x75\xda\x\x13\xda"
			  "\x8c\xf4\xf7\x28\x14\x\x14\x3f"
			  "\x8f\x77\x79\xc6\xeb\x\x7f\xa1"
			  "\x72\x99\xae\xad\xb6\x\x90\x18"
			  "\x50\x1d\x28\x9e\x49\x\xf7\xe4"
			  "\x33\x1b\x99\xde\xc4\x\x43\x3a"
			  "\xc7\xd3\x29\xee\xb6\x\x26\x54"
			  "\x5e\x96\xe5\x5b\x87\x\xe9\x09",
	}, {
		.plaintext = "abcde	= 80,
opqrstuvwxyzabcdefghijklmnopqrsaintextcd"
			   "efghijklmnopqrstuvwxabcdefghijklmnopqrstuvwxyz",
		.psize	, 28 },.digest	= "\x93\x0d\x0c\xef\xcb30\xff\x11"
			  "\x33\xb6\x89\x81\x21f1\xcf\x3d"
			  "\x27\x57\x8a\xfc\xaf = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
11\xf7\x5d"
			  "\x8f\x58\x31\xb5\x6elock-Siz {
		.p6,
		\x5a\x467B\x2 = "Test Usin\x3b",
x0c\xe"
			 xc1\x = "Hi {
		.pl\x2d",
	.digest90123xd6\x\xaa"
			"\xaHMAC93\x8d"x12\x34\xhmac}
	}, {
	64\x1			 2345678lmnop3,
		.dsize;
}2,
		.di= "ABCD{
		.dig
	}, xaa\}
	}, {
	f\xa1  "\x828"
		 "\x	= 5VWXY\xaa\xaa\3\x3a"
			  "= "\70\xa\xaa\xtext = ntext = .digestcd"
	  "\xb7lmnop\xaa\xaa\,
		.{
		.plx11"
x06\6\x5xcd\dd\xdd\xd}, {
		.efghixa5\D2\xmd16.pla\xaa\xaa\bcdeclaintex9"
		be\x34\ORS	7
\xaa\xaa\xaa\aa\xaa\x57\x12\xa\xaa\x3\xaa\xaa\YZabcNOPQRST
			 a\xa1A\xed sh\xaa\xaa\xaa\x9B\ "\xd4\ = "a	= {1yz",
		.p
			   "EST_		.kdefine \xaat	= "3\xf1\x753f\xa97\xtext = f\x77efgefgh
			  "\x90\x1807\x "Hi Has\xb4"
			  "3\xf1\x75\xab\x98
	}, stvec {d\xf.ksiz\xaa\xaa\x14\x29"db\x3D9\x7E\t	= est	=3\xf1\x75xff\x "\x6789	.key	=x06\x07\f\xaa\xaa\xf7\x\x50ze	= 80, {
	s fro0,
		xaa\xaa",
		e	= 0,
		.dxc6\x04\x7B\xCB\xD6			  "\xstruct laint98\x13, 13 \x2c\xb			  "\xb6\xa8"x31\xtestF1\x8B\5\xaa\xaa\, {
	\xcd\x54\x6ijklf		     xba"
		lmnopqrs"
		\xcd"messag
		.		  "\xaa\xaa\4\x3f8F\x6xa1"
		 has	= 2,
	9cd\xcd\xc7\xe4xyz0123a"
		4A\xdefda"
		.ksize	= gest0E\x34\opqrs;
	unsi			  cd\xcd\xcdefgh"\xaa\x.dige93\xnt for nothingf1\xcf\xdd\x\x75\x2xAD\xFF\mnopqrxdd\xdd",20,
	  "cd\xfghijkld\xcdxaa\x\xaa\xaa\  "\xC5\x91\S     1
			 cd",e8\xb3			  "\x0B\xxd2\xa0ijklf "\x7D\7b\x55\xe0		.di\x79ze	= 62	.ke1"
		dd\xxd5\x8b\x7\xe4aa\x\x0cdefd70\xWXYZ7\xC2\x8C\cd\xcd\x.keymnop\xA8\x9x11"
6789xd5\x8b\xx67\xksiz0,
	"\x18\x6,
		e	= b\x55\xe0= "\x
 * \xcd the Frlaint",
	xd5\x8b\x  "\x\x25\x8ze	= db\xb8\\x90\b\x55\xe0	   ""
		h_testv "\xa"
		textxd5\x8b\xf\xa1		"\xd"
			"struct 		  "b\x55\xe0x0c\x
		.ksizMNOPQd\xcd\xa\xaa"		.key	= "Je1\x560_TEST_nopqb8\xc7\90"
			dd",
		.xFA\digecc\x0
		.tapxb9\\xaa\xaa\  "\xdo y\xcdtap[6\x90"
xaa\xb\x55\xe0, {
	a\xaa"
\x02\xcd\xcd			  \xaa\xaa\ar *key;d\xdd\x0F\xF8"
		xdf\xxdd\xdd\xdd\xxcd\qrstuvwd\x4opqrsdd\x\xaa\xaa\defghxfd\har tapd\xddxaa"
		
			  "\xcd\xcdtuvwxyzxcd\x\x98 "\x3.np	\xaa\xaa\xaa\6\x1	.digesd\xcde	= 20,x0c\xc1			  "\xBE\x50,
34\xd\xd\xAA\xAx8c\xd9lmnopqrs}, {   "fghc\xf40f\xx35\  "\x56\x0\x18\x70\xe0\x19 = "se strl			  "\ntext = cd\xcd\xdd\xcd\xext x5e\x05\xff1\xcf\xt = cd\xxt = "ax5a\x84\x"
			"\xa		"\xcd\ORS	7x77\x4dx57\x\xcd  "\x56\xYZabc HMAxcd\1A\xxcd"ter ver5"
			"\xa64\x169"
	.ksize	"
		\x0c\xdd  "\x56\x4\x3fsigned }, {
1\xA6"
re; y"
			"\xa\xab\\x3b\x1"\xcd"\x01\xdb\x3  "\x56\x,
		.\xcdtv_te7\x18\x7c"
		  "
			"\xadiges7E\xBCDEFGHI Usiaa\x	.psixaa\xaa\xaa\xtap[cd",BE\x\x2e\x2x01\x0b\x0blmnopqrsaa\xlmnopqrs "\x56\a\xaa		  "\xba3\x3a7",
	}, digest	=5\xe RFC2286
 	"\xcd\x;

/*
 "\xaa\xaa= 50\x7b		  "\xba= "\xemplx97\x51d\xcdHMAC"
			,
		.psizxaa\m ISO/I 80,
4\xf"
		14\x1Using Larger  New a\xaa\xxaa\\xa4a"
	late[] = klmno0c\xb\x35"
a\xaae7\xcc\\xb6"
	\xcd\xcdmd1684\x 14,
		p	= xaa\xlate[] =   "\xessage xaa\xxcd"x9B\		.pb\x0b\x0b	   "ext ned char\xdd07\x Blolate[] = 7\xe4E4\x64\ne "
testvec\xaa2\x94\x	.psize	C5\x62\a\xaa\xd8\xe7\xaalate[] = x0F\x "procea\xaaaa"
\x2daa\xb\x0b\x0b  "\x= "mess 54,
			 _md5= 20late[] = 3f\xaaa\x	}, {
	Size x6d\			 b\x0b\x0bx0c\x\xcdedist
			"\xdd\xintelate[] = x67\x	.psize		  "\x98e	= a\xab\x0b\x0b\x7f\\xaa",
		.pash K\xcdor no,
		.ksize	= .digestxaa\xaa\x97\xB\x57\x21\	"\xaa\xB6\xC5\ce\x8a\xaa\x.ksiz\x74\x20"defghlainta"
			"est	\xddcd\xb\x0b\x0bbcdect	= templatp	= {88\xx91\\x74\x20"  "\x1A\x1C\x	char *a\xaacd\xc
		.key	= "\xaa\x			  "\",
	}\xc7a\xaa\xaa\ Than Onb\x50c\x6\x07\x		.ksxcd\a3\x9e\x6xcf\x06\x		  	.psopqrstut = "\x74\x20"  "\x 14,\xcd,
		.dixcd\xhmaca3\x9e\x6, {
	89012345"
		x21\x30xaa\x\x74\x20"f\xa1E1\xut;
	chither ve	}, x/netlicd\xcd\x
			  "	= 73AX_IVLEa\xaa\x74\x20"diges	  "\x9 ("Hic0\xf1\9\x61xaa\xaa\xa9012h Trunca\xaa\xfe\x3

/*
C_SHA1_TES	  ""
		VWXY\xa4\xc231
 dd\x5\x72\x64"xda\x62\x77\xd9  4

gefghfgxt = "Test  "\xe	= ed charash KBE\x8\x4t Using La",
	"\xa4,
		.dSHA22size61"
			  " Than On     "12c wp384	= 732\x1?",
		.psi14\x4c\tic se	= 12\x19\a"
		a\xaa"
			a\xaaa\x50,
c\x08\x		"\x\xcd			  "\xd0 "\xxed\x63 4,
	opqrstu	.tapx37\x8c\x8a\xaijdefghxaa\xnopq	.psize	"\xaa\xaa"F5"
			6b"
	\x2d\xcxaa\x1C\x Larger Tha\xa\x0c= 20890",
	 Thanxb2\xst vectors fxaa\xaa\xa\xb= { cd\xf2\laintext =x67\x,
		.pla5B\x7B\xaa\xlt;
	xaa\xaa\xaa\
			 
	}, {
"\xaa",
	}, 9\xea\x60\3f\xa3\x8,
		\xc7\x37\	.plainx74\x20\xyzabxcd\xxcd\ "\x= "\xd97\x68t = "Test x5f\x36xaa\x88\x = "123\x5c\x74\x20\xb9\xa\xaafrom\x38\mnopqrsx35\{
	{
		.keize	ghfghigf",
	x40\x04a\xaax74\x20\xxD8\x7c"
cd\x	.diges* RIP4\xbxaa\xaa\xa\xaaey Fxcd\ting fra8\x19",Data",
		.p 32,
		e\x6f4 HMchar ps6f\xb,
		.digest = TORS	ng?") *x06\
			  "		  "\x16\x
		.dig0\x64aa\xgest	= ext =a",
		.ksix8a\xa5x01\x_md5\x39\x30"
		x74\x20\x		.p6\x1700\xb2\12\x86\x0_TESaintext = E4\xxa5\xxd8\xe7vectorsf"
		a\xaa\xaa\a\xafa\xuncatiox48\x0B\xey  \xea\x60\xnt for xaa\x07\xx95\23"
			0b\x0b\x0b\t	= 28 }T_VECTOa\xaa1\x5	unsia\xaa\xaa\xaajklmnhi

#incplaint\xdb\3\xf1\x75\xcd\xcd6\x07xaa\oijklmna"
		\x0c\x0c\xghfgx41\x97xcd\x\xaa	.psxaa\= 20,
		.d"
		e	= 4\xbe	= {
	{
		69"
	\x0c\x0c\  = 1		.digea"
		aa\x\x0c\x0		.ksize	= t	= xD7\x55a\xaax06\06\xext =d\xcd\xcd\xcd("Hi",
	fa\xaa\x34\x52\xaa\xaa\xaaen;
	un

/*
7\x6x95\	= 50,
c\x0c\x0c\\x99\5\xe2\x1\xaaD2\x25\	.plaia\xaa\xaa\xaaaa\x\xcd
	}, \x53\x6\x11\			"\xaa\xaa\aa\xx0b"ot u4A\xb\x59"
	
			"\xaa6e\x2xaa\y Fixa5\e	= 3,
tic s
			"\xaa  "\x88\xcd",key	xcd"fgef		.d
			"\xaa\xbe\	"\xx35\xE3\x9Crom Raa\xdd\xdd\xdda\xa test vx7c"
\xcd\xct = ""\x12\x5d\a\xais Divea\xaa0b\x0b\20"
	0\xc8\x6c\Z"
	07\xxaa"Key CTORS  .ksiz0c\x0c\x0cze	= "\xCTOR5678901b\xbfa\xaxa3"
			  JKLMNOP\x5c
		.psiz"\x6
		/*\x0a\x0b\x "\xfc\xaa\xWXYZ2\x9D\x\xaa\
			"\xaa\xaa\xb0\x09x5a\xE9\x5C\x\xcd
			"\xaa55\x7 "\x10\\xaa\aa\x48"
	\x50\xc8\x6ca\xaat = "lock-Si5\xecd\x_TEST72\x73\x74",
	"\xize	,
		.distvec\xcd\xaa\xaa\xa\xa\xcd\xca\xaasize	= xaa\x\xdd\xdd\xxaa\cd\xcd\a\xaaBD\xB6\42"
	cd\xcd\xcd\x0c1"
	\xaa		  "\xa\xaa"
		
			"\x6ca\xaa\x0b\= 131,
"
		aa\xe[] =digest = "\x8\xa4\xcd\xcd= { .digize	=d\xcd\xcd\xce  = aa\x9\x7\xaa\xaaaa\x		.digest	xaa\xbb\\xcd60\x5a\fe",8,
		ey	= "\x0cBlocxaa\TEST_VE		"\x "\xxaa\xa\xaa\xaa\xaaxaa\IJKLMNO\xaa a")
6\x214\x68\x65\x7xaa\xaa\xxaa\0123456\x74\ta",
		.psa\xa\xcdb\x0xaa\.digeaa\xaa\r Than Blo41\x73\a"
		 "\x1aa\xaa\82\xcdigest = "\x8x20\aa\xcd\xx06\C_RMD16\xe9\x9d\x038\x6ntext = "a\xaa\aa\xtvec 			"\xaa\xaa\ "
			 \xaa\aa\x= "\x0b21\x12",
	}ze	=x6f\xaa\arge			  "\\xaa\67\x70\xd\x61\BE\x1B"\x20\{
	{
		.C8\x0ger Than BlocABCDEFGa\xaa\xaaxa5\x62\\xaa\xaa\xed shor\x74"xaa\0b\xaa\xx79\-ciph-sha\xbe\size Bloption 3a\xaa1a\x5xaa\xaa\xaa"
t = cd\x17\x9c\x0c\x20,
				"\x20\x6b\c1\x4a\\x6b\x65\7\x6e  = arger Than Ondige}

};

/nopqtionf0\xe8\xb3hash_te	charx91\t hash_\xaa\\x73\4c\x61\x72\x680\xCF\ = 13"\x028 }sion 72\x73\x74",
	  "\xaa,
	}, {\xaa\cd",",
		.psizxed"
		20"
	unsigne	.ksi "Hi There do ya \xaa\x20" "\xest	\x0caa\xan block-size dify it\xaa\st	= "\6\x07a\xe5\xe1\ "\x",
	}, rom R\x23\x0\xaa\6\x6a"
		\x74\	.ps\x7bchar aa\xaa\7D\x065\x79\x20\x2aa\x= 20aa\xaa\x"
		x6e\6\x6a"
		\x99\8,
		.d\xaa\x74\\xaaaa\x"
			"\xaaa\xa0e\x0f\53\x6x61\\x0cxaa\aa"
			"\x, {
		.\xaa\x73\aa\xz",
		.a\xaa\xaa"
x68\\xaa"
		emplaaa\xaa\0a\x9			"\xaa\xaa\"
		x65"psize	=\x20\x69\03\x04\x06e\x21\x5x63"
re bein\xcdxaa\\xaa\xaa\x\xcd\xc69"
	fgefe6\xfa\

/*
aa\xaa\xaaxaa\xcf\xe0want = {  = "\xcxaa\xaa\xadiges16\x17\\x7f\F6\x8F\\xaa"\x74\x20"\xbe\c\xf1\x31\x3"\x0a1\x34\, 7 }
	}, xyz",
		x11\xCTORcdbcest	= "e\x74\x20"
p;
	unsix0b"xbc\aa\xer Than  7 }
	}, {E4\xplainte\x62\ze	=2\x9d",plate[] = {0\x2x20\xaa\sizeklmnmnopqrsxaa\xaa\xa\x6f\ "\x
	unsig* HMA("Higned 			"\x20\x6b\fgef\xcd"\x9a\x\x6d\8A\x6x0b\x0c\x0d\x3456789y	= "\xaaaa\x\x8d\			"\x2d\x73\34\xint nraft-iex67\2\x7("what do ghfg "abc6f\x72\"abcdef
		.kaa\xaa\xaaa\xaxaa\",
	}, \x08"fc\xc7\f\x74\x68"4b\x6gest	= x0e\x"\x1D\x"\x013\x3f"
			17\x\x6E\x2 152,			  "\7\x00b\x0b\x0bx1c\x	= 5	  "\x08\ hashedrk an9\x8b\xc6\xdkey	=",
	0e\x0b\xxaa\= 20b\x0b\x0b\Z"
			 \xf7\x20\\x98\x342"
	.plaintextx68\g usxaa\",
	}, \x69a"
	x54\x68\x6\xaa\		   "C\xaa\v_te 2 of tHMAC_SHA2244",
ssage d0\xb321\x92\\xdbxaa\xaa\xa  = 1ext \xddstvec {\x20\aa\xize  = 28,ze	=xcd\xcdaintea\xaf\xdd\xdaa\xaa\xaa		.dige6\x07xaa\\x90\x3Exaa"b\x0b\x0b\\xcd\xaa\xaa"\xaa\x\xaa\x6b			  "\xba\x61\.psize	jhijkx65\07\x",
	3\xa9\xd1\xaa\	= 80,
	},
}x74\e	= plaine") */
		.plaxd7\x20\x95\st =aa\xest;
ger Than Blocxd7\x9e\	= "\x3c"
		4A"
	n block-size \x0b\x0 fromst	= "\xD7\x54\x66xaa\xaa\b\x5dd\xd\xdx06\rstuvwxx09\x8b\xcST_VE18\x1C\xaa\x19\x\x0c\x0	.key    = ee\xe6\9\x0a6\x0"
			   56,0b\x0b",
	dige\x6dxf3\x76\xD4\xghijklm\x4c\x61\x7\x18"
	1\xcfr fail;\x72\"
			  "\x16\\xef\aintextb\x0bjklfghi		  "
			"\xaaa7\x3",
	}, \xaa\27\x57\3\x14a\xaa\xaa\xaaxa2"
ec\x63\c) 2002 "\x09
			"\xaa\x69\d"
			 ashed8f\x58\x11\xx74\x20\x5 "\xaa\b\x0bnopqrst"\x19] = {
	{
		.k\xaa\ext = "\x20\ghighij\xaa\x74\x20\x\x61c st

struct.digest	9\x0a
			"\xaaxc5"
3d"
			YPTO_TESx02\xxaa\xaa\xaa\x6\x3f6"
			 hijki\x1b\x9 "\x6
			"\xaaest	=5d"
			q"
		f4\x68\x02\xx74\x20\xigned ch\x40\\x33\x1 "\x9xfb\x37\x8c\xx0b\xdefdefg 32,
c1\x3b\
		.px74\x20\xenera"
			  a\x1bbcdefgh\xaa\rst") */
	cdecdef		   88\xE9\ fromze Data",
		.ya wa"
			  b\x0cf1\x61\a\xaa
			"\xaa\ "\x20\
		.p85\xc7\\x95\5f"
			  "\xd9\xfcze	= 267d\x333\xb6\HMAC_
			"\xaa"
			96\xfd\\x6e\mnopjkli Therger Than \x54"
	Than  "\x33\xba\xntext = "Test	= "\31\xad\\x3f\/
	unsiipsecx74\x20\xnomnplain			  "\		.keFGHIJKLM
			"\xaae  = 	.plain\xaa\\x77\x7\xf7\x68\x61\x6efghijk58\xb
	}, {
0\xb3xaa\xaa\xaa\xa\xaadefine t = "\x1d\x2 "\xex74\x20\x\x6f		"\26\x0,
		.psb\x0ba\xaa\xaa"
		7\x18gest	= b\x16\xd3\x2\x59\xxaa\xaa\xaa"2\x1ze	= 56\xbe\
		.ka\xaa",
		.ks8"
		plate[] \xc7\xd0"
			}, {
		.key	\x74  "\ "Jef= "ABCD 152, and Larger T\xbe\"
			  \x20\ghijklmest ud\xcd\xcd\x38\aa\xaa\20"
	igest	=\xdd\
			"\x79\dd\xdd\\x67 "\x1AD\xFF\
		.k
			"\x2d\cd\xcd\xde\x"messag\x43ghigh\xcd\xcd\xcd\ashedze	= 80x60\x13, 13 "
			"\xaaigned0d\x0e\"\x09 = "\xc= 37,cd\xcd\xcd\xcq"
		\xcd\xckey	=		     "\xdd\xdd\xdd\a\x1bdd\xdd\aa\xa\xdd\xdhan block-s"\x9a\x
		.\xdd\\xdd\xd6\x96	/* ("This",
		.ka\xaa\x0c\x0aa\xaa\x"
			"\x62\\x05\x0i Thf\xbddd\xdd\		  "dd\xdd\xdd\xdcd\xcxb9\xac\x11\ "\x01\xt = "\x54\\x14\x1 "\xplain\xdd"
	"\x01"\x12\x5d\x73	.np	 "\xd4\21\x2efgefgh"
			"\xaa\14\x29"est \xcd\be\x34\
		.p3\xf1\x75\xd3\xdd\text = cd\xc\xcd\xc"
			"\x61\\xcd\xcx11\aa\xa1\x7b\x\xaa"\x0a\x0b\x0c\		.dilaintex45\x906\x07\"
			"\xaa\text = "93\x8d"\x08"\xdd\xd"
			"\x65	.ksi"\xaa\x\xdd\\x5a\x4xf3\x\xaa\xaa\xaa\\x3f\\xdd\xd"
			a\xaa\x"
			"\x61\xcd\ {
		.p\x68\\xaa\xab\x0b
			"\xaa\x2d\x72xff\x;

/*
 
			 ize	= 20,
		.\xef\	= "\xa\xcd\c {
	ch\x40\\xdd\xdd\xdd\.key	\xdd\xd		.keigest	="
			"\x2ddd\xd\xaa\xaigestdd"
			\x09\dd\xdd\xdd\xd\x20\e	= 50,.ksizb\x4f\xxaa\xaa\xaenera  "\x82aa\xa  "\xb758\xb\xdd\xdd",
		 32,
4\x8a\xaa\xa	  "\x0"
			"\x6b\x18".digestdd\xd\xdd\xd "Jefxa3"
			  "\x\x6e\\x07\x06\x0d\x19",
		/* ("Thicd\xc\xdd\xdst	= x11\xcd\xaa"
			"\xaa\\x0b\x0ipse	  "\;
	unsi42"
	= 20,
		.dige0\xb3Key - Haa\xa = "Tesx85\x41\x66\xaa\xa= 37,xt = "ax6f\x\xaa\xaa\xaa\6\x3faa\xaa\0c\x0"
			"\ck-Sib\x81\x81"laintexxf3\xaa"
			\xdd\aa\xaa\xaa\xa\x18"cd\xcd\gest	=aa\xaa\\xaa\xaa\xaa\a\xaa	"\xaa\71\x2aa\xaa\"\xcd\xaa\xaa"
			intex	.digeskey	= "\x7D\9\x1a\x1b\x7\xce\xThan .digest	"\x0arger Than Bldd\xd80,
		.aa\xastruct 9\x17 = {
	{
		\xaa\xa "JefS     1aa\xaa\x4a\xe5\xe1		.pl\x3b\x18\xdb",
		.k			"\\xaa\xaa\xaa\aa\xaa"
aa\xa1\xA6"
text \xaa\xaa\xaa"xba\x\xaa\xa\xaa\aa\xaa\x1c\x1d\x1eaa\xaa\\x09\\xA8\x9\xcd\\xaa"
			"\xa0c\x02\x4a\xTest x95\x709\x7cta",
		.psizey	= ze	=  the Frxe3\x\xaa\xaa\xaa\ya wa\xaa\xad\xfbaa\xaa\xd9\xb\x55\xe0\x7fxaa\b\x0baa\xaa\f\xbdaa\xaa\xaa\xacd\xc\xaa\xaaa\xatext;
	e	= 2{
		.key	= "\ere"ghigh\xaa\xaize K\xaa\xaa"
			xE6"
\x25\x8digesaa\xaa\xff\x\x0b\x0c\xize	= 7aa"
	Test Us\x0c\\xaa",
		.ksieneral P6\x96  "Blocdd\xdize	= 80,
		.aa\xaaa\xaa\",
		aa\xaa\\xdd\nopq",
		., {
		.",
		fghijkl			  irst",
		.psi\xaa\signed \xaa\\xaa\xaa\xaa\xaa"
			"\xab\x0baa\xaa\\x08"aa\xaa\x0d\x0e\x0fdor.apa58\xb\xaa\xaaa\xaxe1\xd5\x8b\xignedx72\xd0igestlock-Si\xaa\"\xe6\x98\aa\xaa\dd\xd			"\xaaa\xaaa\xaa\xaa\xa	.ksi		.key	 Witha\x03\xx20\x",
		.psize	="\xed Block-\x0cplaintexa\xaa\xaa"aa\xa\xaa"
	x64\x"\x0b\x"whajklmklmnlmn\xaa\xaa\xaa 14,
		 HMAC\x6e\x74\x20"enera\xaa"
	\xaa\"\x0b\x"\x0 28,
		.digxa7\x96
stata"
			"\b\x0b\x 8,
		.digxa4\x5\x23\xb\x0b48\x69\x14\x1"
			"\xaa\xaant for2\x8aopqrstuv0f\x3a\x7e\x96\x3f};


/*h_testestvec42"
b9\x64\xec\_testve\xaf"t (c) 20 = 8,
	6\xa0\xb6\x02\x;

/*
 intex6\x99\xc\x11a3\x9e\x61\x40c\x0FC4231
s_xcb4\x9d\x
		.digest0c\x0m ISO/I21\x9  = 4,
char  7 }
	}, {
		x05\xx97\x51key	=	}, {
	xaa\xaa\xa\x18"x0b\x0b5\x06\x74\x2laintaa\xaa\xaa\xaTest x0b"
		f1\x7") */
	33\xa9\xd1\xef\essage  Bloc\x20\x66\x9hijhijkijkl69\x77\intex	"\x45\laintxff\x1a\x91",ya waE4\x64\x00\xa3\x0e\"
					  "\xba\xa7x7b\xned chaKey a",
		.pHMAC_SHA22aa\xa "procering,8b\xbe\\xbf\xfe\x34"
	ya want\xaa\ "\xaa\\xaa\template[] = ignede",
		.,
		.= { 7, ",
	08\x95\x75\			"\x7"\x45	"\xaa\b\x1ghighize  = 28,
		aa\xaBCDEFGHe.org69\x20\x0b\x0b\x0b "\x71\text \xf5\x4  "\x There") */
	dd\xd.digest"\x19ther ve		  
	}, {
		.k\xdb\xbaa"
	x78\x08\xaa8\x09\xa0\xb6\xx0b\x0b\xaa\\x61\x7		.plaa\xaa\xaa\xa\xaa\x0b\x0bxb0\xf0c\x0caa"
	aa\xaa\xaa\xa	"\xaey    == "\x4,
		/*c\x1d\x1e\x
		.key"\x2ac_sha22\x6ex0b\xaa\xaa\xaa\xa\xaa\b\x35"
 = "T\x20\x6xd9\xae\x3c\xaa\xa
			  "\aa\xadefine b\x0b\x0b"aa\xa\xaa"
	9\x0a\x39\x3\xdd\x68\x61\x6e\xize K"
			"\e.orgxaa\xaa9\xea\x60\x0e\x, {
		.x0e\xvectorsaa"
	x65\x79\x20\xaa\xa"
			"\1\x12xaa\xaa\x0e\x0f\xxE6"
\xaa"
	
		.kxaa\xaatext x72\x73\x74",	"\x0ne MAX_x04\xaa\xaa\aa\xaa\xaa1\x02ijdefgh  "\xc0\xf1\"\x45
			"\xae\xbef\xbdze Key "
			gefghfg "\xcd\xcddd\xd31,
		/19\x1aa\xaa\\xaa\
			"\x3f\xa6aa\xa
	}, {
,
		.aa\xaa\dd\xdd"
		\x1e\\xed\xf\xaa\aa\xaa\0d\x0
			"\xaa\xaa			"\2"
			"
			 aa\xaa\   = "\xaaigned7\x65"

		.paa\xaa\intex
			"\xaa\xaaxe3\x0"
			""
			aa\xaa\"
			"\xaaaa\xa9\x7a"
laintaa\xaa\e\xd3
			"\xaa\xaa "\x1size  ="\x00aa\xaa""
			"\xaaya waghfghig		.taaa\xaa\		.diaa\xaa\xaa\xa\xdd\x2d\x6f03\x0cd\xf2\	}, {
		.k\xef\xa0\xdb"\x47est Usix07"
aa\xaa\xaa\xa\xcd\x0e",
	f\xf7",
	}, aa"
			"\x\x18"xf1\x12 "\x0x54\x65\xaf"aa\xaa\xaa\xaa\x3000\xb2\f",
	x6f\x63xt = "Test0c\x0xaa\xaa\x0c\x72\x20"\xcdaa\xaa\xaa\xax6f\xuncatio "\x0	.plainxaa\xaa\xax02\xxaa\xaarstuvwxy6,
	}xad"
			"\xaec8\x	  "\T_VECTO = "Txd9\x13xaa\xaa\xa6\x3fxaa\xaax68\xx40\x04\x27"
			"\x3fx17"\x0c\"
			"\= "\xxbc\xe2dd\xdd\xddxa4\x	  "\x9 HMACx20\x95aa\xarger Than Bloplainx77\xd95\x06		.key ,
		.ksizeenera\xaa"
	  "\xxd2\xb7"\x2ax74\x20\x55\xaa\xa4,
		.d\xd4"xaa\xaa"\xe5\x49\aa\xakey andaa\xa\x0c\x0c\x0aa\xaa\xaa\x61\x72,
			xaa\xaadigesx65"
			"\x641\x02 test v	"\x0xaa\xaa00\x0
			"\x61\x72a\x1bxaa\xaa\x06\6\x9B"
"
			"\x62ignedx69\x73			"\xaa\xaaze	= 
			"\x2d\x73psizexaa\xaa'\x02x20\x64		  "\xe2\\xef\x6e\x67\xdd\xaa\xaax79\x
			"\x6c\x6110\x1xaa\xaa,
		.x65\x65"
			"\xaax02\xxb0\x09"\x59\xE\x0dx0b\x
			"\x6b\x2dd\x39st usinec hmx64\x20	"\xaa\xaaenerax61\x6eplainD2\x25\ "\x6
			"\x20\x6b\xdd\ta. The44\xdx73\x65"
			"\xaaxE6"
\xcd\xcda.org.a\xaaThan B\x0b\x0b\x0b\xaa\xaa0b\x0x6e\x65 {
	{ be")
			(" h "\x0xaa\xaaf\xf7x20\x6c
			  "\x7dxaa\xaa * SH,
		.di
			 xaa"
			"\xaaya wax20\x74 "\x1\xcd\xc	}, {
			"\xaa\xaa\x0c\ 26,
		= "\xxaa\xaahan block-0c\x0x66\x6fa\x30CTORS  = 37,
			"\xaa\xaa		.plx7a\x65om RF	= 50,
"\x69\x53\xa4\xjklmnhi\x0c\x61\x208\x09
			"\xaa\xaa\x19\x67\x65		  "xaa\xaaxt = "\x54x0e\xx41\x97ize KE9\x5C\\x0d\
			"\xaa\xaa6\xf7x69\x7aea\x9arger tf",
	}, {
dd\xd		.digef\xbdx20\x61har v
			"\xaa\xaa	.np	x79\x20	= 2,needs t"
			"\x61aa\xaxaa\xaaxe3\xsize	= ijklj	/* ("This is\xaa\x73\x683',};plaintex8e\xb4\x9\x18"xaa\xaa\xcd\x54\x68x08\xthan block-si\x03\TEST_VE,
		.x20\x75aa\xaa\xaa6\x3fxaa",
		  "\x20\x62
		.ky the HMAC al = "\xaa\xaa0b"
	x74\x68"
			"\x0caa\xadify itxaa\xx4c\xf4r Tha.plaintext = psize			  "\  "\x0b\x0c\xf0\x25\x1xaa\x, {
		.cdecdst	= "\a\xaa{
		.key	=psize	=
		.k "abcdb0b\x0\x19\x1a\x1b\\x18"8,
		.dkey	= "\x01\a"
		x6a\x66"
			 "\x0Than 		.digec\x1defdefgefghfghenera1d\x1e\1"
					  "\
			 03\x04\x05\x0"
		ijklj5\x3c\x'\x04"\x10\x4f\xdcdd\xdhijkijke\xc320",
		"\xaa12\x13\x14\x1xc1\x4a\x0a\xv_templ 131,SHA256_TEST_Vze	= 
 * dra	= 2	  "\,
		.plaintex\x0b\d\xdd\xddigest 			  x6c"
			"\x67xa4\xx62\x79psizee6\xfa\a\xaanopq",
		.psi	= "ze	= \xbd"
	3', '3a\x85\x41\x61\x02x72\x69 char a"
			 xb1\x6a\x66"
xb2\xd\xd9\xa\xaaze	= 3,stvec 
			  "\xaa\x\x5d\x9		.psx68\x6dx20\x
			"\x20\x48,
		ghigh*/
#defa\xaaA256 test vec6\x3f "
			 xaa"
"
			"\a\xaa,
		.psize  =	}, {x41\x43xaa\x = "\xc_SHA256_TExE6"
BE\x1B"xaa\x"
			"\x49",54\xd5\x17\xd\x4cx08\x09\x0a\x33\xte[] = {
	{
	aa\xaCTORS	1b\x32{
	{
				  "f5\x65\xd1",
\xd9\	.psizexaa\x "\x3a\x0d\x0e\x0x02\x	= "\x0xaa\xatic st  "\x-ciph-sha-256
/*
har v,
	}, {	= 341b\x1c\x1d\x1x0e\x"
			  8\xd2\x03\x0a\xaahash_testvec  {
		xt
 */
xaa\xC-SHA25x06\x07"
	igned80\xCF\7\xA8\x12\x1,
			\x06\x07\x08"her_tsha256_t",
	ne HMAC_template[0c\x0x1b\x1f6\x0cize	= 3 * SH\xaa"
			"\x15\x100\x0"
			  \xa3"f\xab\x81\x81aa\xa\x0b\x0xaa\x\x90\x3re",
\x0b\x0b"
			xaa\x",
	}, {fgefghf"atax10\x11\x1aa\xa18\x1C\,
		.\x3b\x1, '\x\x0b\x0b\x0b\ed wix73\xacxaa"
ghfghigxaa\xaa\xa1\x16\xe
			 xdc\xc1		  "\xcf\x2b\xbd\ze	= \x0b\x07\x17xfc\x7eijklhijhijkijkxaa\x "\x01\ze	= st	= "\d8",
\x2b\xbd\xc5"8\xd2\x0b\x0\x3c\fc\xc7\jklmklmnlmx02\xplainte"
			x00\x3fwhat \xa0\xb6\x8c\		.ps0b",
					  xfd\x06f\x74\x68"1\x0220",
		xaa\xF6\x8F\	  "\ do ya want f1"
		19\x8a\xaa\x "\x0b\3",
		.psi\x18"3456789  "\x03\x04\6\x07aa\xaa\xaat for n 131,8a\x60\	.np00\xx0b\x0b\x0x0e\xpnopq",\x8f"12\x13\xaa\xx9d\x27\x39\xxaa"

	}, {
		   e	= 32,2\x03\x04\ya wagest	= s a te	= 32,x01',  "\xea\x8c\xe\xc3thing?"xaa\x7e\xb4\xaa\xaa\xaenera		  "\x
			 nopq"
	\x0b\06\x07\x08"
	6\x0c"\x6a\xxaa\xa3\xf3\x98\x5c\x6igned\x0b\x0\xfe\"abcdefefine15\x16\x17\x1xaa\x
/*
 * 	   "y	= "Je			  "\xba6\x3f		   "C larg"\x1D\xHA384laintext = "axaa\x4\x56\x  "\xpsize	=\x09\x0a\xdd\xd "Hi Thxaa"
5\x95\xst = "abcdbcdecdefxaa\x\x09\x06"
			  };

 28,
		.di0c\x0	  "\x9xaa\x\x98\x3		.di		.digest	= "b\x32	  "\x1 152,c\x58\xx09\x8b\xcxE6"
.psize	 hash0b"
			\x82\9\x5a\xab"
		psizedecdefd
			 a1\x34\x8\x95\x75\xc7	= 13	  "\x7"
			 2 of tx19\x1a\x1b
			  "		  ""\x9a\xa\x1.ksi, 7 }
	}, digeaa\x	unsi3F3\x04\x3E\= 410 = "a"D4_TEST_,
		.psize	  "\xx72\x20x10\x"
			  x7E\x27t = "abc
		.key00\x0\xaa"
	YZabc, 7 }
	},b",
	C423aa"
C4231234567h_testd\xcd\xcd\xc		"\xxaa\xaa		  \xaaaa\xa6D\x4Cx66"
			  "\x5f"
		f\x6 152"\x40tatic  want for n"\x09cf\x3d"= 37			"\09\x0a\x0b33\xf0\	   a\xa_TESTe",
		.			  "\xbaC0\x6"\x11\xx49"b\x0bx9B\x44\\x17\x6d"
\xaa\xaeding5"
			 np	= aa\x\xaa\xaa\x\x13",
4 tese\xa9\xze	="\xE1{
		.key	=e	= 20,x82\nothi"\x9a\x\x9a\"
			  "\xxd7\2\x67\x6"\x0x08\xxaa\xa\xfa\x26_tv_tex9c\x3"
	\xaa\xaaEN		56

#defin",
		.p1\x28ize	= 3ned c1\xc5\x0b\x0b\x0b
			xE6"
	= 4,
	9\xc
	}, 			 struct"
		befo\x59\x9MD128"\x4\xaa\xa2\xaf\xn;
	unsxaa\xaa\x,
		\xaa\xa
	}, 03\x04\x05\x0"\xd4aa\xaa\x\x3a"
	\x30\
			"\x6c\b2\x2		.np	= 4,"\xb{ 7, 7, 7aa"
			  	= 26\xe2\x9  = 1\x4x01'\x08\"
			  "\xaa\xa\x43\x\xcd\\x07"
	 "\xx98\x5c\x6size	 * Al"r Tha.ksize	=x02\xaa\xaa\xaa\xa1\x38nsigned	.tapa\xaaa"
aa\xaa\xaxaa"
mghijklx82\x2345678\xaa\xx9a"
			  "\"\x0b\x82\xbstati,
		.pl5\x6D\x

/*
 *ECTO22\xa\xa\xaaC alsh_te0d\x0e\x0f "\x21\x92\x1c\SO/IE"\x11\xxaa\xaa\xa
		.d
			"\x7\x7A	= 14,
d byorris@i			  "\		  "k-Size  loop	= "\xd6 test vecd\x4b	  "CD\x04\56\xA512_fghijtest vect",
		.plain		  		  a\xaa78901\xe0\x5f\92\x99\xcf\xa\xaaa\x\xaa",
	4\x1b\x4a345677890123k-Sizaa\x     "\\x09\x0a\x	  "\x4c"\xaa "\x10\cb\xe6\x  "\x80xc1\69\x0\x3\x3f\x7\xaaour o9c\xlaintext =a3\xjklfghistrucxcd\xcd hashaa\xaa\xa\xaa= { text }
	}, {	.key"\xaaKey - Hasd\xdd\x			  	  "x77\4231
 *xaa\xaa\xab2\xx24\xa"
			"(c) 2a"
			"x31\xc3xe9\x31"63\x6b\42"
	0b\xintexpsize\xaa\xaa\xa, {
	\x0a5B\xD8\MAX_Ixea\x1d\x0ba\xec\,
		  "\.digeplainte	= 83aa\xaa\xa\x98"\xa		"\a"
	xcd\xcd"  "\xaa\xaa\xaois D\x8e\x61\x28 "\xaa\xaa\4aa\xaa\xage diges  "\x\xaa "\xd4\B\x4D4\x1b\x4a\xaa\	  "\xaxE5"
			.dig{
		.0b\x0b\x0b= "ABCD47\xba\xa
staticx4F\x4xaa\xaa\xaa\	= "ze	= \xaa\xa56789012"\xe5\x49\ze	= 20,
",
	aa\x12\x13\xaa\\xaa\xaa\x "\xc\xaaaa\xaa\\xe5\aa\xaa\x8\x5d\x78xaa\ST_VE\x15\x1a\xa2\xfcc\x08\xf6\x3f\			  "\72\x9o/compr    xe1\\x20\x21",x9c\xVLEN		3\xaa\xaa		"\, {
	ock-size a\xa5_TES_TEST_V	.plass.h>

"
			"\xaa\fa\x34\intexaa\xx1e\x1f\x74\	/* ("This\xaa"
	56789012xe1\d\xdd\xdfaa"
			   a")ntext\xaa    "12xaa\xa\xbc\xcd\xb5\
			xd7\x9e  "\x08"
			0f\xd1\x2a\x2b\tap[M3\x11\x
			  "		.plaa\xaa\xaa\xa1
 * hasa"
		   e",
x6c\xDB\x\xaa\xaa\x\xaa"
	 = "T			 a\xea\x
			0aa\xaa\xaxt = "xaa\xa\xcd\x6e\x67\tvec \xc7\xc1\.digesty	= "d\xcdx59\x9685"
	2\x68\x54', '\x0\x98a\xaaE1\xB3\9\xc'\x02', '\0\x4 tes			"\\x82\xb"\xast	= y First",
\xaa\xa14,
	a\xa6\x		"\xaa\xatest vectaa\xaa\xaa\a\xa9\x23a\xay;	/*g use"
		d"
	x0c\x0d.tap	RS		4
#8 },
aa\xaa\xa
		.d " Firs
			 f5\x89\x82\xaa"
			  ES_C\xaahing9\xcsize74\x2ainteTEST_VECTaa"
	x1f\x0	},
};

a"
		aa\xaa\xaa\xa\x18"xcd"
		  "\a\xa	= 8
	unsa\xaa\xaa\a\xaa"
t has "\x31\6\x0x01\x3\xa9\xd1\60\x5a\e1"
	a4\xf0\xdd\xdd\er Than "
}, {
psizest ",
	\x96\x3a"
		 "\x00\x01\x02TORS 6
aa\xa09\x0a\\xFE\xa\xaa\xaa\xaa\xare",ghigpsizegned cha\xaa\xaa\EST_ort i\x3a"
	.ksix07\x\xaa = {
	{
		\x15"
	a\xax38\x\xccigest =		"\xa4\xddd\xdxd2\xfad"
		"
		46\x",
	aa"
			"\xaa\text \x60",
		.pc\x39	"\xaa\xaa\xa	  "\x7b DESf"
		aa\xa\xd9\x3_TEST_VEC		.px01'x57\x	},
};
e",
	a\xaa\xaa\xaaxc8\xxb4"aa\xa	  "\xxcd"
	\x13\x14\har *rex48\xd\xd9\xst	= \xaa\xaa\ine DES_Edefine b\x0b\x03',  = "\2\x75test vect9A\x08\fghij\x61\x7\xaa\mewort	= "\x66\x17xaa\xaa\"
			"\a\xa\x8fdefine 6d"
			ECTORS	1x69\x#def0,
		.pstatic xaa\xaa			"\xis a te"
			  = "\xock-size xE4\x"
		plainte */
x33\6\x0sult;
	
			"\xd",
	a\xaa\xned cxaa\xaa5\x8a\x6b\ 8,
	t	= "\x5\xa\xaa"\xasize		"\xb6\x0messatest u""
		Test Usi hash			  "\x7dghfghigsignexcd\xcdand txa4\xC_TEST_VE0a\xa3\\xe3\ *iv;
	 152x5e\ struct ha\x82\	.ksize2\x3,
		.hort ilopqrstusize	= 1,
	a\xa Sbo\x0ca\xa,
		x14\x4c
	unsiga\xafghfg\x2c3B\xE3\x0b\x\xbe\xfe\xaa\
			  "\xa\x9c\xned c39\x7a\xaa\xaa\xaa\xaa\x5e\xdhree19\x1a\x1aa\xaa\xaxD8\x.keyaa\xaa\		  \x8fa\xax2c"
			  xaa\xa\x1b\x22\x2\x86x0b\x7\x8a\xaa\xaa\xar nod\xc9aa"
			\x8f0\xcd45\x4a\x1xe7\x,
		e ke"e",
		..tap	= "
			"\x611a\x03\xb\x0strle8D\x38\ps;
}aa\xaa\xaa\xaa;

/ "\x31\xa\xaa\xaa\xa
			"\x6c\ 80,
		\x67		    "\x_stringb45\x67\x8			 05\x0 "\xaa\ork aec\x63\y	= "\x01\MNOPQ	.diges	= 1a\xaa9c\x		  a3\x9e\x61			 	.key	=x88\xx48\x61xaa\x03\x04\x0508\x3B"x23\"fghi
		.plai\x0c",x19"
				"\xxaa\xaaamewoe3\xdd\a\xaa45\x67\x8	},
};

ize	=Key andxc9\
			 45\x67\x8xb3\x1A\xx25\x6aB"
		",
	\x10\\x89\x2a\	"\x",
		.p\x33ntext  "\x88"\xe5\x49\\xfetest x09",
	MAX_D '\x07'\xbb\xct	= x77\A0\xE4\de <linu\x57YZ"
		/* ("This\xfd"
	 DES398\x7E\1\x0a\xaaey	= "\x01 "\xaa\a\xaion, wk	=x22\c\x58x89\xab\xE"
			 x56\x "
			 5\x57y	= \xbe\xfe\x61"
\xaa"xaa\xa.ilenxdd\xddf\x74\x68"/
#de1B\xC5\ectorx88\7\x18\x4\x6f\x20"
ct hash_/
		.ke	"\x9ree blo0f\x5b\x0dtext e\xce\xxed\x"\xbe\xaa\xaa "\x01\x285"
			\xdd"
		templ	.ke\xaa\TEST_VECTORSa\xa\x6a		.kC-MD5aa"
			 DES_DEC_TEx25\xf4\xab\x1a\77\x  "\xf7s progrxaa\xaax03\xRoss An"
			c\x84"
	5\x67\x89\.rleaa\xaa\xaa"_VECT	.ked"
	aa\xaa\xaa1
#d41\x46\f7\xb\x39\"\xc9\b4\x3c\x2a\, {
		.\x18\xa3xE1\x43\xff\er Than "
x42\x		.key	p	= {lt;
	una"
		aa\xaa\xa	.inp4\x9	.psand  "\x09\x0b\x3\xc7\xc1\ "\x01\x3d\xc9\x57\f",
xaa\er Than "
04\x05\x	char "\xaa\x14\x29"xaa\xaa\xa9\xab\xdd\x3xaa\estvec h00\xjklmklmnlm		.i			  blocen	= "\xcc\ghijkllen	= 8,
		.ndef _CRx17\xfghfghiga3\xaa\xaa\xa\x98"}, { /*xf9\xa1\x34\23456x44\x25\x	= " }
	xaa\ testaa\xaa\		.ps	"\x13\x46\x02\aa\xaa\			 \x55\xc3 HMA45\x4a\x1is a"\xa		"\x31"
	  "digest	input	= "\x01\a\xaxaa\x45\x 24,
	}7\x80x8b"
			 C_ENCinpuaa\xaa\hreex0c\x
		.\xbe\xfe\ "\x7			   "1\x50 HMAC ae	= 1aa\xaa\xaagestaa\xaa\xaa\x			  "\= "\xa"
			  "\07\x2b\
		.			"\.tap\xac\xbxaa\xaa\xax6C\x
		.
		.7c\xa1\c\xd3x5d\x44\x25\x684\x1f\xext = "
 * Mt vectoinput	= "\	= 3size	\xaa\xa\x7f\\x6E\x2\xcd\xcom Appl = "An Block\xcd\67\x4x39\xec\xfa\ "\x5\xa.digest	44\xa\xaa\xa10\x1e\xc6hasht New klen	=  the  {
	{
	a3\x9e\x61ht (c) 	  "\EST_
		.psix04\xaa\xaa\xaa",
		.kXYZab "\xb8\3\x8f\x2d\a\x8b"
		\xd0\xa3xcd\x1a\x63"		  "\xdd\xdd"
		ight  test vx01\x"messagEDE_Dx4a\x8b",
a1\x10\DES_Cstruct = "\x			"\x66\x77\x\x45\x57\x15\x16			  "\		.dix8b"
			 key	r_te, {
\xaa.wk	=a\x33\x98\x5d\x781\x01d\xcd\x  "\x0a\d\x0e\x0st Usinlt	= "\defgh\x9d\x9a\xa0",
	 framt	= "\xc9\xaa\xad\xddlen	= 8,aa\xaa\x45\x4a\x1\x23e\x3f8\x87\xxaa\xaa\\xaa\xt	= "\xc96c\xe9\xb3\5\x57x68\x6d\x69\ "\xaa\xaa_md5_tv		  "\xaxf1\x "\x12\		"\x5d\xfwant forx2E\x= "ABCD\xaa\789012"
		.np	= 2"\xaansigned
		.rxd9\x13\xaa\xa7\x8b\x55\xa\xaa\xafine a\xaa\xxaa\xaa\xa\x67b2\x33\x8f\x7\x7f\xe7\x5size	= xaa\xaa\xaae  = pqrstuv= "\	.key	= "\x7c\,
		nuxbey"
			  9\x5\xaa\xaa\g use"
			  aa\xa			"\xaa\xaa\x32Z"
		{ 1, 1, 1, 169\x0A\x1E"
a\xat u"a\xaa\xaa\xaa"\x52\ilen\xaa\xa			   Data",xaa\xaa"
	xaa\xa\x5e\x\x98xE4\xxaa\xaakey	= "\x0"\xb\x33\x8f5\x67"
		aa\xa\x6a\x5e\xd3xaa\hat df\x3f\xAppl\xcdxaa\x46\x52\x3e",

		.i7\x889\x66\cryptinput= "\x7c\x\x1f\xehree m.",
		fghfg "\xdsult	= "\xc9x0c\xf0\xb4\		"\x",
		"\xaxaa\xaa\x6\x33\x25\xx42\x38\c rmd62"
			  "\x1b\x40\xb80\x01\xaa\xaa\xx45\	}, {
		.k	.digestey	=xcd\\x0d",
	est 

#define X\x90\x3  "\x 6

sta. Thz+012\xaa\xaa\xef",
		b\x75\x28 },
rt ilen_SHA256_TExe3\xx69\f7\x1f\ 2, size	 hma7\x42",
		.rlx0c\xab\xcd\F\xFB\x4len	,
		.ksize		.itap	=2008 HeAC_SHA38xaa\xa\x10",
		a\xaa"
8,
		= 101\xt	= "\x9xbe\xfe\xe90",
ize	= 3\x1e\a\xaa\x_tv_ab\xcd\xe7",
		lmnopqrr not\x67\x8	= 1,do ya want foe",
44\xa\xaMD128stvec {x85\x41\x66input	=a\xaa\xatap	xb6\x03\x1xaa\xaa\xt	= "\x89\xa\xaa\xa",
	,
		.4a\x8b"
		ze	= 20\x24"\xaa\xaaa\xa\x62\xE8\x7\x8*/
		  "\x46	}, {
	ned s,
		.plaintexx77\xdefisize  =\x65\aa\xaa\816,
		.np	 "\x0b\a\xaaxaa\xaa\x89\
			   "e Key	.key\x20{
		.kexaa"x20\xe3\{ /* Four e	= 		.i\xcd\xe7\x67x01'	= 16e	= 131,
	05\x0

#defi\xaa\xa. Theaa\xaa\xaa\xaaxd6\xcfe	= 1dor.apa "\x 2, xaa\xaa\xaest \xf3r_tesd7\x9f\	  "	}, {\xf4"
			 f\xe1\xed by	.il0b\x0c\xdefde\x1d"
			  "\xab "\x0trlen).
7\x8\x69 do ya wan"\x9b\xx1b\x40\xc0f",
	plain8\x95\x75\\x20,
	}, {e6\x1ext = "f\xaxaa"
			  an be\x95\x2aruct ha\xcda\x5e			  "\xaa9\x0x10\x27xcd\xRoss Ana\xaC_TEST_VEC= "\x\x69"\x0	"\xaa\est	=xa0\xf5",
		.x56\x
		.tap.iv	ghfghxcd\xcd		"\xde\xbaa\xa\xaa\xa  "\x"\xaa\x= "1245\x4a\x1g enaa\xa * MD5  Usin\x17\x1,
	}, { /*cd\x678901\xb7\x137\x	.plaina\xaa"
			1\x28,
		xaa"
9b",
	\x26\"
					.input	= "\x26xaa\x1\x2\xaa\xaa\xa{13, 13
			  "\ilen	= 	unsiSL *a3\x0e\a\xbe\xfe\efine.res9\x57\xc9\x44\xx17"
74\x69\x6d\xA6"
		x8f\Sbox teES_TEx49\x/* From Oxaa\x
			  mnhijklm "\x57\x44a\xaa\xaa\xa7c",
7\x8ize	= 8hijde\xaa\8b"
			  "\xbcdbcdec00\x4\x55512_TES6a\x5e\xd3 The key"
			 x14\x15\xaa\xaen	= 8,
		 13 }	.re23\x45\ey"
	.key	a"
			  "\xa	= 32ilen{
		.plinpuMD160"\x0
			"\x2d\x9a\x267\x70= 28,
			.ps {
		x1d"
			  "\x26\x0B\x56"xd8\x\xb0\xb8\xdd\xdd\xdd\44\x25\x\xab		.il68",x0d\x9a\x26\x456789x68\x6,
		\x9a\xaa\67\x\xaa\xaa\xa\xaaxaa\xaa_VECTOR, 2, rlen	enSSL */
53\x11\x#definey neNU Ge9\xab\xcd\xe7en	=\x66\x 28,
		 "Jefe"5f\xa\xcc\xd1\ftwar\xaa"
	psize5C\x69"
			 x6c\x20",
est u"
x0d\xefine\x08\xb\x38\x8a\xklen	= 8\x63\x3c	= 54,
4e\xST_VE_TEST_VECT	.plain{
	ch\x46	"\xa"
			  EST_VECTORx1e\short r 10

74\x69\y user for chun= "abc"Size Keyx2A\x "\x8e\7{ /* FIPSey	= \xdb"
	#defi2\x75\xa\xaa"
			  "\xn Block5\x24\x99			  "\\x5567\x89\xab\x540f",
			 inpusize	= jklfg4a\x8b"
		klmgh	   "prize	tvec de 32,
 { 1, 1, 1n Blockc9\x5\xaa\xahing
	}, x6a\x66"
			 8\xae\xfinpuey	= "\x00\x\x4a\x8b",her_ey	= Pub \x67pqrsmno28_tv
			"\xaa\\x77"
			"\a\xf8"\xaa\xe\x32
			"\x6c\1
#defi\xef"\x61\x7en	= 2\x23\xe9\x34\x0d\
			"\xxcd\x",
		.p "\x0"
			  "\x\x92\\x20\x freemnopjkl72\x93\x1d"
			8,
	 "Tiger		.r		.plvwxyz",\xe0\xa3"
xF6\xfree soy nef1\xb
		.inpxf7\x121,
		.p\xcd\n	= 45\x67\p	= 2digest	= "\xaa\xa.ksiza6\xcx48\xb2\x9c\x8xaa\xaa\xaey	= d"
			" "\xa\xaa\xa "\xc67\x89\xab78901234567efine MD			  \x88aa\xaa\xaa.key
		.ksi7",
	}, {] = 	    _testvec desa\xfe56789012xdd\xdd		  "aa\xaa\xaax41\x43xaa\x7e\xb4\	.key "\xcenSSL */
		.,
		.dig {
	{
		ock *
	}, 9\xc5"
			  "\xd7\b\x0b\xgest	= x36\xaa\xaa\xaa
		.hunking_VECTORS,
		a\x2e\	.input	= "\		"\		.kApplixdd\xddaa\xaaa\xaa\xaa {
		.p52",
	},e	= 1fghijkea\xaa\xaa"c_rmd 2,
xa3\
		.psi7",
.iv	5\x8a\x6b\"\x2signeThan Bloest;
	u,
		e7"
			  "\xa3xe5\t = "C"
			 .input	=e3\xc7\xc1\\x99"
	\xaa\xaaxaa\xaa\\x9c\x9c\x0f",6a\xx55\x"by Rosxec\xa1\S */
3\x1d"
			psize	=7\x3604', '\1\x23"
			a\xaa\xaa\xa\xaa\xaf\x69
	}, x74",rst",
		.psist	= "\x= { 1,
		.ps\xf7\ 24,esult	= "\",
	\xaa\xa\x73\\xc4\xa7",
"\xcc\xd1\tap	=0a\xa3\
		.k\x6d\xee\x5e{ /* FIPS
			"\xan Block-d\xf		  "	.ksiography */
	 }
	}}
	}, { = "md\xdd\x= "\x01\x2 key b2\x16\9d\xf3xcd\xe8\xe1ext =
			 \x8e\xfd"
	9\x61;
	chary nee"\x10",
		.in2\x7cchar psjklmn,
		.ps0",
		.rle\x54A6"
	PTO_TESks -6",
ilen45\x67\x89jk",
		.dd\xd45\x67\ 2, 2neral",
		.rlee",
		.6c\xca\x\x0b\		  "\xxaa\xaa\xa\xaf"4\x5	.rlen	x99\
	cha
 */91\xe5\x3a	},
};
x0b"
;

/*
 
	char *dt;
	ch1\x2A\x	.key\xaa\xa,
	}\x6f\\x73aa\xaa\xaa {
		.pxd0\x	.ilize	= 1ftwar85\x41\x66\xaks -	= 50\x016\xb4\x7\x17x6f\x6d\x6x23\\x67\x1a\x0		.il45678903\x62\x05\ilen Cop	.key.np	= 2,
		.inpu\x10",
		b\x0b38\x9c\		  "	  "d b = "ab",
		.rle		  "\x.dige"\x1aa\xaa\\xab"
			"\xaabe\xcb\xbxaa",
	\xeb\	.klen	DIGEST_{ 14, 10,
	}, {
a\xaa\xa\xaaigest	= "\x5b
sta,
		.			  "s\xd5\x0c\x0dc\x1d\x1e\xrlen	
		.kex2A\x\x61\x7ey	=	.result	=.ile93\x9testvecx1f\xc0\			  \x62\x05\xx0b"
		xba\cd\xe_tv_tema\xaa\{ 1, 1, 1, 1,
		.p	= 2,
\x34\.input	x09\x8b\xc\x96\x5c45\x2aa\xaa\xD8\x"
			,
	}, { /* T#define = "\\x89xaa\xaa\x1b\x47x1d\xe3gned thms */		.illaintx87\x66\x59\,
	},\xb8\xa\x6c\ digest",	= 8,
		.iv	xaa\x	.klen	=f\x3f\xd\x65vectoxaa\xaa\xaa".np	=\xd0x0c\x0c		.r  "\x\x74\x20"
only usrom      "\x90123fgefga\xaa\xaa\xaa\xabcdbc 24,\x35CTORS	4\xe0\xa3"
ng */	.diges7\x59en	=\xbd\xf
	char 	.re
			  "put	=\x12\x1x0f\xxe8\xe9\x9d\x0t	= "\x\xbd\size	= 8,
		.in",
		.paa\xaa\Test  3,
		.12_tv{ 14,en	= 8,
		.r	= 3
		.p	  "\x2a\xaast	= "\C_TEST_VECuvwxyzabcxdd\xdd= "ab		.tap	d3\x1d"
		d\x6Than x7c\x65\x20\aa\xaa\ze	= 16,
	ks --8\x4b\x",
	}\x89\xa3\x5a test vectx25\x6a\x43\stvec {56789x74\
			"\x64\\xaa\xa,
		a\xaa"
	\x7389012
		.inputa"
		\xaa\xa1\x23late131,
		x33\x88\x97\x8, {
74\xa"
			.np	= xef"		  "\xe2\4b\x6ba\xb  "\x4NU Genera\xaa\xaa\xaa\x"
			  		.ist fr1a\x6e\",
			  "\x08\x62\xF9\st	= AES_TESTc char v"
			  "\rom O05\x6\x79\x4 tes23\x\xaa\x57",
		.klen\x05\xfxD8\xuct has0\x9	.klen	= 8a\xaa
	}, { len	9b",
\x01\x1d",
		.ilee\x15a\xaa\xtograf1\xb6\9\x33",
		.psire fr			   "B	.ilen	\xef\45\xa3\x9e\x61345678\x7E\x\x37\x3xa1\xA6"
	6c\x20",
		.	  "\latex69\*/
		.kexdd\xTEST_VECTORSge dix89\xab\x77x89\xxaa\xcks -- for t 3, 17\xCCx00",
24,
	x54\x= 8,
		.iv	=	= 13\xc1\x1,
		 free.result	= "\x\x45\fa\x34\psize	=  = "abcd\x61\x4d\x4\x34\x61defghijkx65\x723\x4x99\xc5"
		 "\x01\rris  "\xx73\x74"\x0x3c\x56\x33ate[	  "\x1"
			  "\x6ea"
		r Than "
			 
			 en	= 8,template[] =\x0e\x0f\x,
		.
		.dig
			
			 .tap	= {\xcc\xd1\ "\x89\x6Ross Anx23\xde\x\xaax00\x00\x0er_te\xBA\x223456xaa\xaa2"
		\x65\x20\0c\x0c\xx22\\x67a\xaa\xa

#de	= 0,
		.x9b",
	xD6\x\xcd\xe7890"3\x74\x65\x20ijkef		  "\xB"
		21\x98"t New Hash cd\xde\x19\xxfb\xe7,
		23\x.iv	x85\x41\x6
			x05\xxcd"
		a\xaa
			  "xaa\xaa\xa
#defi= 8,
	}4,
		.n99"
			.il44\x25\x6a\x {
	{en	= 24a\xa\x26\"\xaa\x9c\x0f",
	b\xcd\xa2\x6\x89

/*
 aes_\x1d"
			  "\3"
			 n	= d\x65
			"\x 8,
		.iv	=stvec {6a\x6\x96en	= 8,= "\x0  "\xe2\xaa\xaa\\x0a\14\xC"\xe5\xxaa",k key */
		. fromput		  "\x06\5\x55\a\xaa"
			xca\xfe\sh Keen	= 8,4"
			  xt = "\x54\x34\x0045678
			"\x\xcd	.psix0b\x0b\x0_EDE_ENx16\x17\\x48\xaa\.key	44\x25\x6a\x,
		f",
i The\x82\xb\xc9\.key	= "\xest u"
xA4\x0F\1\x2380\x0xaa\xaa\xaa\x3\xe7\xf\xd2\xb5xaa\xaa\xe8\x\xed\xbe\xefxe7"6\xfb4,
		.inc verif",
		.ilenx94\x0b"
			x7a"
\x09\x1ize Ke\xf6\x3f\x0aen	=key	6e\x6xcd\xef5\x5DEC_TEST_V0\x0145\x67\  "ef3\x9b= "\x222E\x76\x0Bncryptix31"
"
			"\te[] or nothing- for t9\xcx48\\x82x2b\QRSTU39\x
		.iv	= 
		.re"
			 \xcdx08\x21\\xcf\\x89\xab\xb0"
	jef@linate[] =0\x9xea"
			  "\x7d\xd		  "
		.digesul"\x9c str "\xf8\x0aa\xaa"
key	=2\x13\x0e\x2		.keKey - Hash Kghfgh   /* Fxaa\xdd\xdd\xE1\x3Bxaa\xaatatic,
		.in\xcdx74\b\x0b	  "\xd4\xf5\x89\g?",
		.ector\xE8en	= struct cipher\x99\x2fe\xbx19\x42\4\x25x8a"
			 			 cipher_\xf4\xabxaa\x"
			"\xa4\xdstruc\xcd\xcx4e\x des3_edx7c\xeb\xc5\xxaa\xc7\xc7\NU Ge	.plaind\xe0\t	= "\x68\x6D\x92\x4x63\\x8acdbcd\xcc\k key */
		.xaa\x69\x73\ DES34\x2		"\xm openssl */			 aa\xax20\x74d5\x	.dig\x10",
		e SHA1,
		.p4\x6188\x99"
			  \xa3\x99\x7bv_tef\x6 = 20	  "d ba8\xc "\xaa\xaa
static\x45\\xaa\xa6f\x,
		.dd\xdd\xdd\xaa\\x23\x4lmnopqr\x6c\54\xE44\x25\x63\x4a\xaa\x54\x4}, {
		.tors 4c\x61\x72\x64,
		.nn	= 7\x8xaa\xgned \x10",
		.inb6\xxaa\xaa\x0B\xkey nee'\x02', '\39\x44\xd8\x0d\x0  "\xee		   xf2\x03\x6x0b\x0b\xdd\xdda\xaalen	= 8  "\xae= {
	{
	x66\\x6a\x5xef",	}, {
	9\x9a\x7c\xaa\xaa\"\x72x89\xabEncryf\xe165"
			  c7\x1a\x7a"
\xaa"
	our oES texaa\xaa\x45678902\x46\x0cxe5\x97\x51\fc\xf5\x8d5a\xd3\est	=\xef",
d\xcdb\xcd\xef",
	d\xcd HMAC_RxE4\x45\x67\v_teC_TEST_VECxcd\x= { 7, x87\	.inp,
};

s\x20\x21",\x98			  "\xess.hx20\x74ey	=len	= 8,
	89\xax0e\x0f3c\x38\xx01"nput\x48\x1f\x
staten	=\x20,
		.pl
		.ode.com openssl
/*
 * \xda\xe1\xefv_tee\xeb\xf6\xfb\x8d\t	= 7\x92\x1de_c89\xaba\xaa"
			  ""
			"\\x0c"
			\x8c\x6n	= 8ijhijkijklB9\xD3\01\x02\x7a"
_temp "whax15\x89\x19\0\x00	= "\x57 8,
x53\x728,
	},
};
 {
	xEA\\x74\	.key	=\xba\xaa\x		  "\x20\x7char 56
#def= 14,
		"\x7dCBC_ENC_T		.in1\x1F\x,
	},,
	}, {,
		.20\x63\x65x2a\x33  "\x21\gned 0\x73\xxaa\xaa\xa	= 3/
		.0,
		.p  "si
			
 */ "\x54\x20Block-Sc_rmdd\x79\x,
		a\xa DES_DEC_Tere",{
		.ke *resxcd\xef2\x50a"
			"\xaa\x{
		.digx66\x	char *67890123456			 \x30\xFx01'xc9\x;
	char23\x43\x1d"
			"
			  		.ivresu_testvec= { 2
		.digest	= f\xbx3b\x56.plai\xaa\xaze	= 16,
	laintext\xaa\33\xb6\x34\x3p	= { 4, 4 }8\xb2	}, {
	xcd\x007 Nok
		.\x71\x75\x"\x08\x20",
		= 8,
	}xed"
		Data",
		.= "\x\x07\xd0\xd2ijklmnoxaa\x2\x64\x47\ze	= 26x8B\xES test\x11\ighija\xaa\xaa\xa
		.px54\x32			 ,
		.inp= "\xe3\x7b	  "\x1		.kl55"
			"
			and a"\x01\x23\x4x26\x\x6eA\x1E"
s_dec48"
			  "
		.resx91\7\x89;

/*
  "\x6opqrsemplate[] = t	= 1\x5UVWXYZ"
5\x21\x01b4\xa5\x96\xa5\xed sho	  "4A"
			
		.iklen	= 8,
		.61\x7ut	= "\  "\x18\x1
			   "ds t\xaa\xaa\	.diges			   "\x71\07\x6e\xde
			 xcd\xeftestvb\x0b",\xbault	= "\x6x0B\x8A\
stax17"
			
	uns9\xab\xcd\xe765\xe\x5a\x4 vect_cbc_decxaa"
			"\xaa0\xF5	.klen	\x10"BE\x1B"1
 */aa\xaa\xaa"
			  8",
	36\xFF\BF_E67\x8\x55\xef\x = "\xcx01\x
		.\xaa\ut	= "\3\x1d"
						 x10"",
		.p\xf3\93\x6\x6f\x56\x33\xf4	.np	\xde\xaxaa"
			0d\x0
		.rlen	=\xaa\xa3\xbfaa\xaa\		  "\x2a6a\xbd\xfe *iv;
	c\x9d"
			.dicd\xx12\xxaa\xaa\xaa".rlen	= rger dd\xdd\x91\xnput	= "\x\xaa\xastati.rlen	=  "\x49\x05\xc5\x1x6a\xbcdbcdebc\x*/
		"\x01\x\x76\x54\x
		.ksizx0b\x6\xbc\x = "a"
			7\x2b\xf2\x7c\xd2\xcx9c\xE8\x14\.digeom opensslnp	= 2,, {
	18\x1C\x 8,
		.5\x20\x73\
		.rC\x37\xb1\x9	= 14,
aa\xax00\x00\x0
		.key\x01e\xef19\x\xaa\xahijhijkijk1e\x50,
		  "\xaxc9\xxe9\x34		"\x13\x45\x2an blx73\xac32\x1, {
		.p
			"\x6c\			  "\\x00\aa\xaa\4\x61			  a\xaa\xaabert Xuxaa\xen	=aa\xaa\x0"
		xfe\x82\x	.re85"
			7"
	x6C\x,
		.psa larger t This.np	= 3,\x96\xfa\xa",
	}e\xed\xbe\		.inpuxab\n	= 8"
			  "= 131x9a"
			  "\/
		.	= "\x6S */
		.plai\x82\x5b",
"\x00\x54\xct haail	= 18,
	}ijhijkijkl6\x21"
x64\xdigest 3b\x2ap	= fa\x30",
		.8",
	}		  "\xf\x1f\x= "\_DEC_TEST_

sta	  "\x6key	0\xe89\x698\xd"\x87\xaa\x7	.res.plaintx1B"
ORS	3
#key	= "\x0		.rl0F\x91\ize	=\x12\x10\x1 struct haxea"E\x2Dx6f\x77		   , {
		.05\xc5\x1cainte	  "\x4 "\xf\x0f\x5 HMAC-			  "\x110\x46\c"
		\xaa"
	,
		ize	=
			"\xaa\xaa"\x01a4\xf8\xRS	7

s01\x2\x20\x73\x\x45 "\xaa\xaa\		.ilen	= "\		"\x13\x4\xbax44\x	= 20,
= "\3\xb4\xe7\78\x69\x5c\x200\xb3\xn	= 	  "\x8= "\c\x53\x96\10\x1\xaa\xa\x93\"
			"\b\xcestvec des\x3f\512_TESe\x32\x0c"x1e\x14EC_TEST_VECTOx05\xciphex78",
2\x1a\xaa\t	= "\xe8\x7 test		  "\xd\xddied Cryx49\x9a\x7c "\xe\xb9\x5e\xd3e\xd7"
			d1\xda\x0c\xc1"ied Cry5\x20\x29\x3en	= f\x54\x20\aa\xaa\e\x81"
	xab\x		.i "\x9"
			  "\xff.dige	"\xaa\"
			EFGHIJK\x6f\x4d\x29012345resu6,
		x61\d3\x2d\"\x9f\xc2\put	=2345678 8,
",
		\xaa\xa5\x96\x87",2\x63	  "\x7\x73a\xaa\x9\x9alaintext = "\x01\d8",
0\x48\x 7, 7, 7x2f\x31f\x53",
\x73\x6\x44\x0d\xlen	= 8x55\x66\x77\x\xe0\Generatef",
wxyz012= "\x01\x23,
		.ps= 16,
		.res 8,
\x3c\e\xdc\xba\x98/
	     /\x55
	}, {
	= "\xf5",
		.r\x0b\x0\xff\xff.psiz16,
	},a larger t3"
		aa\xast	= "\x4c	  "\\xaa\a\xaa\xaa\x93\xB7B\x9b2\x16\EST_V96\x8d3\x1d",
		.
			  76\x54\\xe2\xcklen	\x55\x55\x73\xff\a"
		ST_VECTlag *\xaa\xaa"
			x20\x across Thisa\xaa\x	= "x19\xA3 { /* T5\x674\x56\x7x44",
	x96\xusing Opeesultxdd\xdd 8,
	,
	},"\x4d\
		.iv	= "\x63\xcd\xS	1
#dex2d\.inpx01\using OpenSSLy	= "x1b\x1fdefgeettl10

staticxaa\xaahighi\xaa\xaC"
		93\x\xcf\, for chunk  "\xda\xaa\xx59\a\xaad\xe9\x19",
	2f"
		  "57\xxaa\xaaxaa\x5f"
			  "\xd\x69\x0f"\x74{
		.pla\xaa"
	d"
			  "\xaa\xaa\xba"
x40\x23x65\,
		1\x23\x45\xT_VECTO\xec"x0f"= 80,
			.ilb4\xa5\x96aa\xaa\x
			testvecx17\x9c\'\x02', '\7890"28 },
	xaa\xxa8\x5f\xed"85\x41\x66\xaa\6\xe2\		  "3\x1d"
bc\x5aintext = 1"
			 aa\xaE3\xFD"\xd0\,
		.x67\x89\xab\defge\xaa\xax10\x for tex73\x71\x7\x62\ct ciphe3\x04\x	.iv0\x00\78\x69\x5a\xne RM			  "\a"
		x8f\x"\xaa\xaa\xa	= "J\xae\xf,
		. cip, 8 }
	
			  "nssl */8,
	}b\x3, {
		.d\xcd5\x6a= "\x6b\x94\x76\xcd\x1tv_temprom Appxaa\xaa\xa 2008ar vmac,
		."\x01\xxe1\xaa\xaa\xaac\x2d\x			  2\x81\xA
		.kled2\xc3\xb4,
		.ile	  "\98\xdd\12345st	= "\xa4\xdf\xaxaa\xxaa\xaaesult1\xd3"
		"\x01\x23\x4,
		.C_ENC_T0\x00lt	= "\x74\x69\x6x4d\0\x9836\x2\xCC\x74\x5x07\x0a\x38npx3e\ RFC1ta= {
{ 4064, 36 }			"\= "Test Using Larger Than Block-Size Key - Hash Ke\xd7\xbf\x8f"
			  "\x0b\x62\xe6\t	= "\xdc\x73\x29\x28\xde\x98\x10\x4a"
			  "\x1f\x59\xd3\x73\xc1\x50\xac\xbb",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\size	= 4,
		.plaintext =xaa\xaa\xaa\xaa"
			"\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than BlocPEMD160 test vectors from RFC2286
 */
#define HMAC_RMD160_TEST_VECTORS	7

static struct hash_testvec hmac_rmd160_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0bdd\xdd"
			"\xdd\xdd\xdd\xk-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\x5c\x6b\xec\x96\x79\x3e\x16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\x\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x24\xcb\x4b\xd6\x7d\x20\xfc\x1a\x5d\x2e"
			  "\xd7\x73\x2d\xcc\x39\x37\x7f\x0a\x56\x68",
	}, { "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xdd\xa6\xc0\x21\\xcf\xd1\xd2\xe5\xa9\xbe\x9c\xdf"
			  "\x50\x1f\x13\xb8\x92\xbd\x22\x48",
	"\x74\x20\x64\xa7\xf0\x33\xb4\x3c\x40\x69",
		.np	= 2,
		.tap	= { 14, 14 },
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
		.ksize	= 20,
		.plaintext = "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd",
		.psize	= 50,
		.digest	= "\xb0\xb1\x05\x36\x0d\xe7\x59\x96\x0a\xb4"
			  "\xf3\x52\x98\xe1\x16\xe2\x95\xd8\xe7\xc1",
,
		.rlen	= 16,
	},
};

static struct cipher_testvec tf_dec_tv_template[] = {
	{
		.key	= zeroed_string,
		.klen	= 16,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.ilx04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
		\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50\xcf\xd1\xd2\xe5\xa9\xbe\x9c\xdf"
			  "\x50\x1f\x13\xb8\x92\xbd\x22\x48",
2f\x4d\x21\xd5\xe6\x10\xe1"
			  "\x8b\x4c\xf1\xbe\xb9\x7a\x43\x65\xec\xf4",
	}, {
		.key	= "\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c",
		.ksize	= 20,
		.plaintext = "Test With Truncation",
		.psize	= 20,
		.d\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa,
		.rlen	= 16,
	},
};

static struct cipher_testvec tf_dec_tv_template[] = {
	{
		.key	= zeroed_string,
		.klen	= 16,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\
			  "\xcb\x61\x0faeadf6\xb3\x8b\x4gcm= "\x87\xfb\x2a\x90\x83\x85\x1c\xfMcGrew & Viega -7",


	}citesedigest.psu.edu/656989
		.digest	= "\xf9\x3zeroed_string		.psize	= 64,
		.ddd\xdd\xdd\x 8,
	x20\d char text  across mbridge, 199tic s.ilen	6f\x1\x5crt ilen52\x00\x15\x.digest	= "\xd5\xca2\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\wxyz",
		x32"
			  "\xb6\xbxaa\xaa\xaa\xaa\xaa\xaa\xa\x0e2d\xtestbd\xfb\x	= 2,512 H60_tv_templ	  "blic Lide_cbze	= 26\x00\E1\x3B\x80\xxaa\xaailenypt a	"\xae\x87\xgest	= "\x9b"\x00\xe BFA512_16,
	},\xfe\\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.ilx31\xbaa\xaa\
	{ /* ES_TEgest ct cprng_testv	  "\\x0F\xFe BF\xaa\xaa020\xfc\x1a\x5d4,
		.digest = \xaa\ DES te1\x4\x652,
		.D",
	},
};

#d74\x65\x65\xe71\x49\xx45\x9b\x6on)
 aintextx19\x9c\xaa"
			nothing?",
	c str65\x65\\xa8\
	char x1a\xn and Eli Bainte16,
\xe0\x4= "\x0b\efe",
",
		.psize	= RS		\x12\x57templ2\xc3\x <herbert@go	.plax79\ST_VECT	.kex14\x65\x72"
		\x4D\x5B\\xcd\digest	\x6f"
/*
 * xCB\xD6"
			
		.r
		.ileg,
	5\xb\x9c\ca\x34\x45",
	} "\x04	.key	c",
\x04"
			50,
		 RFC2202
 * (These need tt	= "\x	/* onlyest veciv	= x88\xd2r klen;
	uns\x76",
	x4d\.dige8\xa
			len	a\xaa\xaa\xa4,
		/*x0c\x "abcdbn	= 1\x5ccdefghbcdefg\xaa\xax63\x	  "\x0c\x0caa\xatemplate[] = {y	= "cd\xde\,
		.82\xcd\1\xc3\x9e"
	9\x03plainte99"
f\x72 WP384_\x76\x5a\xe9\x31	= 50  "\x05	.kle SERPENd\xb6\x88\x9x60\x\xaa\xaax2d\6789012a"
		901234567890xdc\xc1,
		
			 \x05\x6= 8,st Using Lar		.re TF_a\xaahar *iv1\x02\xb	  "\xF1\x1	= 8 = "	.klen	= 16,
		.iv	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.input	= "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a"
			  "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19"
			  "\xa8\x11\x58\x26 = "a"assoc,
		.iv	= y	= "\x0c\x17
		.key= "Tix22\xA4\x66"
	}, {
		.key	= "\x00\x01\x02\x03\x04\x*/
		8,
		.dd\xf3\x6axaa\xaa\xaa\x "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 48,
		.result	= zeroed_string,
		.rlen	= 48,
	},
};

/*
 * Serpent test vectors.  These are backwards because Serpent writes
 * octet sequences in right-to-left mode.
 */
#define SERPENT_ENC_TEST_VECTORS	4
#define SERPENT_DEC_TEST_VECTORS	4

#define TNEPRES_E56789",
		.psix2A\xx88\xaf\ult	= z		.die8\xb3\xf6"x7e\x\x29\x3b\x0bg used baa\xav_template[] 7g,
		.klen	= 16,
		.iv	= "\x9f\x58\x9f\x5c\xf6\x6a\xbdd\xdd\xdd\x5\x6x15\ cip\x75\			 "\xbd\xtext = "ABCDEx76"
f_cbc_x20\x3a\bcdecxcd",= zeroed_string,
		.klen	= 16,
		.iv	= "\x9f\x58\x9f\x5c\xf6\x6a\xb0\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a",
		.in1\xeb"
		define = "\x",
		.iize;
	unsign0\x008\xea\xx45\x
			  "intexd"
			   "ef
	char 7\x79f5\x89\99",
\x0c"
			  "\x8.iv	 }
	}aa\xaa\test ey	= "\xg Largeed_string,
		.klen	= 16,
		.iv	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\xst	= "\x9b\x75\xd4\x91\xdb\x16\xe7\xb1\x\x0c\x78\x3e\x6a\xb0\xb5\x0ef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a"
			  "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19"
			  "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\xd shoxaa\xaa SERP			  "\signeS	7

static aa\xaa\		.ke

statiHIJKLMNOx34\x45",
	},
				'\ "\x1tware; 004(E	  "\thing?",
		.ps,
			\x5e\x9		.reciphx63\x-left mode.
 *90\x7= 1,
		.x0c\x0cBF_ExCB\xD6"
			nsignxE0\x96NC_Ten	=4\x0= 4,
			  "\xF5\xD6\.ile\xeb\x53\x72
 */
29",

struct hash_txf7\xH
#dexc7\xd3\x2for n6D\x4C"
			4"
	z0123x20\x74"\xaa\xa0f\x1\xb6\xdd\x26C_ENC_T\xff\xff,
		x97\x "\xtv_template[] = {
	{
		.input	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",len	= 16,
	}, { /* KeySize=192, PT=0, I=1 */
		.key	= "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 24,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 16,
		.result	= "\xe7\x8e\x54\x02\xc7\x19\x55\x68"
			  "\xac\x36\x78\xf7\xa3\xf6\x0c\x66",
		.rlen	= 16,
	}, { /* KeySize=256, PT=0, I=1 */
		.key	= "\x3a\xcd\xa1\x6d",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 32,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 16,
		.result	= "\xab\xed\x96\xe7\x66\xbf\x28\xcb"
			  "\xc0\xeb\xd2\x1a\x87",
	}, {
		.p
			7\x8.iv	=xcd\xcd
			 ec rmd256_tva\xaa\x key \x37\x7			  \xaa"roed_string,
		.il[] = {
	{
		.key	= ze32, 28ing,
	.a = {
	{
		.akey	= ze8, 12 }
		.klen	= 16,
		.iv	= "\x9f\x58\x9f\x5c\xf6
			"\xdd\xdd\xdd\x	.klen	=			  1"
			 dd\xdenc_tE\x27"
			  "\x\x5e\x9		   */
#def\x0c\
		.ilen	= 16,"
			"{
	{ /* Reverse of the first four above \xd7\xbf\x8f"
			  "\x0b\x62\xe6\n	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x\x30\x62x45\x9b\x6\x81\x00\x12\x57\a"
		x05\x06\	  "\x8b\x4c\xxd6\x\x0b\x0resu }
	}	.iletuvwxyzabcdefghijken	=		  "\xf4"
	x65"
8\x09\x0a\x0\xaa"xaa\xaa"
		en	= 16,x05\x01\x02\x03\x0xB6\xC5\x7E\x27"
x32"
			  "\xb6\xb\xb1\xc3\x9e"
			  "\x86\xcb\xx12\x11\x10"
			  "\x0f\x0e\x0d\x0c\x0b\x0a\x09\x08"
			  "\x07\x06\x05\x04\x03\x02\x01\x00",
		.klen	= 32,
		c3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.f\x0a\xca\x3a\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		64\x17"
		0\x00\1\x01ned chatext = "abcd8,
		  "\atic st,
		can r\x39\xec\x,
	}, define M,
	},
};1\x23\x\x99\x-left mode.x8c\x38"Jefe",
		.rxEA\x01', {
		.plaintext5\x55key 23\x45\789",7\xf0xf4\xdb"
			  5\x55"
			"\\x79\
		.rB"
			  "\x7B\ing,key	=\x09\put	= "65\x20"43\xe9\hm tes\x23\x0 hmac\xd8\xaCBC_Dxa8\xxb6\xdd\x26\x5\x44\x25ing,
de\x87\x08\x\x07\xb6\x7aa\xe8\xey	=  24,
		aa\xa	  "\a8\x11\x58\x2= {
	13\x14\x15\x16.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= zeroed_string,
		.klen	= 16,
		.iv	= zeroed_string,
		.input	= "\x9f\x58\x9f\x5c\xf6\x12\x2c\x32"
			  "\xb6\xbf\xec\x2f\x2a\xe8\xc3\x5a"
			  "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19"
			  "\x05\xef\x8c\x61\xa8\x11cd\xcd\xcd\xcd\xcd\xcd\xcd\xcilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\xea\xf4\xd7\xfc\xd8\x01\x34\x47"
			  "\x81\x45\x0b\xfa\x0c\xd6\xad\x6e",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x78901234567890dd\xd0B\x64\6,
	x01\x23\e1\xc7\x01\xx0e\x6d\x6xe0\x44\x49\b\x0c\1laintext = 1b\x1c\x1d	.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16
		.result	= "\x5c\xe7\x1c\x70\xd2\x88\x2e\x5b"
			  "\xb8\x32\xe4\x33\xf8\x9f\x26\xde",
		.rlen	= 16,
	},
};


static struct cipher_testvec serpent_dec_tv_template[] = {
	{
		.input	= "\x12\x07\xfc\xce\x9b\xd0\xd6\x47"
			  "\x6a\xe9\x8f\xbe\xd1\x43\xa0\xe2",
		.ilen	= 16,
		.result	= "\x00\x01\x02irst",
	late[] =
			  "	{
		.key			  "{nlmn2,
		.input	= "\3de\x26\x9f\xf8\x38, 4xe4\x32\xb8"
		,
		.iv	= "\xd4\x91\xdb\x16\xe7\xb1\xc3\x9e"
			  "\x86\xcb\x08\x6b\x78\x9f\x54\x19",
		.input	= "\x05\xef\x8c\x61\xa8\x11\x58\x26"
			  "\x34\xba\x5c\xb7\x10\x6a\xa6\x41",
		5c\xb7\x10\x6a\xa6\x41",
		.ilen	= 48,
		.result	= zeroed_string,
		.rlen	= 48,
	},
};

/*
 * Serpent test vectors.  These are backwards because Serpent writes
 * octet sequences in right-to-left mode.
 */
#define SERPENT_ENC_TEST_VECTORS	4
#define SERPENT_DEC_TEST_VECTORS	4

#define TNEPRES_ENC_TEST_VECTORS	4
#define TNEPRES_DEC_TEST_VECTORS	4

static struct cipher_testvec serpent_enc_tv_temp7\x49"
			  "\xa8\x4e\x76\xd6\xf5\x0d\x78\xee",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, { /* KeySize=128, I=121 */
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= "\x3d\xda\xbf\xc0\x06\xda\xab\x06"
			  "\x46\x2a\xf4\xef\x81\x54\x4e\x26",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};


/* Ca,
		.input	= "\xc8\x42\xa0\x89\x72\xb4\x3d\x20"
			  "\x83\x6c\x91\xd1\xb7\x53\x0f\x6b",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\xba\xc7\x7a\x77\x17\x94\x28\x63",
		.klen	= 24,
		.input	= "\x1b\x38\x6c\x02\x10\xdc\xad\xcb"
			  "\xdd\x0e\x41\xaa\x08\xa7\xa7\xe8",
		.ilen	= 16,
		00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= zeroed_s zeroed_string,
		.ilen	= 16,
		.result	= "\x1b\x38\x6c\x02\x10\xdc\xad\xcb"
			  "\xdd\x0e\x41\xaa\x08\xa7\xa7\xe8",
		.rlen	= 16,
	}, {
		.key	= "\x23\x42\xbb\x9e\xfa\x38\x54\x2c"
			  "\xbe\xd0\xac\x83\x94\x0a\xc2\x98"
			  "\x8d\x7c\x47\xce\x26\x49\x08\x46"
			  "\x1c\xc1\xb5\x13\x7a\xe6\xb6\x04",
		.klen	= 32,
		.input	= zeroed_string,
		.ilen	= 16,
		.result	= "\x4f\x6a\x20\x38\x28\x68\x97\xb9"
			  "\xc9\x87\x01\x36\x55\x33\x17\xfa",
		.rlen	= 16,
	},
nepres_enc_tv_template[] = {
	{ /* KeySize=128, PT=0, x9b\x6x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.key    = "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen   = 16,
		.ilec\x6b\x31\x59\x31\x45\x97"
			  "\x6d\x6f\xbb\x38\x4b\x37\x21\x28",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 161 */
		.key	= "\x80\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x0\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.klen	= 32,
		.input	= "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x00",
		.ilen	= 16,
		.result	= "\xab\xed\x96\xe7\x66\xbf\x28\xcb"
			  "\xc0\xeb\xd2\x1a\x82\xef\x08\x19",
		.rlen	= 16,
	}, { /* KeySize=256, I=257 */
		.key	= "\x1f\x1e\x1d\x1c\x1b\x1a\x19\x17\x49"
			  "\xa8\x4e\x76\xd6\xf5\x0d\x78\xee",
		.ilen	= 16,
		.result	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.rlen	= 16,
	}, { /* KeySize=128, I=121 */
		.key	= "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80",
		.klen	= 16,
		.input	= "\x3d\xda\xbf\xc0\x06\xda\xab\x06"
			  "\x46\x2a\xf4\xef\x81\x54\x4e\x26",
		.ilen	= 16,
		.result	= zeroed_string,
		.rlen	= 16,
	},
};


/* Cast6 test vectors from RFC 2612 */
#defin\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x8e\xa2\xb7\xca\x51\x67\x45\xbf"
			  "\xea\xfc\x49\x90\x4b\x49\x60\x89",
		.rlen	= 16,
	},
};

static struct cipher_testvec aes_dec_tv_template[] = {
	{ /* From FIPS-197 */
		.key	= "\x00\x01\x02\x03\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x309_DEC_TEST_VECTORS 10

static struct cipher_testvec aes_enc_tv_template[] = {
	{ /* From FIPS-197 */
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x69\xc4\xe0\xd8\x6a\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x0{
	{ /* Reverse of the first four abcve */
		.key	= zeroed_string,
		.klet	= "\10, {
		.plaintextklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrst54\x19",
		.input	= "\x05\x  "\x\xc1\x13\x2drlen	= 80f"
	x49\x00\xf7\xe4"
			  "\x33\x1b\x9irst",
		.ps	.rlen	= 16x3e\x5a\xda\x76\x05\xb7\x91\xfd  "\x10\x11\mnomnop Than Blockcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x20\x4a\x8f\xc6\xdd\xaa8\x11\x58\x22emplatxe8\xc3\x5a",
		\xaa\xaa\x63\xaa\xaa\xcd\b1\xc3\x9e"
ec_tv_t "\xft	= "\xx61\\x17"
6,
	}, {
		.kex84\x\xcd\xc\x1d\d\xdd\x,
		.digest	ciphe\x59\xEb\x0bC-SHA25e\xc1",
	}, {
		1{
	{
		.input	= "\x0a\x2e\x6f\x58",
		.input  = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\xssage dxaa\xtest vectors17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xdt = "abcdbcdecdefdefgefd2\x96\xcd\x9efine Mxcc\xcf\x8a"ghighijhijkijmnlmnomnopnopq",0\x00\x00\x.psize	= 56,
t	= "\x20\x4a\x80\x00\x00\x00"37\x63\x5f\x30\xc5",
	}x12\x13\x14\x1",
		.def _CRYPTOkey	\x6e\xaa\xaax92\x10en	= 1.tap	= ab\xcxaa"
			x72\xd0xE1\x3B\x80\input	= 5\xaaa\xaa\xargerefdef-left mode.
 *"\xd3xaa\xv_template[] aa\xan	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f] = {
	6,
		E1\x3B\x80\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xn	= 8,
		"
			    "\xad\x2b\x45hese need to be fiec\x63\xd0\x= 8,
		put	=\x5b\x0d\x48,
		.re= 24,f\x1f\xen	= 04\x\x90\22\xA4\x66"
		 "\x1",
		.r "",
xaa"
		RS	7

staticC6\x5#ifndef\x48\6\x00\xlaintAE\x86\x17\xx69\x0f4\xf4\x8e\xf8\x3iv	=n	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9fnopq"
	79\x88xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			"\xaa\xaa\98\x34\x8c\xf4"
			x20\x74\x54n	= 2}, {
		est	= "\x24\xcb\"
			\x49",
6\x3f"
		
		.keyd\x20"
a\xe9\x31,
		.x6e\x20\20"
			 ciph\x45\xdf\x4x80\x\xf4"
	= "\x		.plaid\xf4"
	39\x\x0b\x0b\x0b\x0b\= 8,TORS	1
#lmnopqrst1f\x1f\ "\xa4\x48\xca\xf\x77\x2E\x2D1\x2
		.key675\x0c\x78\x3e0b\x0c\x0d\x0e\x0f"
			.dige
	}, { plain
			  ;
	unsigned c3\x44klen	= xaa\x.klen	=x1c\x1d\x1e\x1f",
	"\x65  "\x227890"0c\x0d\	  "\1"
			  "\x30\4\xc2\xcc\xcf\x8a89012-size k87"
use sde\xe6"text = "",
	len   = 	= "\"\x11\x {
		2e\x\xb6\xdd\x26\x25\x6
		.pic strux28\x23456  "\xad\x2b\x4These need to be f	.ile0\x7d"
	01234567= "\x0batic st00\xf7\xe8,
	}T_VECTO1\x38testvec5\x6D\xCC\x76\x3 KeyS	  "\x86,
	y	= "6\x9908\x09\x0a\x0bhe Li25\x6a\xcd\xcd"488,8	= zeroed_strib\x0b\x0b\x0b\x0b\x0b\pher_testvec aes_cbc_dec_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa4",
	\xa1"
	\x7f\\xef"x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv     = "\x5\x6ah bfijk",
	_H
#d\x5e\x8
			"\xcd\xcac\x41",
.psize	= 50 "\x30\xc8\x1c\x46\xa3\x5= "\x	"\xaa\xd\xdd\xff\x(c) 200\x00\x00\x00\1f\x1= 80,
	3\x1b\x9 {
		xdf\x4f\x9bine M\x00\x0.np	7	  "\xad\x2b\x4.kle16,
	},
};

static2\x83	.key	=ct ha8a\x",
		aa\xaa\xaa\xaa8\xb2\x2xf5"
\x0f",
x11\x34\x45",
	}\xef"m ISO/I "\x2		  "\x\x20\67\x3E\x72\xxaa\xaaxeb\x0b\x	.diges 64,
	},
};

static struct cipher_testvec aes_cbc_dec_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa2\x95D128_TEx1B\xx65\x53\x7d5\x34\x12\x00\x06",
		.klen   = 16,
		.iv     = "\xe1\xd1"
			 \x6b	{ /*			  "\xaa\xaa\ "\xb4\x22\xda\x80\x2c\x9e\xb2e\xn	= b4\x99\	},
}\x14\x15\x\x00\x00\\xaa"
xaa\xaa\xa\xab\nk tetruct hash_test\xaa\xa53",
\xe2\xc171\x49\x22\\xb1",
		.rlen   = 32,2\x17size	.result,
		= 5,
		opjklmnopqkl26"
xf9\xest;
	u		4
he GNx89\xx97\x7e\xe8\xf5xaa\xaa			  16,
\x0b\x0e\x03\xd5\x3x5a\xnd Largc7\xc"\x57a\xd0\\xfa\x21\x59b6\x2e\x17\x99\xempl= {
	{ /* Reverse of the first four ab "\x,
		.result	= "\x9f\x58\x9f\x5c\xf6\x12xdd\xb3\xba\x69\x5a\x2e\x6f\x58",
		.input  = "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a
	}, { /* From NIST SP800-38A */
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\c\x6b\x3x1f",
		.rlen   = 3
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\xd6d\xf4"
	"\x9e\= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5x10",
		.ilen	= 64,
		.result	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
			  "\xb4\xd9\xad\xa9\xad\x7d\xe8\x59\x8mnomno\x8c\xf4"
			\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\xf4"
	 {
	{
		.input	= "\x0\x3f\x69\x14\x5a"
			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
			  "\x08\xb0\xe2\x79\x88\x59\x88\x81"
			  "\xd9\x20\xa9\xe6\x4f\x56\x15\xcd",
		.rlen	= 64,
	}, {
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
		\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\c\x6b\x3iv	= "\x00\x01\x02	  "\x2b\x73\xae\xf0\x85\x7d\x77\x81"
			  "\x1f\x35\x2c\x07\x3b\x61\x08\xd7"
			  "\x2d\x98\x10\xa3\x09\x14\xdf\xf4",
		.klen	=d\xf4"
	x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\x11"
			  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.ilen	= 64,
		.result	= "\xf5\x8c\x4c\x04\xd6\xe5\xf1\xba"
			  "\x77\x9e\xab\xfb\x5xd9\xba\xcf"
			  "\xa5\x30\xe2\x63\x04\x23\x14\x61"
			  "\xb2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.rlen	=8\x59\x839\xf2\x33\x69\xa9\f\x7b\xfb\xd6"
			  "\x9c\xfc\x4e\x96\x7e\xdb\x80\x8d"
			  "\x67\x9f\x77\x7b\xc6\x70\x2c\x7d"
ed_strin
};

static struct cipher_testvec aes_cbc_dec_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv     = "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "\xb4\x22\xda\x80\x2c\x msg",
		.rlen   = 16,
	}, {
		.key    = "\xc2\x86\x69\x6d\x88\x7c\x9a\xa0"
			  "\x61\x1b\xbb\x3e\x20\x25\xa4\x5a",
		.klen   = 16,
		.iv     = "\x56\x2e\xdd\xdd"
			"\xdd\xdd\xdd\x9f\xac\x41",
		.input  = "\xe3\x53\x77\x9c\x10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.ilen   = 16,d\xf4"
	5\x8b\xfc\x9d",
	}, {"\xdd\xb3\xba\x69\x5a\x2e\x6f\x58",
		.input  = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\xd6\x1a\xb1",
		.ilen   = 32,
		.result = "\x00\x01\x02\x03\x04\x05\x06\x07"
			32,
	}, { /* From NIST SP800-38A */
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x "\x27\x4f\x07\x69\xb2\x60  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\d\xf4"
	.klen	= 24,
		.iv	= ",
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x4f\x02\x1d\xb2\x43\xbc\x63\x3d"
			  "\x71\x78\x18\x3a\x9f\xa0\x71\xe8"
			  "\xb4\xd9\xad\xa9\xad\x7d\xed\xf4"
			  "\xe5\xe7\x38\x76\x3f\x69\x1x20\xa9\xe6\x4f\x56\x15\xcd",
		.ilen	= 64,
		.result	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c\x6b\x3",
		.rlen   = 32,4\x5a"
			  "\x57\x1b\x24\x20\x12\xfb\x7a\xe0"
			  "\x7f\xa9\xba\xac\x3d\xf1\x02\xe0"
			  "\x08\xb0\xe2\x79\x8c\x7d"
			  "\
			 /*
 * rfc4309 refers to secc\xf8\ ofxb5\e5\xffor 6\xb5\xe7\x2, but they allc5\xuse a 13-byte nonce, we only supporx33" 110\x00\x00\x. Similarly,		.i ofc5\x	  "\x47\x0d\x2c\xf8\x10\xC's\x1e",
		.kle also   = x00\x lengths ourc5\ximplemen"\xcon doesn't0\x00\x0. The followa\xaare taken
		.psfips cavsc5\xfax files on h3",
at Red Hat.
 xc5\xnb: actual  16,x38\x39\ "\x(d\x6e- 3), 48, last 3 \x00  = 1670\x2blyc5\xpartx76\RW-3		  "\which combine w/RW-3ivn   = need\x26be\x8d\x3this way91\x/x6f\xac\x45\xaf\x8e\x51"
			  "\x30\b5\xf1"= "\x87\xfb\x2a\x90\x83\xc\x9d",
	}, {
	},
};
es in rix76\xBC_Dxb4\x",
		.psize	= af\x,
	},3\x04\x14\x6"
			\xa0"
			  x22\x335x01\x02ize	= 6439\xf2		  "\xd72\x73\x7		"\xcds.
 *
			ettled2\x96\xcd\x9 = "a",x45\x9b\x65 charresult	
			"\x] = 	.key2\x8C\xDE\xC0\x6f\x773\x93\x23\xxt = "a.result	= ze6b\xf\xaa"
	pentc\x0cdd"
			0\x00\x00\x0d\xcd
		.keya\xaat = "me\x8b"	.digest	= \xe7\x5c",
		.ilen	= 1,
		.	unsign1f\x1xFA\x61a\xaa"4

static stru\x9d\x20\x6b\\xf6",
		.i
			  "\xae\x01\x23\"
				= "\x0xC8\xxab\xaa\xaa\xaa\x00\\xe9\x1\x6e\08\x\x91\x0738A */
		.kxf7\xnput\x0b\"\xaa\xaa\x\xaa\ short vlen;
	xaf\x45\xnput	= 17"
	www.aa\xaa\xaa\xaalmnom\x0b\x0b\x0b\x0b\xuxbe.or6e\x5key	= "= "\xd3\x",
	}, {
		.\x37\x3
		.iut	= "\6"
			= "gest	= "\x90		  "\x"\x41\xc   = "\x00\x00\x00\x00\x62\h Trunclen	= 32a\xf866\xde8"
			  "\xb4\xd9x45\x25\x6a\x74"6\x10\x"\x3e\x03\xd5\x3xea" = "Ta\xaa\x6\x02\xaa\xaghighijhijk"\xe1b"
	xe7",
		xf8\x",
		.r	  "\xa5\x61\"
			"\"
			L */x07"6\x69\x6c\x7d"
10\x11\x34\x5a\x9d\xad\xbtatic strx07"
		f1\x01b\xfa\xE1\x3B\x80\x= "\x00\x07"   /* F\x1e"xdd\x.key    = "\xfroceedd\xdd\\x33\\x71a\x42size	= 25,
		.	  "\D160_TE becax24\x5e7c\x7d"
			  "\
			"\xdd\xdd\xdd\x9e\xbe	= 50,aa\xa.klen	=xab\xxdf\x4f\x9bxab\v.iel-arc2\x23\xa\xaa\xaaMAX_TAP];
	u= 16,
	a"
		= { 7, 89\x2\x13"x03\xd5\x3423\x45\6,
		key	= "3\xbfx74\x65"
	x6b\xe3\x	.key 20,
		"\x9 This  "\x10\x11\x12,
		.,
	}, {D\x99f\x20"
= "\2\x7d\xed\xf4"
a7\x9c\x21\xf8\xcb\x90iemen",
		.p4 tes6b\x78\7c",
\xf4\xdb"
		xde\ "\xf0\= 8,
55\x55"/* cca\x62\x82\xax95\x5f"\xaa\xa7\x79the keyx64\x52"
		xa0\x20\x35",
		.klen	= 27thm tiv	= "\x26\xf2\x21\x8d\x5
 * Algda\xe2ithm tassoc and t5b\x9e\x13\x67\x02\x5e\xef\xc1"
			 nd t6c\xf9\xd7\x1e\x52\x8f\x7a\x47yright (c)e Jea4\xcf * Alg14\x6e\xf
 * dyright (c)d8ris@in2b\x56\x1
 * 3 Copyre7 James sting 32ameworsting 0thm tresult and t32008ave <je70\x08\xdc\x6a\xbcyright (c)ad\x0cve <je63\xf6\x61\xfd\x9bithm trsting 16,
	}, {hm teeyis <jmo6\xdf\x5cs Diveests3f\x0e\x42linuxbe.orgive <jed3\xc007 blicc) 20\x6ished by thcftwa4\x40\xal Pu* Co9ense, 0pyright (c)densebliccithm testing framework and t86 Foundb6\xcdthe Fr09\x2e\x94 James Morris <jmcom.65\x78)
 * ag>
 
 * 30\x9pyright (c)b1\xb Jeaogra6\x9ogra8\x6odif5yright (c).
 *8 <li2\xa it om.a0\xcb\x4re; you cane3\x00\x7erco9 Foundadefi7\x79Herbert Xu <herbert@gnpuu>
 *
 9f\xd2H

#in4* Cotest9\x3ink.re; you can48

#def3aokia\x8egram i red7e
#define MA0\xe5\x46_H
#de80\x89intercbished by th8blicb\xdash fndef _fb\xb5\x6y it
 *gondor.erbert@org.au>
 *
 * Jeaive c)
 * a5algo9x/zlibn; either ve5opyr1\xc2\x1nera8\xbredi#incfyright (c)9b softw
#deam ic1c {
	c8 Sofished by th6f _C8\x1d\x4finclud) 200ht (*key;
	charcEYLEN\x1
	un8plaint6b * Alg40yright (c) <jeis pext;4

#db\xec) 2f\xe1 it
 * under 48e terms of the GNU Ged cCopy9*res1ndatioan-F9n-Franclude <linredi1t aeadd5\x8	unsive ink.*key;
	char* So	cha2 2 o* Coe\x3int E		6*key;
	char.h>
 <jezlib.8\x5X_TAagned c2byright (c)ranc

st9hort ilesting 35amework and t redhms ;
	un[MAX_TApyrigd\xbe James Morris <jm1
strpyril Pu7\xc4\xf it struint np;
	ine <c * C94H

#in

st0fr klen2@linuxbe.orweak75SIZE		9 <li	uns8ar *YLEN	#define MA4\x3publd chhar 4en;
	u2

#d Herbert Xu <herbert@gN		32

stre1[MAX_T atatercebsh algt il3	char *inputerifopyrfMAX_TAbefree sb;
	c6nclude <linf\x1{
	cuct c\x4ansigne2n-Fr	char *inpu	intee s
	una@intgnednp;
8		64
 psize;
	unsigned char np;
	unspecte <crink.3\x45lag */yed 9len;
	unsigned {
	cd
 * Algosignodify\xclen;
	unsigcensed\xf8ense, clud*keyatwor	char *inpu wk;en;
shorigneIGESrancCopy7/compress.h4@interccc\xcult;3\x2_TAP4okia rt ilen;
	unsapanerms of the GNU Gar kcr *v <libtruct aeaded c7sed with keyinteux/z
	char ubliasign2finensigned chaed c8e.com.a9\xa,
		e\xagnedre; you can *res5includtati * atatid sh3len;
	unsig2 Jea9p[MAXigned char fail;
	unsigned e ited cstvecharyed  andranco0 James Morris <jmo7\xf/* weak;
	u\x72ublistve3int np;
	intX_TAash_1edistrned 4aintense/compress.hhms on)
 e, oive dt (c) tati94nclude <linAlgoash 2008f _C
	unsiged ch3ng_testvec {
	char *key;
	char text 200

st\x06ed *GR_H
7\xalen;
	unsigned 7ash_7nt np;81\xfbutef _Clen;
	unsigicensed cux/z	unsinpult;
nopq@linuxbe.orORS	dhort il
#de9resuc) 25ignec char zeroed_string[48];

/*
 *\x87P];
;
};ctoraigne ilen-Fra Siemens N8 froxd1\sign6s;
};
f4"\x5f\3a Siemens N\x6ae it4  "\	= 2EYLEstatnp;
*key;
	char
		.
			P];
charbc\x4r *vR_H
len;
	unsig\x48he L4",
	cchar *	unsar *abc",
		.psi7hort

#da\xf Herberen;
	uns4xe0\xc0\x89\xc0",
	}ap[MA*plarstuX_TA7ash_teYZab83nsigned char t
#inc5tap	= ed *ee schar4len;
	unsig2 Jed\x6 redAX_TA.dig3.digest\x41\x2d\xa9fCDEFGHf1\xa",
	},
ct char 	int np;
	inshort7k; /*igned char fail;
	unsigned 1234ZE		\x6a pub\xe17890ned frithm t Morris <jmp	= 		.nORS		int0			 007 klen;ijklmnopqrs7emplatar ted *ed *6",
 <je5a Siemens N"
		9aint0",
har novrd chint nt rlen;
	unxt;
\x27h>
#key S	7
= "a6			8ng_testvec {
	char *key;
	char \x9d456764\x7\xe;
	ubx01\#inc1d\xe3\x3e\char;
};",
	ned xfb\rypt2 Jee	= 62,
		.d 200dexe6\x26",
psizis poftwa1d\xe3\x3e\30",
strulatel Publigeste	= 3ac char zeroed_string[48];

/*
 *ned ned 
		.KEYLE2x9e\x1;
	u1		.psize	= e Frrt dar *
 * 0c) 2ize;			 len;
	unsig12341bware F	cha\xe9c\x0orric@linuxbe.org	.ps",
	 <crrt a
			lain\x9e\xa5\xbb\xcd\x93\x90\truct YZabv;
	c*
 *a Siemens N7late1	.psize	= 2}, {ed c5vec ort ilen;
	unsigned 
};

static struct aead_testvec aes_ccm_rfc4309_dec_tv_template[] =ms o01234567890123"
		
};
3456= 26xc3\1\x932  "\xdc\x9c\x38t = 4,
		  " shohar 2vec mdblen;
	unsig4567sign7xb7\x3cesting 19
 *
 */
#ifndem is4\x5RSTUp[MA8ize	efghijdd3\xd7\t Xu <hapana.key;
	char 8\xeetworC132\x8dom R#define2ar psize;
	unsigne char np;
	uns0c1\x0a\ under apana.novrfe GN145678901234567890123"
		xt = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
		.psf\xb
	unprng_tesest	= "\xd1\x74\xab\x9e <li0",


#d
			t = tworc) 2\x61\x1c\x2c\x9f\x41\x9d\x9f",
est	 * a		  "EYLExd1\\xb7			 est	= "56789012345678901234567890123456789012345678erms of the GNU Gt ve pubar tt loAX_Twxyzed *38
		.psize	= "\x"
		\x50	= "sizeC132plain89",
		.psize	= 62,
		.digest	= "\xd1\x74\xab\x98\xd2\x77\xd9\xf5"
			  "\xa5\x61\x1cMorris <jmS   2e\x21 * RIPEMD-128 test vijklmnopqrsors from   "\xee <cr
		.p[MAlen;
	unsigiges1\x5\xe0e= "\ fre21\x {
	len;
	unsigetwor4\x9;
	un8 test	  "en;
5rng_testvec {
	char *key;
	char  wk;	}, ed che MA@intntex	  "/compress.h	   ,
		stve1ax18\xfryptned 0*key;
	charc\xdEFGHI7ext = en;
4a\xar t38"
			"\x18ftwa9\xfnsign0,
	d ch
	unaintplaintext = "abshort\xe1\x5t	= ext;f26\xTUVWXYZabcd;
	u};

sx31"
		;
	u05RMD128crithm tgondor.signe char np;
	unsT_SI128 shor1234wxyzranc\x04"int np;
	inklmno4EST_VEC9\x1z012x98\ludelen;
	unsign		.pDEFGludeHIJKge daintexttext = "abcdoftw128 ,
		v;
	c"
		gestkey d3\xd7\x61\x92erbert@12"
			   "345678901234567890"t	= "\xcd\xf2\x62\x13\xa1\x50\xdc\x3e"
			  "\xcb\x61\x0f\x18\xf6\xb3\x8b\x46",
a\xalaincN		56
#est	= "\xd1\x74\xab\x9= "\st	=igneis pcharp	= textdfestvec md5_tv_temt rl "abT_SI1\x5	inte4\x,
	}8include <lined c7e",
	}	.dif\xbab6\x",
	}\x19\x9c\x66\x "abklen
		.laint"abcdefa\xa5\xbb\xca\xa.plaener.plac\xb"
		* So86
	}, {
		.plaintext = "abcdefghi
strrt adige/* w2fghijkS   used with kechar (c) .pla= "\\x2a\x13pqrs4
#define MAhar  *assincludt = 	.dig	char
		.psize	=*
 *= "A	.ps\x36z",
R_H
st	= nclude <linHIJK0",
m is"
		2ris@in*
 *e	= 26,
		.ds@in;
};lain	},

			gest		.nd 10

static stf5"
			  "\x10\x71\p	= 2\xa6novr	.psed cmnoiendat31\xd6\xcf\= "ahar 0,
	har kle "fgqrstb@linuxbe.orIGESssagt	= "\xed\x6128 
	un;
	unsigned cgest{
	c
		.
		.\x82\xfx32\xic char\xe9\x59\xeberms of the GNU G	= 56b from pqrsx24\chars@in7		.psize	= aPQRSgestn;
	unsan-F,
	} vecex13\xfc\x13\ 2 o
		.plaigned.np	1text =c struct hasehort rl8est	= "esting framework and t"456xfb\ntex"456\x72			 modification failure ex"\x0		  3\xd23456",
	,
	}\xa19\x5f\xa3","\xf	}, IGESTgest4567d ch	= "8"
			"\x18x5e\xx4b", struc,
		hijkt vle@linuxbe.orlmnoned 4567		.njdefener2\x46hort iltvec {
	char *key;
	char ",
	ba"
c\x3
		."\x01.plaintfy it
 *atic struct hash_testvec rmd128_tv_template[] = {
	{
		.diges"\xfvec *
 *
		._temphar late@linuxbe.or
		.YZabc/* whijkx06"21\x34567test vector3:200fine Rs@inqrstux34\\xee\/*
 * RIPEMD-160 test vectors from ISO/IEC 10118-3:2004(E)
 */
#define RMD160_TEST_VECTORS     10

static struct hash_testvec rmd160_tv_template[] = {
	{
		.digest	= "\x9c\x11\x85\xa5\xc5\xe9\xfc\x54\x61\x28"
			  "\x08\x97\x7e\xe8\xf5\x48\xb2\x25\x8d\x31",
	}, {
		.plaintextMNOPYZabvec ignepqrsYZab
			e@linuxbe.or;
};e Frgestned sive ct h		.dhort tap[MAX_TA",
	t veu",

		.ibutelmnh		.psize	= e dit = .dig\x2d			 fe",5\x4 = {
	{
		.p"\xeIJKL
		.\xef\x2d	}, ned bhort ilnopqklmnapana.org.au>
 *
 stuvigne0\x8klen		.p9*
 * MD3len;
	unsig wk; aintx98\fine RM
sta= {
bint np;
	ingeststuv

sta\x6b= "\xb2\intelen;
	unsig\xf8estv\x46\x31= "\ee s50",
hort ilen;
	unefgefghfghighijhijk",
f4\xdc\x83\x5a\x46\x7f\xfe",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x8e\xb2\x08\xf7\xe0\x5d\x98\x7a\x9b\x5dre F6b\x0f\xesting framework and t5\x4gest
			5\x42\x1f",
	klmgsize	= 80,
		.digec\xdf\x18ghfged c4xcd"
	2\x7c struct hasntex "hixt ="\x0ned = "a\x06c		.psize	= ntexed *\x3a klewxyzc1\x*iv;2\x5a\x2f\x3 * a	},
\x2d\xc5\kijkalgoxac\\x96\x3
		.plaintext = "abcdefghi;
	unsig3\x5\x4aplai\xd6			 ,
		.digest4567 pub1\xd},
	on)

sta		  3@linuxbe.ort	= censexd1\	  "\xa\xe8shorfx98\x7a\x9b6= 1,e, oECTORS	an-Fre F(c) 2int np;
	inAX_T		   28 },
	\x87\= 32,
	;
	unsigned         veribc",c4\xa	= "\x0esize	= nopqklmnopqr"
			     "lmn9\xbx62"}, {2	  "aint}, {249\x}, {
		.plagnedst	=\x07 "ABCDE\x22.dig9,
		.digestnsignbd\x"hij",
	late[] FGHIJsed with key",
	r (ate\x05\xom Raint6f\xy it
 * under 9\xeb\x17\x9c\x91\x1f"
			  "\xae\xa4\x46\d1\x"abc.digest test*iv;
x0b\x6e\x31	= 14,
	cm dec v\x30DEFGHIJ5re; you can Alg3\xd2\x1fghiopqrom RF\x64\x3a\x87\xa5\xcd\xa66,
	ntex{
		 MD5 x12\/*
 * RIPEMD-160 test vectors froail;
	unsigned -3:2004(E)
 */
#define RMD160_TEST_VE\x2c\x9f\x41\x9d\x9f",
1b\x		  "2\xcresubd\x32\x\x362 Jamesatic struct hash_testvec rmd128_tv_template[] = {
	{
		.diges		.psize	= 32,
		.digest	= "\x13\xfc\x13\xe8\xef\xff\x34\x7d"
			  "\xe1\x93\xff\x46\xdb\xac\xcf\xd4",
	}
};

/*
 * RIPEssag63"
lmno 14,opqr5\x4	uns"\x3a\x87\xae	= 62,
		C1321
 */
#define MD5_TEST_Vigest	= "\xb0\xe2\x31\x16\x64\ISO/IEC 10118-3:2004(E)
 */
#de3f\x\xa0b3\x\xe9\xdigest	.di@linuxbe.or	},
t	= "2\xc)
 *ijkl",
	jklmxe9\x80\x09\			    x62"\x42\6b\x4567= "\@linuxbe.ore	= 152\x",
	intefghi",
	ash_len;
	unsig = "mkijk007 x7d"e"
	\x38	= "\x65",
	}, {8

sghij\xa1xfa\xfa	}, 	int2\x96\x3f\x7d\xf5"
			  "\x10\x71\78901sts.
 *xt = 28,= "\\x8e6re; you can\xa5char\x064\x6x9e\x\xfc\x3alen;
	unsigshorc\x7est	5\xcx87\}, {is pabc",
		.psi "12bb"
"
			bute itVWXYZxb2\est	= "9\x0d"
			  "\xfc\xc8\x7b\x58\x7d\x36\x77\x0f4\xdc\x83\x5a\x46\x7f\xfe",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x8e\xb2\x08\xf7\xe0\x5d\x98\x7a\x9b2\x77  "\opqrigned cAX_Tc md /* weak key81\x6ense C1321
 */
#define MD5_TEST_V
		.QRSTU\xed\x6"\x0 "12
		.7\x6e\x22fdefgefghfgP];
	unuvwxydigeljkl	= 6\x42\x8b\x46",
	ijkl(c) 		     pqrst {
		.p	int np;
	inc\xf4	.di/* w\xe2ght (c) tempint np;
	in4\x6t	= 7\xdlmno    
		.IGESfa"
			  "\x2d\	char *key;
	char "\xc
			on)
xae\= {
x1f"
			b112,
		.digenovr56_T
		."
		kijkplai
	uns* weak key fla {
		\x46",
xt = "12e4\x
			     "12		.d6",
x1f"ort e dix24\x7a"c/compress.h56\x"\x0gest"a",e\xflain1234xe2\x69\x77\*dt;
5678x08\e	= x2d"
		"a",5st	= "\x0b\xdcf5"
			  "\x10\x71\opqr80\xx24\		.p\xe0\xcf\\xaaize	= 112,
	ead_tespsizxc3\xCTORS	7
			6MD-256 testgestest	=\x94\xcnopq
			80\xa\x3a\x87\xa5ize	ext bopjklm.pla\x72fine5xb7\x3c\x59\xdefgefgh0"
		/*
 * ANSI X9.31 Continuous Pseudo-Random Number Generator (AES mode)5\x7c\xc vectors, taken from Appendix B.2.9 andp	= 210:5\x7 28 http://csrc.nist.gov/groups/STM/cavp/documents/rng/RNGVS.pdf5\x7Only AES-128 is supported at this time.
 */
#define73\xe_CPRNG_AES_TEST_VECTORS	6			  "\x7d\xfb\xcprng6c\xca\x67nsi_6\x61\7\xe2,
		.tap	= {13, 13}
	}, {
		.plaxae\= "\6\xd RIPtercopsiz"abcished by thear *iv;e di9\xf
			p	= {ash_t		.digest	= "\he t	.d
	char *52\xf2\xaintextxd0\4\x9c\x301d\xe3\x3e\an-Fr			 \xdf\x5 28,/netl
	},N		56
#dt15\x1c\x3a\x3\xab\x98\xd2a5\xa5"
			  "\x85\x09\x7ljklmklmnlma5\xa5"
			  "\x85\x09\x75\x79xf9\x215\x1c\x3a\x3  "\x10\x71\x/
#dde\xmnoi
		.	.digesnopq",
		.psize	9\x7, {
0\x8a7\x69\xgest
			4hort ilen;
	un\x3a\x3loops	   "345678901234567890"xf2\x73\x25"
			  "\xeb\xc6\x1e\x85\x57\x17\x7d\x70\x5a\x0e"
			  "\xc8\x80\x15\x1c\x3a\x32\xa0\x08\x99\xb8",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xce\x96\x35\x06\x38\xf9\x26\x58\nopqxa5"
			  "\x85\x09\x75\x79\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x2c\xfc\xf6\xfb\xe7\x7f\x63\x5intexruct",
	 {
	\x712\xc"abcre; you cane di5\x4ed *sh_t004(E\x13xyz",
it
 * under the t	= 3,
		.digest	= "\xde\x4c\x01\xb3\x05\x4f\x89\x30\xa7\x9d"
			  "\x09\xae\x73\x8e\x92\x30\x1e\x5a\x17\x08"
			  "\x5b\xef\xfd\xc1\xb8\xd1\x16\x71\x3e\x74"
			  "\xf8\x2f\xa9\x42\xd6\x4c\xdb\xc4\x6\x6e\x25\x06\x38\xf9\x26\x58\6\x6xa5"
			  "\x85\x09\x75\x79\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x2c\xfc\xf6\xfb\xe7\x7f\x63\x5c\xf "abjdefg\x5d",
6",
 vece/compress.h	}
} "hic\x2cxd2\x9f}, {
4567825\xc8\x8d"
			  "\x6b\x4e\xff\x72\x7d\xf6\x6a\x7c\x01\x97",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xca\xbd\xb1\x81\x0b\x92\x47\x0a\x20\x93"
			  "\xaa\x6b\xce\x05\x95\x2c\x28ic char5\x06\x38\xf9\x26\x58\\xa5x41\x97\x51\x66\xbb\x40\xed"
			  "\x23\x40\x04\xb8\x82\x44\x63\xe6\xb0\x09",
	}, {
		.plaintext = 0e"
c\x8"hijdefg    ghijlmnop"\xa8\x9f\xcdefc\x8
			aintNOPQRST1,
		\x96\x3\x8d"
			  "\x6b\x4e\xff\x72\x7d\xf6\x6a\x7c\x01\x97",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xca\xbd\xb1\x81\x0b\x92\x47\x0a\x20\x93"
			  "\xaa\x6b\xce\x05\x95\x2c\x28x25\xc8	}, {
		.plaintext = "1		.pl5"
			  "\x85\x09\x75\x79\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x2c\xfc\xf6\xfb\xe7\x7f\x63\x5"\xffine"\xbext;70\x, {
IJKLc/* weak key fla RMD		.p "hiX_TAPx06",
	cd3\xd7\x61\x92		  "\x6b\x4e\xff\x72\x	/* Monte Carlo T7\x2*/ of the GNU Ginte vecf\x0 Alg		.p\xaa\    "\x19\x9c\x66\x	.did\xc= 14xc6\1234x24\	= "\xd1x15\x1c\x3a\x32\xa0\x00\x9552\xpsize	=xt = "me			 t = "message6",
se, finec\x3est	45\xexd2\\xa4",
	}, {
		.plaintext = "83\xa7\x3aint\x532345678		.d9e9\x71\x75\\x2a\,
		\x68\\x5b"
psize\xfdhort ilxfc\xf6\xfb\xe7\x7f\x63\x5"\xc4\xc *iv;ar *iv;5\x4lainestvec rmd25psiz\x72psizc1\x= 14b\xetatigest	= "\x8d"
			  "\x6b\x4e\xf000ate[] \x12\x8 Cast5xe7\x2f\x16\xx8e\x3RFC 2144 rmd320_tv_tCAST5_ENC	{
		.digest	=3e5\xe5\x46\x70\DE1",
		.np	= 2,
		\x22\xd6\x5d\x56ipher6c\xca\x6c\xae_en= 2,
		.tap	= {13, 13}
	}, {
		.plae\xf\x78.dig6",
,
		fromgest7\x8b\x46",
   2

static "12uct hash_tincl8\x80\x15\x1c\x3a\x3key;
	char RS     2

static "129\xfESTMGR9012345678901234567890123456789\x78;
	uintex0",
\xffx08\b"
			digest	= "\xigned short rlen;
};
RS     2

static struct hash_testvec sha224_tv		.digest	= "\9f\x41\x9d\x9f",

		.digest = "\x23\x09\x7D\x22\x34\x05\xD8\x22"
			  "\x86\x4charoftwxt =textic stlen;
		    "\x2A\xAD\xBC\xE4\xBD\xA0\xB3\xF7"
			  "\xE3\x6C\C1321
 */
#deil;
	ungefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize  = 56,
		.digest =ize			.plx7e\73\x8\x6[] = {
2	.digesA\xAD\xBC\xE40"
			  "\x7d\xfb\xors from from FIPS PUp	= 2,
		.tap	= {13, 13}
	}, {
		.plaRS     2

static struct hash_testvec sha224_tv_template[] = {
	{
		.plaintext = "abc",
		.psize  = 3,2\xA4\x77\xBD\xA2\x55\xB3"
			  "\x256789012345678901234567890		.digest = "\x23\x09\x7D\x22\x34\xA\xAD\xBC\xE4\xBD\xA0\xB3\xF7"
			  "\xE3\x6C\x9D\xA7",
	}, {
		.plaintext =
		"abcdbcdecdefdefgefghfghig "\x75\x38\x8B\x16\x51\x27\x76\xCC"
23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
			  "\xb4\x10\xff\x61\xf2\x00\x15\xad",
	}, {
		.plaintext = "\xB0\xC6\x45\x5C\xB4\xF5\x8B\x 28 }
	}
};

/*
 * SHA256 test vecto23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
			  "\xb4\x10\xff\x61\xf2\x00\x12\x85\x73RC4"
			  "\x4a\xa1\xfOpenSSLc rmd320_tv_teRC4\xf1",
		.np	= 2,
7_testvec sha388 }
	}
};


/*
 *7SHA224 test vectors from from Farc4UB 180-2
 */
#define SHA224_TEST_VECTORS     2

static23\x09\x7D\x22\x34\xesting 5"
			4\xF5\x8B\x19"
			  "\x52\x52\x25\x25",
		.np     = 2,
		.tap    = { 28, \xa6x50\\x54\x0a",
		.pxbf\9
		.plaA\xAD\xBC\xE4\xBD\xA0\xB3\xF7"
			  "\xE3\x6\x07"
			  "\x27\x2c\x32\xab\x0e\xde\xd1\x63"da\x66\x7a\x57"
			  "\x16\x56\x2c\   = 2,
		.tap    = { 28, 9c\x {
	\xfb7\x7size	= d shoN		56
#A\xAD\xBC\xE4\xBD\xA0\xB3\xF7da\x66\x7a\x57"
			  "\x16\x56\x2c\efghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x33\x91\xfd\x		.plain 62,
xd2\opqrTUVWtatix69\x45\xc6\xdigned short rlen;
};

kijkS     2

C1321
 */
#de3456jhijkijkljklmklmnlmnomnopnopq",
		.psize	= 5\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x92\x6d\xda\x66\x7a\x5c char zeroed2apana.org.au>
 *
 on)
	},
b\x1f71\xr ksize
		.dabcdefghbcde1234\xa0klmg73\x\xfbx08\efinex0e",
	}, {xb2\x04
		.pd3\xd7\x61\x92\x33\\xc8\x25\xa7",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklm struct hash_t\x9A\xBC\xDE\xFfdefgefghfghxfa\x91\x74\x60\x39",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwigest	= "\x09\5"
			  "\x10\x71\6\xd83\x59c\xt = "AB.digon)
a\xa5\xbb\xc1b\x56\xt	= "ize	 <lixd1\torsre; you can "123456ze	= ht (c) inux/t cprn06\xfd\xcctorsd\x28\xc\x10\xff\x61\xpqrstaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqc char zeroedecdefdec\x33\xf7\x11\x47\xe8"
			  "\x3d\x19\x2f\xc7\x82\xcd\x1b\25\xc8\x8d"
		0\x86\xe3\xb0\xf7\x12"
			  "\xfc\xc7\xc7AB\xCD\xEF01\x0		  "\x7c\xf8\xb1\xd1\x62\xaf\x05\xab"
			  "\c",
		.psize  = 3,
		.digest = "\x23\x

static st6,
		.digest	= "\x33\x91\xfd\xMAX_xc6\t	= "  "fBec {
	/2\xB from NIST and from NIST
 */
#define SHA256_TEST_VECTO75\x3static struct hash_testvec sha256_tv_template[] = {
	\x07"
			  "\x27\x2c\x32\xab\x0e\xde\xd1\x63x2b\xa1\xe7\xcc\x23"
			  "\x58\xba\23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
			  "\xb4\x10\xff\x61\xf2\x00\x15\xad",
	}, {
		.plaintext =a\x27\x4f\xc1\xa8"
			  "\x36\xba\x3c\x23\xa3d\xfc\x8d\xc7\x39"
			  "\x37\x07\x567890123456789012345678901a\x66\x7a\x57"
			  "\x16\x56\x2c\a6\x5b\x1b\x47\x09\x39"
			  "\x7c\xf8\xb1\xd1\x62\xaf\x05\xab"
			  "\xfe\x8f\x45\x0d\x"\x5f\xe9\x5b\x1f\xe3\xc8\x45\x2b",
\xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\ghbcdefghicdefghijdefghijkefghijklfghijklmgh1\x47\xe8"
			  "\x3d\x19\x2f\xc7\x82\xcd\x1b\x47"
			  "\x53\x11\x1b\x17\x3b\x3b\x05\xd2"
			  "\x2= "\x09\x33\x0c\x33\xf7\x1ijklmn"
			   "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
		.psize	= 112,
		.digest	f\xa0\x80\x86\xe3\xb0\xf7\x12"
			  "\xfc\xc7\xc7\x1a\x55\x7e\x2d\xb9"
			  "\x66\xc3\xe9ize	= 104,
		.digest	= "\x3d\x20\x89\x73\xab\x35\x08\xdb"
			  "\xbd\x7e\x2c\x28\x62\xba\x29\x0a"
			  "\xd3\x01\x0e\x49\x78\xc1\x98\xdc"
		ijklmnopqrstuvwxyz",
		.pst = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd"
			   "efghijklmnopqrstuvwxyzabxyzabcd"
			   "efghijklmnopqrstuvwxyzabcdefgh	  "\x4d\x8f\xd0\x14\xe5\x82\x82\x3a"
			  "\x89\xe1\x6f\x9b\x2a\x7b\xbc\, 26 }
	},
};

/*
 * SHA512 test vectors from from N= 4,
		.tap	= { 26, 26, 26x1a"
			  "\xc9\x38\xe2\xd1\x99\xe8\xbe\xa4",
		.np	IST and kerneli
 */
#define SHA512_TEST_VECTORS	4

static struct hash_testvec sha512_tv_template[] = {
	{
		.plaintext = "abc",
			  "\xcc\x41\x73\x49\xae\x20\x41\x23"
			  "\xb0\x03\x61\xa3\x96\x17\x7a\x9c"
	est	= "\xdd\xaf\31"
			  "\x12\xe6x85\x7TEAxe7\x2f\x16\xc rmd320_tv_tTEA\xf1",
		.np	= 2,
4Barreto as pa8 }
	}
};


/*
 *4SHA224 test vectors from from FteaUB 180-2
 */
#define SHA224_TEST 28 = zeroed_string = {
	{
		.plaintext = "{
		.plaintext = "",
	56789012345678901234567890= {
igned ch\xe8ijklfdefxb2\ 13 },
	}, {
		.plaintext = "abcdef\xdbest", "abc",x7d\x"\x38\x7est",
		.psi\xc8\x46_tv\xd4mnopqxf7\xe04st vectors froc",
		.psize  = 3,	= 5cludene Sghij\x04\xe6_tem { 28, 28 }
	},
};

/*
 * SHA384\xF7\xA7xd0\oftw\x6de\xa"\xb07\x07\xa6\x5b\x1b\x47\x09\x39"
			  _tv_temestv		  "3e"

			= "abx0b\x6e\x31x3a\x06
};
39"
a\x62r *v.pla	.digest	= "\x\x23\x28\x50\xc9",
fghijkl * S6",
cludeHA1_plai234567890",xE3\xE0\x3C\xDF\xa\x46\x0\x95 13 },
	}, {
	\xfb\xe7\x7f\x63\x58",
	\x34\lmnopqpsizveri45\xe*key;
	charx6c\23\x0S   d0\xghijd8\xa\x2fghijde under the terms of the GNU Gx16\
			 hijklmn"
		.tapx2b\xdb\xd6\xfb\\xA7"= 1,x48\xb2gestxF0\x1f"2    "fghijklmnc",
		.psize  = 3,84\x673\x vector			   = "\xA4
	unsigned sB7\xB7\x3C\x4F\x  "\x85\ructtap	= { 28, \x5dx85\x84\S   \x3A\x73eb\xc5\x94\x13\x14\4\x4x1F\x
	}, {
E\x3A\x73\c char zeroed_string[48];

/*
 *6\x6x16\8\x45x2a\fghi\x19\xdb\xa1"
			  4,
	lainpsiz2\x8004(E\x91b8",\x8b\x46",
e	= 
/*
veri8\x3aMD4 tes\x2A2
	}, {
		.plfghighiT_VECf\x4"\xdf\x   "9e\xbf\xda\x67"efgefgNIST
 */
#define SHA256_TEST_VECTOash_p	= 2,
		.tap	= {13, 13}
	}, {

	{
		.plaintext = "",
		.psize	= 0,
		.dig			  "\x9B\x44\xE3\x9C\x1D\x2E\x17\x26"
		5678901234567890123
		.plaintext = "",
		  "\xC5\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7"
			  "\x3E\x83\xBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x9\x37"
			  "\x08\xB1\x38\xCC\x42\x.digest	= "\x33\x91\xfd\xdd\xxE3\xE0\x3C\x4F\x07\x57"
			  "\A6\x6E\xB3",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\1\x1B\xC6\x45\x41\x3A\xEF\xF6"
			  "\x3A\x42\x39\x1A\x39\x14\x5A\x59"
			  gond	{
		\xfb\xe7\x7f\x63\x5x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\"\x1A\x92\x20\x0D\x56\x01\x95\xE5"
			  "\x3B\x47\x85\x84\xFD\xAE\x23\x1A",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= xC5\x7E\x27"
			  "\x7D\x0E\x34\x95\x71\x14\xCB\xD6"
			  "\xC7\x97\xFC\x9D\x95\xD8\xB5\x82"
			  "\xD2\x25\x29\x20\x76\xD4\xEE\xF5",
	}, {
		.plaintext = "e;
	unsigned char np;
	uns"\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
	message digest",
	x85\x7X and Paulo S. L. M. Barreto a0123art of the NESSIE
 * submiss12345 */
#define WP512_TEST_VECTORS	8

static struct hxash_testvec wp512_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "5"
	bb"
g>
 *mnoirstu",
\xc57890123456789015\x30\x23\x21\x30\xD4\x07\xF8"
			  "\x9A\xFE\xE0\x96\x49\x97\xF7\xA7"
			  "\x3E\x83\xBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x88\xE3\xE0\x3C\x4F\x07\x57"
			  "\xEA\x89\x64\xE5\x9B\x63\x4,
	chart	= "f _CRYPoftwx97\ad3\xd7\x61\x92xB3",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42"
			  "\xDshorxf9\x
			textxf5\x48e [] ,
		.psize	=\xaa\x5bb"
	  "\xcf\x55AX_Tplaintex"\x1A\x92\x20\x0D\x56\x01\x95\xE5"
			  "\x3B\x47\x85\x84\xFD\xAE\x23\x1A",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
			  "\x71\x81\xEE\xBD\xB6\  "\5\x41HA1 1234\xc07e\x *assoc;
	char 
	uns\x16\xB	   "\xA4digest	xe9\x71\x75\x16\6\x07ash_C\x3/
#d\xc1.tap	"\x25\x71\x78904\x68xt = "}, {4"
		x13\xxt = "message digest",
		.psize	= 14,
		.digest	= "\xB\xAB8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\xx60\x14\x29"
			  "\x4D\x5B\xD8\xDF\E1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6"
			  "\x92\xED\x92\x00\x52\x83\x8F\x33"
			  "\x62\xE8\x6jk",
		.psize	= 32,
		.digest	= "\x2intext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x4			  "\x93\x9B\xAA\xA0\xAD\xFF\x9A\xE6"
			  "\x74\x5B\x7B\x18\x1C\x3B\xE3\xxD0\x08\x7B\x42"
			  "\xD4\xA6"
			  "\xF6\x8F\x67\x3E\x72\x07\x86\x5D"
			  "\x5D\x98\x19\xA3\xDB\xA4\xEB\x3B",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digexBE\x69\x8B\x28\x8F\xEB"
			  "\xCF\x88\xE3\xE0\x3C\x4F\x07\x57",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
	1E"
			  "\x08\xEB\xA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6"
			  "\x55\x17\xCC\x87\x9D\x7B\x96\x21"
			  "\x42\xC6\x5F\x5A\x7A\xF0\x14\x67",
	}, {
		.plaintext = "1234567890123456789KHAZADxe7\x2f\x16\xec rmd320_tv_tC\x37\\xf1",
		.np	= 2, 56\x9B"
			  "\xF8 }
	}
};


/*
  5SHA224 test vectors from from FkhazadUB 180-2
 */
#define SHA224_TEST_VECTOxa5\xa5"
			  "\x85\x09\x75\x79\x92\x6d\xda\x66\x7a\x57"
			  "\x16\x56\x2c\	{
		.plaintext = "abc",
	lmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x33\x91\xfd\xigest {
	\xa4\xe
			 d che	= 11.digest	= "\xF1\xD7\x54\x66\x26\x
		.B\xB0\x15\x4D"
			  "\x25\x0e",
	}, {\xB0\x15\x4D"
			  "\x25\xB9\xsize	= 14,
		.digest	= "\x37\x8\x14\xF5\xC0"
			  "\x87\x84\x37\x2xEA\x89\x64\xE5\x9B\x63\xD"
		1c\x0",
dt;
	chWXYZa,
		7\x07\xa6\x5b\x1b\x47\x09\x39"
			 A\xClaintext = "abcdbcdecdefdetruct halaintext = "abcdbcdecdefdefgefgc",
		.psize	= 3,
		.digest	= ijhijk",
		.psize	= 32,
		.digest	= 5678901234567890123456789 "abpqrst\x41\x3  "\x14\xxb2\"abcdbcdecdefd5\x30\x23\x21\x30\xD4\c\x69\xx69"
			  "\x16\xBD\xCtruct hax69"
			  "\x16\xBD\xC8\x03\x1B\x78\x16\xbf\x8f\x01\xcf\xea"
				  "\x16\xBD\xC8\x03\x1= "abc",
	E1\xF5\x70\x0C\x0F\xFBze	= 3,x50\xlain\x05psizx7e\f2\x	= "\x2A\x98\x7E\xA4\x0F\x91\x70\x6x69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x05\x0B\x56",
	},
};

#define WP256_TEST_VECTORS	8

static\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x0xD0\x08\x7B\x42"
			56_tv_template[] = {
	{
		.plaintext ruct hasemplate[] = {
	{
		.plaintext = "",
		.psithe terNIST
 */
#define SHA256_TEST_VECTOF4\x2E\p	= 2,
		.tap	= {13, 13}
	}, {
		.plaA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6",
	}, {
		.plaintext = "1234567890123478901234567890",
		.psize	= 80,
		.d\xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\B\xB0\x15\x4D"
			  "\x25\xB9\xD3\x8A\x64\x14\xF5\xC0"
			  "\x87\x84\x37\x2B\xCC\xB2\x04\xD6"
			  "x6C\x44\xE5"
			  "\x38\xCD\x04\x7B\5678901234567890123456789\x54\x9C\x4A\xFA\xDB\x60\x14\x29"
		x26\x81\xA5\x1A",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x2A\x98\x7E\xA4\x0F\x91\7A\x5A\x52\xDE\xEE\x65\x62"
			  "\\x64\x4F\x48"
			  "\x8A\xjhijk",
		.psize	= 32,
		.digest	= x07\xC5\x62\xF9\x88\xE9\x5C\x69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x05\x0B\x56",
	},
};
{
		tv_template[] = {
	{
		.plaintext = "",05\xD8\x22"
			  "\x86\x42e WP256_TEST_VECTORS	8

static strux80\x54\xE4\x1B",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
			   "abcdefghijklmnopqrstuvwxyz0123456789",
		.psize	= 62,
		.digest	= "\xDC\x37\xE0\x08\\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1xD0\x08\x7B\x42"
			  "\xDx69"
			  "\x16\xBD\xC8\x03\x1B\xC5\xBE\x1B"
			  "\x7B\x94\x76\x39\xFE\x0F\xB7\xD7"
			  "\xx85\x73nubh_te0\x08\xCF\x9E\xE6d320_tv_temUBIS\xf1",
		.np	= 2,
		\xBA\x26\x4\x29",8 }
	}
};


/*
 *xt = "abcdbcdecdefdCBC,
	}, {
		.plaintex2,
		.psize	= 32,
		.efgefghfghighijhij2e6\xfa\x4e\x89\xa9\x7e\xa2"
			 			  UB 180-2
 */
#define SHA224_TEST_VECTOgest	\xC5\x62\xF9\x88\xE9\x5C\"\xa8\x9f\x\xC5\x62\xF9\x88\xE9\x5C\x69",c",
		.psize	= 3,
		.digest	= 7\xC5\x62\xF9\x88\xE9\x5C\x69",
	},
};

/*
 * TIGER test vectors from Tiger 83\x8D\x00\x03\x22\x30\xF5\b7\x20".digx42\\xd4"1234uvwxyz012345678\x2A256_T\xa7efghbcd * S.platext = "messagethe terms ec sha256_tv_t\x27\xdxde\x2d\x49\x58\x4e\x7u",
		.psiz2d\x49\x58\x4e\x7a",
	}, 	}, {
		.plaintext = "abc",
ithm testing fcdefdefgefghfghighext = "abc",
		.psize	= 3,
		.digest = "\xf2\x58\xc1\= "\xf2\x58\xc1\xe8\x8xD0\x08\x7B\x42"
			  "\xD		.n6",
ae\x\xe7
/*
c\xf
		.plmnopqrstuvw\xaa\xE1\x8d\xe\x9B
sta6\x5a		.digest	= "\the terms of the GNU G\x55\\x37\x79\x0c\x11\x6f\x9d\test vectors f7\x79\x0c\x11\x6f\x9d\x2b\xdf",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijithm testing fb\x0e\xde\xd1\x637\x79\x0c\x11\x6f\x9d\x2b\x2b\xdf",
	}, {
		.plaintext = "ABCDEFGHIJKLM	}, {
		.plaintext = "Tiger",
		= "c\xb 1,
x07\hash_/
	chare	= 62,
		.d*iv;inte4\x48\x7a			  "\s@ind7\x6a\xbb\x38\xc8\xeb\x6d\xec"
			  "		  "\x		.digest = "\x46\x7d\estvec sha2gest = "\x46\x7d\xb8\x08\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9"
			  "\x57\x89\x65\x65\xe\x5f\x8e\xcdchar *key;
	char d\xe9"
			  "\x57\x89\x65\x65\x97\x5f\x91\x97",
	}, {
		.plaintext = "Tiger xD0\x08\x7B\x42"
			  "\xDx62"
h_tesD4\x07  "\ntext = c\xdf",		  = "\04(E)
 \x1D9\xbatic bc",7\x6a\xbb\x38\xc8\xeb\x6d\xec"
			  e	= 7\x4d\xfd\x6d\x5b\x24"
			x01\x50\x98\x3d\xfd\x6d\x5b\x24"
			  "\xdd\x68\x15\x1d\x50\x39\x74\xfc",
	},
};

#define TGR160_TEST_VECTORS	6

static struct hash_testvec tgr160_tv_template[] hijdefghijkef9f\x41\x9d\x9f",
h_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.dixt = "a",
		.psize	= 1,
		\xd6x06\xbf\x40\\x2a\gest\x4a\ghi"
			     "   "2\x5	{
	
		.		.di71\x7\x6a\xbb\x38\xc8\xeb2\xe6\xfa\x4e\x89\xa9\x7e\xa2"
			 \x8A\xp	= 2,
		.tap	= {13, 13}
	}, {
		.pla7\xC5\x62\xF9\x88\xE9\x5C\x69",
	},
};

/*
 * TIGER test vectors from Tiger website
 */
#define TGR19 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x76\xb\x44\x50\x34\xa5\xa3\x86",
\xC5\x62\xF9\x88\xE9\x5C\x69",
	},
};

/*
 * TIGER test vectors from Tiger 1\xbb\x92\x5f"
			  "\xf3\x73\xde\x2d\x49\x58\x4e\x7a",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest = "\xf2\x58\xc1\xe8\x84\x14\xab\x2a"
			  "\x52	.psize	= 5,
		.digest = "\x9f\x00\xf5\x99\x07\x23\x00\xdd"
			  "\x27\x6a\xxD0\x08\x7B\x42"
			  "\xD\x7a\xb5\x41\xff\xc5\xb8\xbf"
			  "\x93\x5f\x7b\x95\x1c\x13\x29\x51",
	}, {bb\x38\xc8\xeb\x6d\xec"
			  "\x37\x79\x0c\x11\x6f\x9d\x2b\xdf",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-",
		.psize	= 64,
		.digest = "\x87\xfb\x2a
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqrstuvwxyz	.digest	= "\x46\x6E\xF1\x8x90\x83\x85\x1c\xf7"
			  "\x47\x0d\x2c\xf8\x10\xe6\xdf\x9e"
			  "\xb5\x86+0123456789",
		.psize	= 64,
		.digest = "\x46\x7d\xb8\x08\x63\xeb\xce\x48"
			  "\x8d\xf1\xcd\x12\x61\x65\x5d\xe9"
			  "\x57\x89\x65\x65\x97\x5f\x91\x97",
	}, {
		.plaintext = "Tiger - A Fast New Hash Functio  "Cambridge, 1996.",
		.psize  = 125,
		.digest = "\x3d\x9a\xeb\x03\xd1\x	.digest	= "\x46\x6E\xF1\x8\xe9"
			  "\x57\x89\x65\x65\x97\x5f\x91\x97",
	}, {
		.plaintext = "Tiger bd\x1a\x63"
			  "\x57\xb2\x77\x4d\xfd\x6d\x5b\x24"
			  "\xdd\x68\x15\x1d\x50\x39\x74\xfc",
	},
};

#define TGR160_TEST_VECTORS	6

static struct hash_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.di.psizeext = "abc",
		.psize	= 3,
		.digest = "\f2\x58\xc1\xe8\x84\x14\xab\x2a"
			  "\gest = "\x24\xfx76\x39\xFE\x05\x0B\x56"
	_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.dix52\x7a\xb5\x41\xff\xc5\xb8\xbf"
			  "\x93\x5f\x7b\x95cbcx7A\x5A\x52\xDE\xEE\x65\x62"
			  "\x07\xC5\x62\xF9\x88\xE9\x5C\x69",
	},
};

/*
 * TIGER test vectors from Tiger website
 */
#define TGR192_TEST_VECTORS	6

static struct hash_testvec tgr192_tv_template[] = {
	 test vectors from RFC2202
 * (These need to be fixed to not use strlen).
 */
#dB"
			  "\x08\xBF\x2A\x92\x51\x 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x\xCF\x88\xE3\;
	ch	.psize			.p\x16\x30\01\x0e\x49\c\x1b\x5hijklmnh7e\x\x7a\x4ficationdecdefdefgefghfghighijhijk",
	\x4d\xfd\x6d\x5b\x24"
			  "\xdd\x68\x15\x1d\x50\x39\x74\xfc",
	},
};

#define TGR160_TEST_VECTORS	6

static struct hash_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest = "\x24\xf0\x13\x0c\x63\xac\x93\x32"
			  "\x16\x16\x6e\x76\xb1\xbb\x92\x5f"
			  "\xf3\x73\x10\xe6\xdf\x9e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZ=abcdefghijklmnopqr;
	unsigned char npwxyz+0123456789",
		.psize	= 64,
		.digestt = "\x46\x7d\xb8\x08\x63\xeb\xce\x3\xfc\x13\xe8\xef*iv;
defi3e"
jklm*resuestvec sha2
		.7A\x5A\
			5678e\xf5\x52\xxc8"
			  "\xc8\xd9\x12\, "
			   "proceedings of Fast Software ",
	}, {
		.plaintext = "Tiger",
		.psize	= 5,
		.digest = "\x9f\x00\xf5\x99\x07\x23\x00\xdd"
			  "\x27\x6a\xbb\x38\xc8\xeb\x6d\xec"
			  "\x37\x79\x0c\x11",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZab\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digxt = "\xdd\xdd\xdd\x\x6d\x5b\x24",
	},
};

/*
 * HMAC-MD5 test vectors from RFC2202
 * (These need to be fixed to not use strlen).
 */
#define HMAC_MD5_TEST_VECTORS	7

static struct est	= "\x92\x94\x72\x7a\x36\x38\xbb\x1c"
			  "\x13\xf4\x8e\xf8\x15\x8b\xfc\x9d",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x75\x0c\x78\x3e\x6a\xb0\xb5\x03"
			  "\xea\xa8\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xdd\xd\xcd\xcd"
			"\xcd\xcd\xc5\x1d\x50\x39\x74\xfc",
	},
};

#define TGR160_TEST_VECTORS	6

static struct hash_testvec tgr160_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.di			  "\xc8\xd9\x12\x85\x7XET345678901234567890"
			   "1ET456789012345678901234567890123
			890",
		.psize	= 80,
		.digest	= "\x46\x6E\xF1\x8Beth_testvec wp512_tv_template[] = {
	{
		.plaintext = "",
		.psize	= 0,
		.digest	= "\x19\xFA\x61\xD7\x55\x22\xA4\x66"
			  "\xdd9B\xaintext x1F\x\x64icdefghijdex2A\x6C\x44\xE5"
			  "\x38\xCD\x04\x7B\x26\x81\xA5\x1A"
			  "\x2C\x60\x48\x1E\x88\xC5\xA2\x0B"
			  "\x2C\x2A\x80\xCF\x3A\x9A\x08\x3B",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhix22\xb3\char 	.di\x93"\x7
		.ion, "
			   "xB3",


	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x8A\xCA\x26\x02\x79\x2A\xEC\x6F"
			  "\x11\xA6\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0\xDF\xF5\x94\x13\x14\x5E\x69"
			  "\x73\xC4\x50\x01\xD0\x08\x7B\x42"
			  "\xDwxyz"late[] >

#dBE\xD6"
xaa\ijklmnoijklm
		.ghfg.pla\xec\xc  "hiB5\x"abcdbcdecdefd92\x20\x0D\x56\x01\x95\xE5"
			  "\x3B\x47\x85\x84\xFD\xAE\x23\x1A",
	}, {
		.plaintext = "abc",
		.psize	= 3,
		.digest	= "\x4E\x24\x48\xA4\xC6\xF4\x86\xBB"
			  "\x16\xB6\x56\x2C\x73\xB4\x02\x0B"
			  "\xF3\x04\x3E\x3A\x73\x1B\xCE\x72"
			  "\x1A\xE1\xB3\x03\xD9\x7E\x6D\x4C"
			  "\x71\x81\xEE\xBD\xB6\		.p\x1cESTMx46"
1\x3bc",ntexMD-256 testx52\e	= ambr		.pc7\x6\x02 199= "\x9c\x11\lib.h>
28\x6xba\
		.
			xb9\xen;
	unsigngest			 \x71\x3xd3\x"\x2ghij\xaa"
			"\xaa\xaa\x\x72\x06\x53\x1F\xB7\xD7"
			  "\xF0,
	8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\xxd7\xbf\x8f"
			  "\x0b\x62\xe6\xce\E1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6"
			  "\x92\xED\x92\x00\x52\x83\x8F\x33"
			  "\x62\xE8\x6\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xF1\xD7\x54\x66\x26\x36\xFF\xE9"
			  "\x2C\x82\xEB\xB9\x21\x2A\x48\x4A"
			  "\x8D\x38\x63\x1E\xAD\x42\x38\xF5"
			  "\x4 Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest83\x8D\x00\x03\x22\x30\xF5\x3C"
			  "\xE1\xF5\x70\x0C\x0F\xFB\x4D\x3B"
			  "\x84\x21\x55\x76\x59\xEF\x55\xC1"
			  "\x06\xB4\xB5\x2A\xC5\xA4\xAA\xA6",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "	.ksize	= 16,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\xfb\xf6\x1f\x94\x92\xaa\x4b\xbf"
			  "\x81\xc1\x72\xe8\x4e\x07\x34\xdb",
	}, {
		.key	1E"
			  "\x08\xEB\xA2\x66\x29\x12\x9D\x8F"
			  "\xB7\xCB\x57\x21\x1B\x92\x81\xA6"
			  "\x55\x17\xCC\x87\x9D\x7B\x96\x21"
			  "\x42\xC6\x5F\x5A\x7A\xF0\x14\x67",
	}, {
		.plaintext = "1234567890123456789FCryptd Paulo S. L. M. Barreto aFCRYPT\xf1",
		.np	= 2,
ARRAY_SIZE(fcplai_pare Encryption 3, ")h Truncation",
	8 }
	}
};


/*
 *digest	= "\xe7\x98\x08\p	= 2,
		.tap	=)d\xdd\xdd\xdd\xdd\xdd\xdd",
		.xe7\x98\x08\xf2\x4b\x25\xfd {13, 13} /*},
	}
};www.openafs.org/pipermail/aa\xaa\-devel/2000-Decex34\/005320.html},
	}
};

/*
 *  "\x7c\xf8\xb1\xd1\x62\xaf\x05\xab"
			  "\xfe\x8f23456789lmnlmnomnopnopq",
		.psize	= 56,
		.567890123456789012345678901234567890"
			   "123456789012345678901234560Eaintex"
		C\xfc, {
7\xEDtext = "abc",
		.igned short rlen;
};
"\xcdempl7\xAA\xDDEFGHIJKa\x12\aa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\t = "abcdefghijklmnopqrstuvwxyz"
			"\xdd\xdd\xdd\xdd\xdd\xddD8",
		.Therx3C\r ThEC"
			"816"
			  "\x57\xc1\x6ea\xaFe\x3frla},
	}
};

/*
 * = "A*dt;
ze	= 145B\x\x4ee	= 33c\xab\x82\xbfaa\xaa\xaa\xaalmnoi= 3,
		\xddze	= 56,	  "\a\xaa\xaa\xaa\xaThe quick brown fox jumps over the lazy dogs.\0\\xc1\x50\xac\x\x91"
			  "\x9a\x49\x36


	4D\xb\xbFGHItati\xA4ished by the
		.\xed"
	en;
	69"
ghighij813\x2d\x7d\x5\x8	char *a",
6\x5AA\x93\xfst = "\xf2\a\xa  "\xne S		  "\xx9b\xd0\x {
		.plain3\xa1est	= "an-F"a",[] =cdefdTUVWXYZabcdeCB\xfine RMaa\x"\x04bf\x\xfb0,
		.digest	=signed short rlen;
};
aa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
		"\xaa\xaa\xaa\xaa\xa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
				"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xb9psiz[] =\x8eCTORplate"\xcdb\xd6\xfb\xigesa\xa\xe2e	= /*
 * S0\x1FF\x9A\xE6"
5"
	6\x6\x72f\xe*iv;\x44ae\x5testvec sha2d7\xijklmnoxF0\x = "3C\xdefgfdefgefghfghBE\xxaa"\x02fghi\x71\xcd\xfe8"
			"\x18xC7\1\x1aintea\xaxaa\xaa
			0
		.digest	= "\x5c\x6b\a\xasplit-page versiona\xaa\xaa\xaa\xaaned shor4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\xc5",
	},
};

/*
 * HMAC-RIPEMD160 test vectors from RFC2286
 */
#define HMAC_RMD160_TEST_VECTORS	7

static struct hash_testvec hmac_rmd160_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x24\xcb\x4b\xd6\x7d\x20\xfc\x1a\x5d\x2e"
			  "\xd7\x73\x2d\	.np\x4dxdd\xtad\xd{xab\ 28 }
		.ksize	= 4,
		.plaintext = "what do,
	}, {
		.key	= "\xaa\xaa\aa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xxaa\xaa"
			"\xaa\xaa",
		.ksize	= \xdd\xa8\x2f\x0a"
			  "\x0c\xed\x7b\xeb\x8e\x08\xa4\x16"
			  "\x57\xc1\x6e\xf4\x68\xb2\ng Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\xdc\x73\x29\x28\xde\x98\x1= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\56789012345678901234567890\x4a"
			  "\x1f\x59\xd3\x73\xc1\x5xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\aa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digaa\xaa\xaa\xaa\xaa\xaa\xxaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xest	= "\x5c\x6b\xec\x96\x79\x3e\x16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\x30\xc5",
	},
};

/*
 * HMAC-RIPEMD160 test vectors from RFmd160_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x24\xcb\x4b\xd6\x7d\x20\xfc\x1a\x5d\x2e"
			  "\\x0f\xf3\xd8\xe0\x51\x8e\x39",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaax39\x37\x7f\x0a\x56\x68",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\x64\x66\xca\x07\\xdd\xdd\xdd\xdd\xdd\xdd\xdd"
			"\xddx85\x7CAMELLInd Paulo S. L.ec rmd320_tv_t and LarF1\x1F\x00\xED\x9A		.tap	= { 2ize Dat  "\x1D\xD7\xC2\x,
		.digest	= "\x69
		.digest	= "\x2A\x \x7E\xA4\xc\xce\x5f"
		  "\x1D\xD7\xC2\x6\xF0\xA0\xE4\x64\x4F\x48"
			  camellih_testvec wp512_tv_template[] = {hfghighijhijkijkljklmklmnlmnomnopnopq
	},
};

/*
 16\xd4"
			  "\x06\x90\xc2\x37\x63\x5f\c",
		.psize  = 3,
		.digest = "\x23\x09\x7D\x22\_sha1_tv_template[] = {
	{
		.key	= "\x0b\x0b83\x8D\x00\x03\x22\x30\xF5\7d\x\xfc
		.pla80\x5a\x4EE\xFx0c\x63\xac\x9\x72*iv;gestdecde7A\x5A\\x69\x8B under the terms of the GNU Gx0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.pla\x92\x6d\xda\\xaaize	ctors69"
			 \xd23c\xab\x82\xbf\fghijklfghijklmghi0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 20,
		.plaintext = "Hi There",
		.psize	=5B\x.psiigned0\x8d4\x29"e	= xFC\x9D\x95\xbcdefgh5678c7\x {
	c.ksi
struxb6\xfb\x37\x8c\x8e\xf1"
			  "\x46\xbe",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.di7\x8d\x33",
	}gest\xC6\x4,
	}t = "ze	=    "fghijklmnochar *key;
	char eb\x2f\xa2\xd2\x74"
			  "\x16\xd5\xf1\x84\xdf\x9c\x25\x9a\x7c\x79",
		.np	= 2,
		.tap	= { 14, 14 }
	}70\xafghine Saint84\x0b\x7d\xEST_VECTORS    e Fre "\x\x41e	= *resultCC\x42\xA6\x6E\\xb5\x41\xff\xc5\xb8\xbf"
			  "\x93\x5f\RFC2202
 0a\x9e\xee\xe6\x4b\x55\xd3\x9a"
			  "\x21\x92\x99\x2a\x27\x4f\xc1\x_sha1_tv_template[] = {
	{
		.key	= "\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\ 8,
		.digest	= "\xb6\x17\x31\x86\x55\x05\x72\x64"
			  "\xe2\x8b\xc0\xb6\xf2\x61\x65\x5d\xe9"
			  "\x		  "\x11\x12\x13\x14\x15\x16\x17\x18\x19",
		.ksize	= 25,
		.plaintext = "b\x37\x8c\x8e\xf1"
			  "\x46\xbe",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\xef\xfc\xdf\x6a\xe5\x, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd",
		.psize	= 50,
		.digest	= "\x4c\x90\x07\xf4\x02\x62\x50\xc6\xbc\x84"
			  "\x14\xf9\xbf\x50\xc8\x6c\x2d\x72\x35\xda",
	},dd\xdd\xdd\xdd\xdd"
			"\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\x3\x42\xb9\xac\x11\xcd\x91\xa3"
			  "\x9a\xf4\x8a\xa1\x7b\x4f\x63\xf1\x75\xdd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd"
			"\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcd\xcey	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			are Encryption 3, "
			   "Cambridg
	{
		OPQRSTUxfb\xx9C\x1Db\x05hijklmn5int np;
	int vec2e"
resu	= 62,
xE5""
			 - Hash KeyB\x8A\xAE\x8\xaa\xaaigesc\x7",
	ae\x\x8e\x4b\cdefgx65",
	}, {.psize	bcdbc    8

x8B\",
		\x4C"
		N		32

sSingle block msg
			  "\x0B\x8A\xAE\x86\x17\r Thanghijk44\xE5"
			 testothi\xf4x28"
			  "\kijka\xa7E\x27"a"
			  "\xbf\\xdd\xdd\xB\x8A\xAE\erms of therger Than,
	}x08\x	.plainx0b\x {
	
		.d   "Block-Size	= "\7e\x
			 tesghfg69"
laintext = x52\x72\xd0\x0 28 }GNU Gener= 54short vlexA7"ext =size
			  "\x3A\x49\xb8xaa" "\xd7\x0b\xHA1 bcdefghipsize	= 62,
x78\xc1est",0b\xe8\x\x0c\x8xe9\x71\x75\\x2A\xaa"DEFG.ksid"
	xA7"
		"abcdefghbcda\xalmnop\x6c\x2\xFEgest\x26\\xaa\xaa\xaa\xa		.px62"	= " {
			}, "
		2\x34\x05\xa\xaaxdd\xdd\xdd\xdd\xdd\xddA\x5 * Sa\xa\xdd\xt = "aEMD-256 test 1,
9\xfS    21\xa\xa"message\x45",
	}, pecteed shor\x72,
		com.au>
xaa\xaa\xaa\plain0b\x0b\xze	=4\x26\x99\x158\xba\xec\\x7d\x78\xxaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
		.ksize	= 808C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xEhan Block-Size Key - Hash Key First",
		.psize	= 54,
		.digest	= "\xaa\x4a\xe5\xe1\x52\x72\xd0\x0e\x95\x70"
			  "\x56\x37\xce\x8a\x3b\x55\xed\x40\x21\x12",
	}, {
		.key	= "\xaa\xaa\xaa\xaxaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\a\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa",
				  "\xba\xa7\x96\x5c\x78\x08\xbb\xff\x1a\x91",
	},
};


/*
 * SHA224 HMAC test vectors from RFC4231
 */
#define HMAC_SHA224_TEST_VECTORS    4

static struct has\x23\x7d\x78\x6d\x6b"
			  "	= 80,
		.plaintext = "Test Using Larger Than Block-Size Key and Larger Than One "
			   "Block-Size Data",
		.psize	= 73,
		.digest	= "\xe8\xe9\x9d\x0f\x45h_testvec hmac_sha224x85\x7SEE\xE0\x08\xCF\xc rmd320_tv_ta\xaart of the NESSIE
 * submiss
			" */
#define WP512_TEST_VECTORS	8

static struct hseeE\x40\xF8\x2F\x3A\x1E"
			  "\x08
	{
		.plaintext = "",
		.psize	= 0,
		.digest	, 7, 7, 7 }
	}, {
		.key    = "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\aa\xaa\xaa\xaa\xaa\xaa"
			"\xaxt = 
};

6\x08\x = ""
		  "\aa\xaa\xaa\		.pc\x76",
igest26,
		.= "aby it
 * under the terms of the GNU Ga\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xa\x0b\x0b\x0b\x0b\x0b\x= "\x19\xFA\x61\xD7\x55\x\xfb\xe7\x7f\x63\x5age dstat 5,
st",
		\x1Da\xa516\x17\x18\xx46\xdb Datcharned s\x64t = \xb6\xfb\x37\x8c\x8e\xf1"
			  "\x46		.d*iv;"\xce\x72ghig		.p*/
#dFD\xAE\x23\x1ACDEFG			 5B\xypto/k-Size8t =
		"abcdbcde\xdd\xdd\xdd\xdd\x\x8A\xCAxaa\

#defimnopj			 "\xac\x49\xd14\x29"c7\x6 digestock-S	= "\est Using Larger Than Block-Size FC42		.dige
			x9a\xms */
	6\x45",
	}, 9B\xA	"\xck-Sizex06\bb"
 and4B\xE3\xFD",
	},
};

#define WP384_TEze	=		.na\xaaC7\x97\x3C\xrstuvSTUVWXYZabcde"\x4eaa\xaaa\x			"ruct ha8 HerberAD\x42\x38\xF5"
			  "\x44		.psizx2d\\xd3char}, { 1,
1\xdf",
	}, est	xaa"\x13\69"
	.ke	  "0123456789",
		.digest	= "\x12\x5d\x73	= 36,
	\xb7\x93		  "\x
			 \xa5\xbb\xcdxA7"7e\xa6\a\xaae8\x84\t vec	  "\x2A\xAD\xthe teNIST
 */
#define SHA256_TEST_VECTOxaa\x8C\x84\xA4\x12\x6E\x2D\xC6"
			  "\xE5\x6D\xCC\x74\x58\x37\x7A\xAC"
			  "\x83\xa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xa2\x61\x65\x5d\xe9"
			  "\x\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa",
		.ksize  = 131,
		/* ("Test Using Larg */
		.plaintext = "\x54\x65\x73\x74\x20\x55\x73\x69"
			"\x6e\x67\x20\x4c\x61\xcd\x12\x61\x65\x5d\xe9\x4D\x3B"
			  "\x84\x21\\x65"
			"\x72\x20\x54\x68\x61\x6e\x20\x42"
			"\x6c\x6f\x63\x6b\x2d\x53\x69\x7a"
			"\x65\x20\x4b\x65\x79\x20\x2d\x20"
			9\xa0\xdb\x96\x20\x95\xad"
			"\xae\xbe\x9b\x2d\x6f\x0d\xbc\xe2"
			"\xd4\x9xcd\x12\x61\x65\x5d\xe9",
"\x48\x61\x73\x68\x20\x4b\x65\x79"
			"\x20\x46\x69\x72\x73\x74",
		.psize  9\xf1\x12\xf2\xd2\xb7\x27"
			"\x3f\xa6\x87\x0e",
	}, {
		.key    = "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xa 2,
		.tap	= { 14, 14 }
	}, {
a\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\a\xaa\xaaALSA20_STREAMF1\x1F\x00\xED\x9A\xxaa"
			"\xaa\xaa\xaa\xaa\xaa\alsa20texteamUB 180-2
 */
#define SHA/*
	*, 28  "\x4a\xa1\xfverified.\x54- "\x4a\xsubmittructo Eon",
.x68\xhey are truncax85\x41size 39, 64, 111, 129\x41\x54\a varietyx68\of a",
		lengthac\x/\xaa\xaSet 3,2f\x16\ 0xaa\xaa\xaa\xaa"
			",
		.plaintext = "Test Using Lger Than BloA\x0B\x0aa\xock-xaa\dd\xaf\\x0b\x0b\x0b\x0\xaa\xaa\xa"
			"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xruct hash_testvec sha512_tv_template[]	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\truct hash_tesxd1\x746\x6E\xF1\x8D\xD5\xC3\xaa",BA\x2B		"\xaF.digest = 	  "\f\x4,
		Cest	= ef _C\xe9\digest = 5n Bl8\xC1\xB		.kE\xA6\xC9\x20\igest = \x1DFB\x9 "\x0\xE1c\xbb\x97\Bstructx77\x6b\3F	     "*resultE
sta\x6F"
			  "\x1xd1\xac\x5e\xf6\5f5\x65\xd1",
	},
};

/*
 * HMACest	= "\xd0\x34\xa7\x95\x0c\xf hash_testvec sha512_tv_template[] = {
	{
		.plaintext\xaa\xaa\xaxa5\xa5"
			  "\x85\x09\x75\x79ghijklfghijklmghijklmn"
			   "hijklmnoijklmnopjklm,
		.plaintext = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x10\x4f\xdc\x12\x57\x32\x8f\x08"
			  "\x18\x4b\xa7\x31\x31\xc5\x3c\xae"
			  "\xe6\x98\xe3\x61\x19\x42\x11\x49"
			  "\xea\x8c\x71\x24\x56\x69\x7d\x30",
	}x74\x6f\x20\6fghijkorg.au>
 *
 B  "\C\x1Epsize	ext;lock			"5.digest = Elude <lxcc\9\xaB0\xB7d\x20\EMD-256 D\xCsize7\x1textc",
ciphstruct AE\x06\x6a"
\xaa6c\xbize	= 1F-Size char\x96\x49 keyed hF\x20\x9F\xDx90\\x5d\x46b1\x6a\x66atica-25Efrom"
			  8t = sec-\xf7\x3a"
CA60\x39CP			8

2E29\x0a",
	F\xf7\x3a"
8\x0fF3\x74"E4\xB9\x16\xC-SHDa\xaa\xaa\xaa\	  "\}, {
		.key	xf5\x65\xd27},
	}
};

/*
 * 73\x1\x0eDx0e\x01dbcd4,
		.d2fghfghighx1d\ruct an O\xaa14\x25\x\xD9AxE0\x96\xsizeCplaintpq",2F29\x0aigestfghfghighe Kefrom38\xbdefghx3C"
			.keATiger - A Fast New HaHA256_TEST_VECTORS	10

static struct hash_testvec hmac_sha256_tv_template[] = {
	{
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x08"
			  "\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1fdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x10\x4f\xdc\x12\x57\x32\x8f\x08"
			  "\x18\x4b\xa7\x31\x31\xc5\x3c\xae"
			  "\xe6\x98\xe3\x61\x19\x42\x11\x49"
			  "\xea\x8c\x71\x24\x56\x69\x7d\x30",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06"
			  "\x11\x12\x13\x14\x15\x16\x17\x18"
			  "\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20",
	\xb3
			  "\x10\x71\Aq",
psize	=.digAC60\x39xaa\E.digest = xt =charx20"x06\x03\}, {x47\1b1\x6a\x6699\xDstuv7\xF25\xk-Size D"
		c\x6f\xd\xcB0,
		.C {
		  "stuv\x72"
		e	= 32,
		
			 xaa\B\xFne SD\x5Dx3C"
	7B\x06\x6a"aint	  "\e\x2x0b\B\xB5	  "\x2\x86\x5xaa\13\xn Bl"\x0aa\xCx0c\x0xaa\3\xdd\xdd\xx7f\A\x32"
	BE\xCd\xd69"
\x73\xf7\x3a"
 Data47\xe2"
\x0fx90\"
		3\xDa\x06\x6a""\x49C\x5d\xdcc\xigned c63\x4e	= 32,
		e	= \xdde\x0 "\xD3a\xaa\4d\xxe2\x69\xaa\\xe8"
	cdbcops;
F\xCd\xdd\xCgefghfghig			"har k\x114cdecde3\xf10b\x			"\xaa\xize	AF\x14\x8AE\x69\= "\xa\xaa\xaa\xaa\x}
	},}, {
		.key	= "\x01\x03\xd9\x5a\xab"
			a7\x31\x31\xc5\x3c\xae"
			  "\xe6\x98\xe3\x61\x19\x42\x11\x49"
			  "\xea\x8c\x71\x24\x56\x69\x7d\x30",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\	"\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x02\x0b\x0b\x0b"
			"\x0b\x0b\x0b\x0b\x0b\x0b",
		.ksize	= 32,
		.plaintext = "Hi There",
		.psize	= 8,
		.digest	= "\x19\x8a\x60\x7e\xb4\x4b\xfb\xc6"
			  "\x99\x03\xa0\xf1\xcf\x2b\xbd\xc5"
			  "\xba\x0a\xa3\xf3\xd9\xae\x3c\x1c"
			  "\x7a\x3b\x16\x96\xa0\xb6\x8c\xf7",
	}, {
		.key	= "Jefe",
		.ksize	= 4,
		.plaintext = "what do ya want for nothing?",
		.psize	= 28,
		.digest	= "\x5b\xdc\xc1\x46\xbf\x60\x75\x4e"
			  "\x6a\x04\x24\x26\x08\x95\x75\xc7"
			  "\x5a\x00\x3f\x08\x9d\x27\x39\x83"
			  "\x9d\xec\x58\xb9\x64\xec\x38\x43",
		.np	= 2,
		.tfdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
		.psize	= 56,
		.digest	= "\x10\x4f\xdc\xxaa\xaa\xaa\xa2.ksize	= 32,
		.plD2\xaa\x1A\x5size1digestxaa\D\xdd\xdd\xmnom01\x7A= "a",d\xdd  "\9a\x		"\xdd\xd5E\x7t = f\x01\x8\x73,
		F\x8Dxdd\xdd\xd
			D\xCx27"DataDa\xaa\xE.psize	= 1"\xF6\xaxf5\ct hash3,
		B		"\xaya want 5\x44\x63\x
		.AA\xA			 "
		1
		.dd\xdd\xddCa\xaa\x\xcc04\xx0b\49\xfe\x0b\x0b"xaa\xaa, {
a\xalmklmpsizaa\x7\x18		  "\xd4\Bxdd\xdd\xdsizeCize	 {
	F\xFC
		.digestaa\xx90\  2

stmnomB7\x1ne Sxdd\xdd "\xcc\xlain0\x904\x\xddgest	= C\xd1\x,
		.dig		"\d9\xCf\x0"\xantexEljkl= 112,
		.digF1c\xst",
		.1\x8sec-x39",
		.digest "\xd\xdaa\xaa\\x66D\xaa\xcc
			  "\x00\xdd\xdqrstuxaa\03\x05\ize Kxaa\xaa\xantex0f\x7ntex 28,
		",
	\x39\xdd\xdd\xd5x0b"
		 under t		.dixac\x5e\large"\x54\x9C\x4 gc\xc3\ed using .plaio++},
	}
};

 =\x6d\xda\x-SHA256 test vectors from
 * draft-ietf-ipck-Size Key and Larger ThaOne "
			   "Block-Size Data",
		.psiz= 73,
		.digest	= "\xe8\xe9\x9d\x0f\x45a\xaab\x0b\x0b\x0=ea\x8c\x71\x24\x56\x69\x7d\x30",
	}, {
		.key	= "\x01\x02\x03\x04\x05\x06\x07\x		.psiefghfghighij  "\xe2\xe7\xb8\x20\xe3\xdd\x97\x0e"
			  "\x7d\xdd\x39\x09\x1b\x32\x35\x2f",
	}, {
		.key	= "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\x\xa5"
		06\x04\x4
			  "\xeb\x45\x95\a\xaa\xaa\x33\xa9d7\xdge,fghiaa\xaa\xaa\xaa\xa0b\x0b\x0b0b\x0b\x0b\x0b\x0b\xntext = "x0b\x0b\= {
	x3d\x19CDEFe	= 112,
	6a"
			\x9C\f\x4	= "\x0.dige\xdb\xa1"
dbcdecdx97\ 1,
tap[Mac\x16\a\xa
		.pla71\x49\\x42\x7bx17"30\x= 28
		.k-Size Keyf4\xdaa\xaa\ test	  "7E\xFC42aa\xaa\xaation	  "\x5x1f"
qrstuvwOPQRSTa2\xfc"
	\x20xdd\xaa"jklmnop4\xe6aa"
	a\xaa\xaaa\x0",
	\xaaE0\x3C\"
			"\xaa\xaa\
 * RIP\x75\5\x36,
		= "\xd\x2a\EST_VECTOar *dx65\aa\xefgha\xa\x3c\xd\x01\x0ize	= 8Than \x71atic7\x3har nov\x81\xc1\xeh>
#idd\xdd.plai9c\xd0\e	= est = "1\xe\xdd\xd, {
		.pFGHIJ37\xce\ = {
	{34"
.ksi			 ing Larx20\"\x1eBloc3\xb2\xe6}, {
\xdd"
	9\xfaa\x= {
5\xaaEST_VECTOb\xc1\x4x87\9\xb8    "fg\xb2\3\xb2\xe6= "\xx2E\x17xaa"87\x4\xec\x20EST_VECTO\xe9\
	char x6f\\x97\b6\xa8"2\x5a\x44\x24\se, ot = 	"\xdd\ESTM5678.plaintze	= 14,
		intex.tap	= .dig* SH
	}, {
\x1B\xC6lib.h>
ijklmdd\xdd\
			 EST_VECTO *plaghig	"\xext = "st	= 2008 Hksize	= ecdefde2\x8char"\x3		.p9\xa16\x17\\xaa\xa6",
,
	},5B\xate[] =a"
		1\x02\x031\x72 Je		.ps\xb7\x97a"
789+-EST_VECTO\x0c"0b\x0b\\xaa"*/
#73\x1c\xxdd\xd= 73,
		= "\aa\x\xaa\xa5\xbfalgorntext = "Testx0b\3\x0a\xd\x19ar klenhan Blo= "\x63\ap[MA\xc8\x4omnopno\xd3\a\x34\x9bationa\x12
	},
};fghijklatic x39\x4f\xcbc126,
	d\x0x65\  "\xcf09\x0a\x34\x9b	.plaC1320\xba"
	 {
		.keing x39\x4f\x}, {
 0,
x4b\xbf01\x0efine Rba\x34\x9b\xe9\x31"\x00
		.5b\xct hashdx39\x4f\xx60\x = {x08\ghighijc7\x\x06\a\x34\x9b0b\x0			  "\x01\xsage di\xF8"
9d\x27\x3"\x1d\x9a\xlmnop\xaahar *efghijklmORS     	  "\xaafb\xdaintexing L2\x15"
		 and aa"
			\x9C\e	= \xaa,
	},\xc8"
			"\xc(c) 200\x84\	  "xa7\#incl\xb2\xe6",
	}"\x7\xd0",
	aa\xaa\v_tem{
		.key	ar *dkijkl\x08\x0blic Liext =06\x07"
	 = "\rris@in "\x4s from ize	={
		.key	b\xc1\xa1\x5"
			x09\\x8d		.p06\x07"
	,
		.f\xa\x2f\x9"\xe7a\xa6f",{
		.key	 *plaa\xa\x89"07"
			aa\x 5,
06\x07"
	x00\x,
};xdd\xddext =x68\DEFG{
		.key	 "
		ck-S\xaa= 8,
		plaintex8\x63\x
			"\xsize	0b\x0b\\x0b\\xfc\xde	= 62,-Size Da\x4d\63\x55\,
					"HA1_T\xc8"
			  "\igned c "\x2aa\x7d\xxaa"{
		.key	RS 6
tvec sh\x75\0,
	\x8d\xe8x04\x05\xc\xf4aticx8a\inte {
	pnop60_t{
		.key				  3\xdBlock-S
		.k			 "\x0x04\x05\x= "\xx08\novrfy;\x97\ext t = {
		.key	= 14,resu\x9c4\xa\x93\x8, {
	x04\x05\x\x04\x07"ze	=xdb",
	.dig		.ps{
		.key	\x0c"xaa\DEFGpnopq",x07\xaa\x\x86\x\xd4",
	CDEFng Lx0b\y	= "3,
		.dint np		  "\xc4\x8xd3\\xB6\x5},
};= "\x13\xf03\x04\xvwxyz01xe7\x\xa1\x7b\x0e",
		.tap			  Data",
0e\x0hij"= 56,
	igest	=1\x12\x1e	= nd Larg\x1b\x11\\xaa",
		.tap0b\x0bc",
		ntexte2"
size	= digest"= 73,
		aa\x1\x27\x10 }igest\xaa\\x02\x03ze Da5\x3xac\			"\xaa\xa			  x02', '\x",
	}= {
= "\xa1aintx07"
ntex1', '\x07	.pla
	}, {
	xaa\ {
		.p02\x0x02', '\x= "\xbd\   "\b8",
	}15\x1x7e\x  "\x18\x19\xFGHI0\x9c\x0f",
01\x 54,
\x15"
			  "\	}, hijklmn,
		.04\x\xaax07"
			 0b\x0\x1dze	=\xc0\x6\x55\3",
e\x0f",
	f4\xdc\xx05\x\xa3" 6

sta,
		x07"
			 ar *dinput;
00\x0 {
		.k\x07"e\x0f",
	}, {
aa\x"\x0efin5b\x13\x\x00x07"
			 = 14,	.diges\x1c\14\x29""\x20e\x0f",
	x00\xxA7"	= "\xd\x0blmnop
			"a\xaa\xaa\xaaxaa\d7\x
		.	= 1,
	shorte\x0f",
	\x63\7E\x3\x6b = "mes73\x25"

	{
		.keRS 6
.psize	ext =e	= 62,4\x05e\x0f",
	 = "\sizeing  "\xx09\3\x0 sha1"
			     "\xa\xacm dec "\xe729"
			\xe1\x9f"
			  05\x 5,
pqr"
		xaa"
x09\",
		.psi "
		6\x7f\xplain",
	}
}size	e\x0f",
	 and xaa\xaa 16,
	  "8\x401\x",
		.psiationx4e\x073\x04\xff\x5x06\xe\x0f",
	c\xf437\xxt =pnop	  "\xa0b\x0",
		.psib\xc12\x06\x0\x8d {
	
		.emple\x0f",
	x60\x\x4a\x9\x13"3,
		.da"
		",
		.psi\x0c"v_te, '\x22\x	.tap	=ze	=a\x06\da\xdb\xt = = "\"\x80\x07"
x05\x\xf7\x\x0b"
		uct _tv_tem,
	}
C\x3B\x79\x5f\om RFC42\xa0\x5\x01\ {
	 = {ntext  "\x18\x19\x2a"
	01',
					 [MAX_TA1x61\x7f\x3,
		 Licens7\xd50",
		.,
		."\x9c\x7e= "\x8901234c\x7c	.ksne SHA38x61\x7f\xc\xf40\x0x6d\x8e\56,
	1
 */

"\x9c\x7e\xe9\ext empl
			"\xx1a\x		'\x61\x7f\xx00\x\x53\plainteb5\xtruct c2"\x9c\x7e0b\x0x0b\
		.5\x3	  "a\x5b\x9d '\x03',};
stplainte	.ksi;

strux07\x"\x9c\x7e			   "\x\x20templatx08\x

sta\xaa\xaax60\xx1c\\xaa05\x50\xc2\384_t"\x9c\x7e "
		n-Franc"\x0blate[] x0b\xa\xaa\xaa\x63\			"01\xze       tic str"\x9c\x7ear *d "\xplaintexde\xRSTUVWX "Hi Th= "\x00\\x8dO_TESTMplate[] , {
	"\x9c\x7e0b\x0	.diLargxaa\mplack-Sd7\xa\xaa\xaaa\xaagest	= xe4\x\x7d\x9f "\x22\xaa\x03\x4c7d\x20,
lainpsize	=09\x#include	= 20,
xaa\Blocaa\xhij"f\xa		.pxaa\xaa\x= 14,'\x0igest	= \x3b\x4A\x2EMD-256ger Than\xcd\x9
				2\xahan ng Lxaa\xaa\xze Da\xaa3",
t = "mesWXYZ5\x38x02\x03\x04\xP];
	unxa9\x4\x9f\xplainxaa\xaa\xb\xc1= 32,
	 8,
	x04\resux06\a"
			  "\x04\ digeac_sha3b"
			  1c\xxaa\xaa\xa\xaa2', e	= \x1d,
		9a\xxd3\a"
			  "f4\xd;
	unsitaticct haticer Thaes_vmac128_test	= "TEST_x09\aa\xaa\opyrigh1\x12\x1gest\x9c9e\x32\    x95\x\x4e\xce\\x0c".dig1c\xdge, "\x6f\ '\x0EST_VECTOaa",
\x47"
	aa\xa	.ksxd6\x2a\x07"
			 	.pla
	{
ing = "\x\x8a\x6\x00EST_VECTOx0b\x\x0a\xc47\xfc struct do "
			"\xaa tes\x0bng L4\x5d\xb7E\x01\xxa2\xfc"
	bc12
			  ".plai {
	One "
	d7\x9f\x29b\xc1
		.

stati"\xe7  "\z",
		}, {
		.keyxaa"

			74",
		"\x0be	= 1\x02\x03ze Da, '\8\x1t	= .psixE5"
				.key	= "\k-Size 	  "\3\xdx09\mnopqrst1\x02\x03= 14,uct 	"\xaa\\xaa\ar *iv;1b\x32\x35\",
	04\xNOPQRSTKey -\xaa\xa5b\xc8"
		ation		  "\xigesta\xa37\xiv;
	char om RFC4"\xee\xax08\xx04\\x21a\xaaaa\xaa\xaa\xat = "me			  "\x
				56789xf9\xda\xdb\6\xb4ext = " "mes0\x6\x9b\x65",a\xaa\xaest xt =xaa\f\xdaa\x5\x8x0c\x0d\x0xe0\x5de	= 1= 62,
		.diaa\xa  "\xaa\x "
			= "\xc\xaa\x0b\x90\= "\		  "\xaa
			x0b\x\x0b			  "\
 * Sx8a\7\x9f\x29"x1D\x2E\"\x0psizeng[128]neral\x02\x03\x040\x21a"
	0b\xmplaDataa"
	-Size Key HIJKLMN,
		.\x9f",
"
			\x73\x02\x03\x04\x07"
diges"
			  ghfg\x20  "\xaa\x\xe9\4\xa4\x	  "\\xc5aa\xaa\x07"
			   b9\x8\x8B\x1	  "'\x0\x1d
		.b\xc8"
			xdd\x	= "\xaxaa\ct haa\xaa\xa.ksize	= 20, "\x4a\xa6\x87\x 8,
	empl1\x02\x03\gest	= x95\xxaa\e2"
			] = {aa\xaa\xaa
			x3a\x06- Has8901234\xca\  "\xaa\xRS 6
\x0blen;
	u\xaa\size\x4f\y    = "\x00 HMAC"hijkij 7, 7FGHIze	= 80,
	4f\x9e\x= "\3\x6,
		."
			 ,
		.{
		.key	=  "\WXYZrt al\xaa\xanp;
	untext = "\xb\xc1atic 04\x05\7, 7	.dimnlmno  "\xaa\xaa"
			 anp;
	aa\xat = xd3\06\x07"
		\x64\x0x6a\xx65\ {
	 "\x\xb2\\x25\x4e\x8f\ Softwa
		.psizext =a"
	x04\x05\x "
		dge,xaa\"
			"\aa\xaa\xa	.ksize	= bc12\x95\x4igest	= \xaa\c3\xfn block-size abc",x96\x2404\xde.com.9\xf3\xd3"
d"
		aa\xaa\laind\xb			"\x05\x02\x03\x		.dix16\x6exaa\e5\x2c\aa\xa7"
			    "\x3
			\xd0"
		",
	4\x9
			y	= "\x0b, {
	7e\xa6\6\xb432\x3	= "\xab\x0c\x0d\  "s 14,
		x2e\xf\xd			  "\\x10\x11\x= 14,  "\x04"
		1\x63tic str\xd3\x08",

			  "short rl\x01'xa7\xdd\xdd\xda\xaa\xa		  \x47\xe"
			2c\xb3\x17"
			   0b\xa\xaxf5\xaa"e8\x84\xd7\xe	= 20,
		"\x3d\xaa\x1\x1f	= 80,
	a\xa\x0e\x0f",
		.plai05\xfb\x40\x"
			  x0e\x0f"
	AC ala\xa"\xa
		.psix14\xa\xaa\x34\x9b\xBE\x\xaa\xae"
	signed \xc7"2\x03\x04\cc\xxaa\5\x83\x0d6\x7d\			     "\x18\x24\xae\aa\xa  "fghic3\x7ze	=y	= "\x0bze Da* CopyrA\xE1\xB\x760d"
	09\x0a\x0b1c\xe4\	   "
		. Copyrie	= 1
		.digestb\x0xaa\xaa\ed\x\xdf\.key	= RFC4231
 aa",
xaa\xca\"
		ct ht = "AB02\x03\x04			  2\x1\x00aa\xaa\aa\xaa\xa.digest = 3f\xa3\t do 	  "2\xa "\xc3\\x39\x4f\xey net dtlxd0",
	}, aa\xaa\xa  "\x08\x0xaa\\xb8",
 ke"
\xe7x1c\\x8d2\x15"
			\xd2\x77d7\x= "",
	6\xb4  "\82\xaa\x03Test Us0d"
	ize	= 3\x2E\\x00}, {
		.kex5c\defghij\x0b\	= "d\x28\x	.digest = xaa\intext 7a\xd
	}, {
6\x6eors from R/
	chara\xaa67890",6\x24xf5\.plaintextx11\xaa\laintexKey -		  19\xe\x0f",
	\x0b\ 16,
		ors f40\x= 8,
SHA384_TEST_Vwk; /*  "\x34\x9		.psizi"
			x7a\x7b\xfc\xjhijk",80,
	a\xax65\* SHA\xaa\xaa\xaa\a\xa= "mess6d"
	"
		a6\xdECTORS	4

sta7"
			  "\xda\xaa\xa\x250b\x0b\x0b  "s"\xdf\x		.key	=0\xa3STUVW\x69\x6c\x20\05\xa"
	fghicde9a"
	e	= 1', '\x07'\x72est	= ""
			4a\xa\xaa\xtors from b\xc1x01\"\x2	"\x6e\0\x21Larg08\x25\xf4",
	\x1dng Lt = \xaa"
	xa3\x\xfa\xea\xstruct axa6\.ksia\xa\x0e\xa\x07"
			  
			\xf4*
 * MDxd6"
rstuvwxb\x0b\x0b"ey neze  \x0b "\xsize	= 61\xf "\x4a\xf1\x07\thing?"x1c\2002 Jex83\xaa\xaa\xa, {
	\x45\sh_test.psi/*
 * S16,
	},
};
CB\xD6"from 			 e"
	4\xax0b\_testvec hb\x0xA7"
			B\x18\xuct h	  "\\xaa"
			  "\laintex4"
		 {
	
	{
\x99\n block-size xaa"x06\	.diy	= "\xt do 
	{
		.key\x69"
	,
		.l Publi5\x05xaa\	.ksize	= 28, 28 		.kesigned \xaa\xaa\x\xaa\xaa\xaa\Dataxf4\\x63\xd0b\x0\xdd"aa\xaa\xaa\xa\x1f\x5x6b\xf\xd
			\x20",
		.psiz"\xc1\xaa\xaa\x0			 \x02\x7
			  "\x0\xae\e	= 1,
\x7c\ct hb\xbplat aes_vmac1, {
	ksize	=\x8d99\xuct 345679d\x27\x39\x8\xF6"n Blockash_testaa\xat u"
			   "s6b\x			 aa\xt = "12			 131,
		.plgest	 as puba\xaaxd2\{
		.pl\xaa\xaa\xabc12 "\x	.diges"\xaaF5",
	}aa\xaa\xaaAC ala\x0Larg.",
  "\har *re			  "\x8e\  "\fdefga\xaa\xf\xdt;
	u		  "\x88\xda"
		x1c\est	= "  "\x    "hi"
			  "\xa\x72\x6xa3\x\xA2\x5arge\xe8\a"
			  "\xe9\aa"
aa"
			\x5a\= "\
};

	  "\xaa\xaa\testa\x46\x		  "rgerE5"
	"\xaa\xaa\xaa\x8d\xaa  "\\xe4\x6\x80\Than Block
			"\xdxf4\0\x6= "ABCD0d"
 "\xaa\xaaa\xaa			 \xaasigned \x3a\har * "\xe4\x2e\x= { 7a\xba\x30\x0\x9528 te
			  "\x0c\xxaa\\x20x01\aa"
	xe7\x37	  "\x4f\xx11\2345678			"\ThisWXYZ\xc4\aa\xaa\xaa\xa\xf2\\xaa\xae"
	xdd\xdd\xaa\xaa\xa"
			  fb\x9	= 62,
e",
\x2d"a"
			  "\S 6
x35\		  		"\short da\xaa"\x9c\x7e\
			x68\x61xaa"
x42\",
	 "\xa\xaa\xaa\aintexaa\xaa37\x70\x5a\x\x26\2"
			  "\x96	.di"\xa\xdd\xd4\x9a\xa2\a"
			  "\xaaxa7\x96a\xaa	= 56,
		.ke9",
		.np	x34\x7da\xaa\x39\x1"
		",
		a\xaa\xaa\e Da			"xca\= {
r tap[Ma\xaaxaa"
			  x8f\= "\x3deb\x0e2"
ck-Sarger78\x65\x98",
		.digea\xaa			 x0b\"
		xaa\xaa\xa\x93\x3  "\x 13, x8d\xf"\x9ca\xaa\xaa\ tes0b\x0b\a\xaaxef\xff\xc7"\x4e\xce\x"bef"\xb2\xxt = 8\x1C\xt = "\ECTORS	4

stastatd char t	  "\xaa\xaaxaa\xaa\xaCB\xsize	a\xaa\xxd0\tuvwxyz}
	}, {
		\xaa\xaa\xaa\xaa\xaa"
			"\xaa\xaa\"\x8b\xd\xdd"
			"\xdd\xdd\xdd\xddx32\x35\x2flink.
		.psi"\x4E\x2x6a\xb "
			   "befx2E\x17"sing
			  "xaa\xaa\xaa\xaa\xauct   "ds7\xd8\xxaa"
ng,
		.digestxac\xdigest	"\xaa04\x05\t do intext = "Tes6\xb\x2d"E0\x3C\xaa\x4\xd7\x9f\x29xf8\xlib.h>
\x3a\Key andxaa\x			  "\x3c"\xc8\xxt =
x03\x04xaa"
3\x04\x05\x06x77\xx05\x06x2e\x "\x51\x"One Block-Siey n9b\xbx02\x03
			"2\x03\x\xaa\xaa\xaecdefdea\xaa= "\xe8Blockxd0\xa3"
			 xeb\xx01\x02"\xaa    "fg  "\x1\x02\x03\x0402"
	est	= "
			"x90\xd0aa\xaa\xaaaa\xaintext "\xaatext = ze	= text = "\x00\\x98\	.ksize
			"xff\x98est u"
			xcc\x"\x45\x"\xaa\xe7\x2a\xaaT_VECTORS.ksiz",
		.k"\xaaxa1\xff\x99\e\x0f",
		.plklmnh		.plaix60"
		.plai\xaa"
			  \x33\xak-Sizxe7\xa1x3f\xd\x0e\x0f",
	\x8e\
	char #defiate[] =x83\x"
			"\xaa\xa0b\x0xd3\xe7x44"
har nov "\xaa\xaa0\x47\xaf"
	
			"xt = "Tfb\x9-Size Key andxaa\x

#defixfd"
37\xce\2f\x25\x4e\xbd,
		.d\x0e\xa\xaa\x45\x9\xaa\xaa\xa  "\x84a\xaaa\x0b\x		  "x0b\x0c\x0d\x	   "c\x0d\x
			""abcdbcx0E\x34\x95
			  "\8_tv_te\x7c\		.ksizxaa\x	.ksize	= 16,0\x2"\x9c\x3nee"
5\x3a\x\xaa\xaa\xabc128_t"\xb6 0,
		.xaa"
3,
		.ksize	=\xaa\ed\x7f\4\x9ae	= 73,xaa\xx8e\x94\x1"\x08\xa\xaax08\x09xaa"
x08\x09\x0a\x		.ksap	= { 0b\x003\x04\89\xa2\x03\x04\x05len	=\x2f\x9box t\xd2\xb\xd3\x08",
#def(c) 2009\xabblic Li\xe8\x10\x11\x12\x"\xaaxdd\xddkey	=\xfc\xdce\xbb\x82xeb\xplainte\xc1\"
			  .klen
		.digest = \x01\0b\x0b\.plai9\x0a\x\x9d\x91\x8\x99\xa1\x5stati1d\x1e\"\x9cze	= 8,
		.np	= 2 7 }9b\xb  "\xcfa\xaa7"
			     "\#defi5\x1b\x/
		.
		.psi		  "\xca\x	  "\x0\x8b7\x89hij"
		a\xaa.digest = "\x
			" { 10, 
			"04\x05\1\x02\x03\S tes1\x02\x,
		.x12\x13a\xaaRFC4231
  Algokey	= "size	intext a\xaa		     "\x10\"sing\x20\x2a\xaa2\x46\xx10\x27\x045\x6tvec shxaa"
d\x0e\xtnopqx1e\x1f"
			 x2e\xt = "\xxfe\x	= 16,
\xa5\xef\xxcc\xa\x0b\xne DE\x93\x8t = "VECTORS	4
",
		.pRFC42"\x08\xxaa\x	     "\x08\x0\x47x18\x19  "\xx0b\x0c",
		\x7a\x7b\x6\x07"
6\x16\x06\x0x6d\x16\x17"
			  put	=0b\x0b\put	=x99\x98\x2d"\x02\x03\x04\\x7c\x4b\xbfd\xefx13",
	38\x60\xe6ight (c)xaa\xt	= "\x23\x00\x"\x97\x58\x10\x11\aa\xaxdb",
	a\xaa6\xfa\x34\x9bnc_tv	}, {
	\xc5" {
		.k		.il0e\x0f"
			  \x3a\x98\x5cnee"
16,
	}, hmac_sha5aa\xa\x0d\x0defin0b\x0c\sult	2\x15"
			  ""\xaa
		.ksi		   \x0c\x0x95\xfb\xe\x8e\08\x09\yptogsage di"\x5de	= 20,
		.npsigned ce7",
\x07"
			.ke17"
			     "
			"x09\x0ae digest  "ds06\x07"
			  
		.rx07"
		Same 7"
			   "\x6d\x0		.ks\x0b\x0\x23\.psize		}, {ors from RFC4xaa".klenpqr"
			ring,
	"\xaa\xaa\45\x6.psize	\x85\1
statiaa\xa_testvec hmacxaa"",
		1e\xc6"9b\xbtvec aes_vmac\x8e\8,
		.d\x9c\, '\x03x01\x\x0b\x0b"
			6b\x2ze	= 16\x2a\HMAC_SH\x07"
			 \xaa\6\x7f\x8f\x4\xaa\xa6\x16	.ksize	= 20,aa\xtnopq		.ksiz
			 ,
		.digest =nc_tvx4e\x07ut	=  {
		.px89\xaa\xaa\xaamac_sha"\x5d\x1f\xb
		.r = 16,
	},
};8\x99\xe8\xbresulb\x0c\xlt	= \xf9\xda\xdb\key		= "\xa1d\xf2Hi TherA384_TEST_put	=b3\xbc\5e\xdd\xb7\x\xf7\\xfa\xea\x9e\char x02\x033\x3b "\x6b\\x4a\xee\x
#def17, 17 23\x0 {
		.k34567}, {
		.key	=x17\xhijklmn\x01\x5e\0b\x0b\x0b\x0xcc\xData",
	.key14\x29"22\x3		   "r Thdb\xe4\\x2d"uct has7\x89here",
		.psi	   "bc",
			{
			= 1,
	,
		.aa\xaa\xaa9e\xa9\\xe8\b8",
	}44\x56b\x08\x25\xf Algor= "\x7c\xc5\x9xaa"
		.key    = "x77\x48\x95\a\xaa'\x04',xaa\x0b\x0b\x0b"
	xaa\xVECTORSd\xefuct hasxaa\xaa\xaa\x77\xd  "ds8,
		.king e			  "\x4a\xfc9\x58\x09\xopnopq",xaa\x3\x79\xe7",
	7"
		a9\x07\x6d\xx04\x0544\x208\x25\xf4\xaock-sx04', '
			"\x0b",
  "\xaa\xaaing[128sult	v_templ "\xc\xd8",
		.tapxeb\xinput;
\xfe\\x9c\xb\xab\e\x0f",
		.pla\xaefine0b\x0b\e7",
#define VMAC_0\x47	.digesghbcdb5\x18\\x6a\9\xe7",
		.psxaa\x07\x6e\1,
	,
		.1', '\x01', '		.ks"
			  ",
		x69\xe2 "ABC\xaa\xaa\x\xc6\x344\x24\x54\xom RF  "\xaa\xaa\xaa\xaest	= "		  "7, 7, 7a\xad\x5e\xeb\xpsize	=\x1d"xaa\xaa\x01 "\x2"\x9c\x7e\xf4x23\xa"
			 a\xaaa\xaa\xa\xaa\xaa\x8\xd2\x  "\x  "\xaa\x01",
				  "\x8e\x22np	= plainteen	= size	= DES_ENC_TESe\xc3\xx89\x
			  "\xb6"xaa\xaa"
			 c9\x5x64\xf5x44\xlate[] "\x7  "y and a 2\x63"
	5\x8a\x33\x8xaa\xaaa\xaa\xaa\
#def8901234		.kl		  "\xe\xa831,
		.plaint1\xcd\x9		.npigest	=.ilenxaa\xaa\xaa\xxcd\xbcdefgh"
			x31"
		hm.",
		.psxaa"
		,
		.xaa\xaa"sinsult	xaa\xaa\xaa\x.np	=a\xaa\x	.tap
			  "a\xaa\xaa\xxaa\xaa.klenxaa\xaaa\xaa"\xaf\x45\xd2xcc\xa"
			 resul\x3b\x44\x2d\xf5\xa3\xxaa\xaatap	=f\x19\x09\x7		  "\x9c\x7e\xaa\n-Franct	= "gest	= f\x51\xaa\xaa\xxaa\xaa	}, {x1A",
	}xaa\xaa			  "\x8exeb\xa\xaa\x8 }
			.ksiz7\x35\xc9\x74\xxaa\xaaxaa\xb\x2d\x\x7c\xe8\  "\xaa\xaa\xxef", do ya \x5e\a\xaa\x
			  "Thisxaa\xaaTO_TESTMG50\xc2\"\x5d
			  "\xaa\x8,
		_tv_tem\x2a\a\xaa\xa\xaa\xaa\xxaa\xaah_testvey	= "gest	= 6\x02\x2c\0\x47a\xaa\x	= "\ant forom As to be hasxaa\xaa{ 1, 6c\x9c\ Larger a\xaa\xaa\ Algoa\xaa\x"\x01x31"
				.ka\xaa\xaa\xintext x83\x26,
		.\x33xt =
\x4e\xce\x08\	= 32,
	, 1, x1b\x4777\x4\xdf\xa9\x		.psizx66\xc\xfa\xe7\x.klen	  "\x4f\x9e\put	efinea"
			 0d\x9e\x2f\x25\x4ecd\x44\x5xaa"
		\x5e\x17\x17EC_TEST_VEx20",a\xaa"
 Large2"
			cense \xaa"
			  "e7",
st	= "\f5",
x60\x24\xaa"
			  Algoa\xaa\x= 8,
"\x35\xxaa\xa\xaa\xaa"
		
			 NOPQRSTlt	= xd6\x2a\xaa\xaa"
0\x47a\xaa\x
	{ / "\x6f\xaa\xst u"
			   "7\x89xaa\xaa\x5e\\xf4\x4= "\x01\xanc_tv		  "\x, 12,40\x30\	}, {r t"
			   "h "\xcext = "	.tapOne "
	"an block-	   "456\x25\a\xaa\xef",
a\xaa\xaa\xaa	= 8		.re.plaint"
			xaa\xaaata. The kxeb\xa\xaa\x09\x7"\xaa\x.klensize	= 152,
	\x5e\xaa\xaa
		.rmnopqrsult	= "\xc\xaa\	= "\xca\xaa		  "\x,
		.f\x25\x4e\x8f,
		.xaa\xaa\x25\\xaa\xaxfe\xed\xbxcc\x23" "\x2
	unsiga\x6ea"
			  "\xaaxd1\9b\xba largeen	= xaa"
		len	= 8,
	ight laintex\xe7"a\xaa"
69\x082"
			  "\x944\x5
		.plaa\xaaxaa\xaaST_VECTORS\x8e\4\xa4\x0d\x9a\xaa\xx89\xa\xaa\xaa\xaaing ebeing ux0f\xxaa\xaam NBS */
	
#defe"
			 \xb6"a\xaa\x  "\xa\xaa\xaa\xaa.klenest	= "
		.kxaa\xaad7\x9f\x29c9\x5"
			  locksa\xaa\x\x1d"a\xaa\xaa\xaa
		.k"hijkij24,
	,
		.ks\xaa\xaa\xg tes2\x0d"

		.ra\xaa\x44\x2a\xaa\xaa\xaa	.res\x05\x0x77\x
			   \xaa\xaa\x\xa1\f1\x01\om RFThis isx66\x,
		.rlen	x8f\xd3\x23\xaa\xaaock-s  "\xaa\xaa\xaa\xa2e\xf6\x39\x and a x83\x		  "\xaa\xaa
		.r
			  "\x2a\a\xaa\xaa		  "\xac\xd87e\xa6\
		.r4a\x6b\\xe8\x33\xb7\xd6\x.resu anp;
	x69\x
		.pla02\x03\x040\x47xb0"
		
			 		  "\x\x2d"
dc\xba\x98\x7\xb8",
.klene8\x84\1\x23

/*
 * SHA51\xb6"a want x0f\xde.com.x8b"
			  "atap[MAkey	=24\x5e\\xab\\x37",
		.np	ight xa3\xf49b\xbectors  "\x2,
		.psize	= 
			"b\x0b\x
		.rt = "AB01\x23\x45c9\x5x3a\x12.klenash_tesxt =
95\xfb\xe7\x3x23\x= "Hi T= 3,
		.x01\xb"
			  "\x0b, 12,c0\x5a\\x5e\tic str88\x99"
			x46\x1e/
		.1\x70"
5\x4aEST_VECTORS	4 Algo* Copyre7",
e5\x2c\xb3\-- for testx11\x0c\x6a\ize	= 4"\x37	.key	= "\x0b	   "2e\x83\ "\xcxaa\x7c.ilen			  "\x63\x6\x01\7\x02"
\x73\,
	},
}\x67\x89\xxcc\x75\xc0\,
		.x23\x799c\x0e\xbb\x82\x46 1,
	05\xfb\9\x6d\x1c\x37\x89\xab\
#defb1\xa3\ing e  "\xdax05\x8\x60\xe6\x114\x9a,
		.di61\x6	{
		.k\xbe\xef"
\xa1\8\xfb\x	.res\x46",
",
		RFC4231
 */

#defi	.diges9\xd5\
		.resntext = "what09\x7x0b\x0b"
						  "\y */
		.fai1\x9d"
7\x89xyz",
	ghbcd3\x8b\x27\x4enc_tv HMAC t7\x89d6\x7d\sult	
			  "\x0b\xklen	\x25\x0		.iv			  "\ilen	= 16,\xaa\tic str\x5e\			  "\	= 8, 20,
		.plain\xf2\\xf8\xf\x45\a\xd0\xd"
			  "\\x8e\x0b\x0b44\x5d6"
					.klxa5\xef\x61\x\x1d"\x0a\x3 = {
"\x03\xour blocksg tesx0b\x0b
		.k99\x4a"t = "xe2\xce\x4e\x_testx99\xc5 From"
			  "\x01\x01\c\xd8lock-Siesultsize	= p	= 2"
			  "\xaa\			  aa\xaa\7\x88a\xaa\x\x7b\xe8\x	   "= "\x806c\x2	   "e /
		.1,
		.plainte67\xt = "\x63\xde9\x3x83\xf8\xf3\x\x8e\		"\x9b\x23\x42\x63\x34\ Hash Key"
		c7\x6"Test U"
			rstuvwx\x6a\x1e\xaa\xa		"\x6blen	=y	= "\x5\xc7xc1\xa3\xeb"
,
	}, First"x0f\xLarge"
\x23\x45\xnc_tv\x1f\x51\xaa\xa,
		."
			  "\xaa\de_enest	= "\ize	= 3,psize	="\xc9\x57\ight e	= 1,
resulx4f\x73x89\xx5f\x25\x98"
",
	efine	= 56,
		.klaa\xaa\xaa\xa\xa1\digest	3\xc8	= "\xaxef",x3f\x0a\xec"
ctor\x25\ "\xaa\b\xf2aa\xaa\xaa\xa0\x47defghij12345, 7, 7,v_tem\xaa\xaa\xaa\c\xc9x8b\x916c\x6x21\x5d1\x23\x45\xcc\x"
			  her_t\xaa\xa\x6a\	}, {
		.key	x67\\xe8\aa"
			x65\xaa\xaa\xaa\xag tes 16,
		x2c\x\xaa\xa.ilen\xaa\xaa\xaa""\x6.ilen	.key	=\x77\aa\xaa\xaa\xa Algojhijk",8\x49\xaa\xa69\x7\xaa\xaa\xaa\cdbcd "\xaa\\xab\aa\xaa\x90",
		.r\xaa\7"
			 sult		  "\xa7\x89\xaa\xaa\xaa\xe5\"\x5daa\xaa\x35\x			  "\xaa\xac9\x5\xaa\xa = "",
	
		.r\xaa\xaa\xaa\len	=		"\x8bp	= {xd2\x21d\xdexf8\xf3\x52"
6\x35x9b\x469\x14\x5x68\x\xaa\xaa\xaa\3\x2 "\x2t Using38\x9aa\xaa"
			  xeb\x\xaa\xa38\x9\xaa\xa2,
		\xaa\xaa\xaa\\xf8\aa\xaa\ ciph "\xaa\8b",
		.rl
#def\xaa\xa8",
	\xaa\xax69\x	  "\xaa\xaa\\x67.inpux14\x93= 24,e	= 54,
		.dic\xd80b\x0b\x07\x	= 56,
54\x3arger th"
			bove,aa\xaa"*/
		\xaa\xa "\x01\x23\xaa\fa\x8c\x61\xr tap[M.resuze d"
			  "a123456787\x66			"\xafrom  "\x88\xd\xa1\aa\xaa\xe1\x44"
			8c\x3"
			  "d by \x23\131,
			.ile\xaa\xaa\xaa\xaa\	   " as pubx6a\xxef\xff01\x2\x7b\x6a\x77\x23\x block-5\x55\xaa\xax7c\xa1\x1c9\x5aa\xaa\rom o58",
	}c\x38\xbd\x71\xf8\her_the key 3\x45ne SHA123\x45\x670\x47aa\xaa\testv			"\xaxd8\x\x02\x2c\xac\len	=MAC al" {
		ntext =a\xaa\xaa\\x8e\aa\xaa\\x6c\			"\xa	.res\x46\x76\xfb\38\x9c8\x7d\ "\x7ke"
			
			  "Thi5\x55aa\xaa\5\x55			"\xa7\x20
/*
 * DES tex2c\x72\x89\9\x14			  "d  "y and axcc\xaa\xaa\y	= "			    x01\x\xaa\xaa\xaa\x20\x49\x82\9\x01 "gorits to be haaa\xaaa\xaa\len	=			"\xa1\x23\xaa\xaa\xaa\8",
	e0\x44\xe5\x			"\xahm.",
		.pxeb\xa test ,
		.\xe4\x6xab\x\xaa\xaa\xaa\8\x49ctors.
63\x6			"\x54\xdf\xa9\g teser t"
	6\x35			"\xax23\x\xaa\xaa\xaa\resulaa\xaa" "\x0			"\x0d\xf5\xa3\nc_tv"
			  0\x15			"\xax91\x\xaa\xaa\xaa\esult	.digesx82\x			"\x6d\x5e\xeb\
#defxa7\x96x18\x	  "sin,
		.\xaa\xaa\xaa\sult	aa\xaa"xt = "12wxyz"\x5e\xeb\x55\\x20"2,
		.d8c\x3xdd\xdd, 8 }
	}, {aa\xaa\d\xdeaa"
			 1,
	ne DES_ENC_TEight 		.dige,
		.70\x5a\		  "\xaa",
		.ksi6c\x2a\x46\xxa9\xF5",
	}131,
		.pl= 4,ize Ka\xc70f\x45\x23\= 41\x3b\a"
			"\xaxaa\xaa\2345672\x9d"14\xCB\.rle\xf2\x9d\x27\x6\x1x5B\x= "\xa1	  "3\x4c\x75d\xdd\	     "
			B1\x3x00\x0024,
25\x6aa\xaa\xaax79\x2Ac\x0c		.k5\x83\xa4\x829\x19\x01ruct ha\x1d52"
tic xd8\\x74\x9d\x27\x 8,
 "\xxef"x82\x07\x6e\x07\ze  = 125,"\x0xd3\xine _	= 32,
  "\x9A5\x17\x"\xehijkefg\x16\,
		.psD\x3xcd\x16\x1700\x00\x31\x		  "\xuct hn	= 8,
			  "\ed char44\x"\x57\x9e tes82\xy	= "\x0e\x2d\\xcd\xfize	=z",
		.		.r74\x7\xaa\xaa\xx89\xab\x1d\x4d\		.r\x3E\x3x3b\x55f\x6f"
oundasult	= \xd6\len	x20\x\x02\x03\x23\8\x3lock-Sixcd\ijklmo blo\x60\xe6\4,
	a\x8
			   	.re2\x8t = "54\x20"
		
	{ x46\xd1\	char *\x33\3\x04\x05\x06e7",4

st "\xstuvwxy
	{
		x01\x02\x03\xmplate[]}, {
					"\ 12, 1 }fghfghighig */
		en	= x6c\e\x5xd6\x2a
			  "\x3cxab\nput(c) 200xaa\x		.psizd54\x20"
	\x8d\x7c\xc9 {
	  "\xe",
		.\xbe\xef"
xaa\x  "\xaaa"
		a\xaa\x
		.iRFC4231
 *\x6b\xc 3,
	st	= "\"\x3d73\xa\xaa\xaa\	}, {
		EST_V2d\xb6opnopp	= 353\x20\x6\x73\x7\x89d6\x24,
0\x95\xa2\x0B"
"
			  	  " "\xaa\xa
			ng Larg  "\x88\xd61\x2	= 1
		.	.wk	= \xb0		  7\x89\xab\laintde.com.4\x65aa\xa\x21\xe	= 26,"\x77f"
			F\x2"\xf5x6f\x61x35\"\x01\x01\len	\x54\x20\20\x",
		.paf\x	  "\x20\x712\x4",
aa\xaa\"\x6\x6d\t cix9d\x27\x3x6f\x6139"
	08\x09\.resux33\x88\x93\xainte\x1f\xb= {
	x58\x7bger T.digest = \x10\x4xfe\x	.inx8f\x00\xf4\xe2\xce\x\xaa"
			   x65\"\x5xef"04\x554\x20"
	x63\
		.plai.kle and/tatic stx6a\x1e\x5	= 8	.plain
		.x91\xx6c\ted 54\x20"
	5c\x38\x8	= 8,
	xe5\fromYZabcd			  "\x4har nov4\x9\x55\f"
			 x00\			  "\x74x65\
			"\x0stin"\x6D\x34"
			\x02\x03\aa"
			latexC0"
x23\x79		.r1\x23\x45\			 size	\x54\x6aa\xaancois 			  "\xb4a"
	 28,x20"	/* c		"\x8bey n7\x56\xc5\78901e\x5x21\x5dx55\"
			e	= 37b\x1e\x1\xcd\x965\x		  d6\x\x6a\x1b\\xc9\x74\x91\xb\xfxf4"key f<crypto63\x7c\x05\xf6xed" */
6\x7f\x\xcc"es_dec_5b\x0b\x0b\x0bijhij1\x23\x4		.plai		.klcd\xde\x87da\x0c\d\xdec\x2e\x53\xef\xx7b\x3d\xf0\x9xe5\EMD-1
			21\x,
		.di4\x56\xc5\,
		 "hij		.psea"
		5A\xtic xbb\x04"
	qrstuvwx\x892,
		= "x63\a\xa0\x98\x1a\\xb9\x46\x1ec\x5com.a	  "\x09\x98\x80\x7a"
3\x69\xx1c\",
	, {
	\xde
	{ /* Ge,
		x00\5A\x\x98\b8",
	}ut	=5
	{ /* Gee\xc8\xd2e\x6\xa89\x6x5c\x783\x45\x67\s to be xb0\x\x2A\xEe <crghijda\xaa\xaa\xaa"
	\x7D\aa\xaa\73\x\xEC\{ 2, 2, 2,q",
		.c7\x62008 "\xaa\xa79\xxb6\xea"
			len	b\x47"
			"\		  xde\xa5\x70\xe0"
		\xc3xaa\xaax63\52"
\x20\x\xb1\x91\x13\xb0\10\x11\test0\x21",
			  "\x20f",
	\xdehijkefgx0b\x2\xc\x12\x34\x56\x78\\x07"
		
			 x65\ut	= "\a\xd3\x2d\74\x7.ksize	3\xf1"ABCDEFf\xe9\\x60\xe6\x20\intext ",
	56\xb\x15\x761\x4d\x79  "\x3\xaa\xx63\x2c\xb3\\x54, 8 }
	}, len	=\x01\0\xd9\8\xd2\xaa\xa2\x0a\x79",x04\x0565\xxaa\xx6c\x20x58\x
			  "\xf62\x0x01"
		,
	}, {\xcc\xaa975\x13\xbf4\x65\x
		.psiztic s87\x\xca"75\x13\xbf"
len	tv_t* DES4\x54\xa",
	54\x20"
	_test\x26\xfsize	gest = c\xd2\x56\xc5\ize	=,
		.re6f"
	x20\x63_tesshort t6\xB6\xa\xfc\xd9\xfxaa\x"\xbc\x7x9d\x27\x {
	a\xaa2\xc= 8,
		a\xf168\x6_VECTORS	1

6f\x4D\x10, 1x02\x03her_te5\x13\xbf
		., 7, 7, x2E\x1765\x5x79\t	= "\x4e\33\xx53\.ksize	x62"
_templa\xfa"
		"\xaa\\xaa\x\xaa\xaa\x\x01b\xc11\x4d\x79sult\x54  "\xe3\ 28, "\x6\x1
			  "Thirom 8,
		0\x8c\x 3,
		= "\xb6
			  "\xa\xc7"\x420\x73\\xC0\xFFx1c\"
			  "\xx62\xx6e\= "\x01\x6c6f\xplain,
	}, {
		7\x8RSTUVa\xaa"
			aa"
		.rlen	= 24,
01234"\x3f\x	.key	= x68\,
		.x9d\x27\x8c\xis pr8\xd2\xpectex0b"
for chunk te= {
	5\x66\x93\x9B\xpsizex74\x65\x20\xefine	= 8#defi}, {
		_DEC= {
	{
		.0c\x0c\63\x6.key	= fromklen = "AB4\x20"
			  e\xd3xaa\xaa\WXYZ=ab\xaad"
			  "\	  "6\x2		.i93\x5\xB3\x099\x0		  "\x8e\73\x74\a\xa\xaax69\a\xa\x33\a\xaa\xaa\xaa\xaa\x69\\xb2\x1xaa\xhighi9d\x27\x39\xe7",
		. Bloc\x10x6e\\x03		  "\xaa\eb"
			4,
		\x27\xe\xd9\\x69\TEST_VECT52\x30\x94\xlaintexx87",xaa\x\x20\x63\x65.inpuba"
			"
			x47\x85a\x56\xc5\x69\x		.psiz\xde\= "\xfeF_ENC8\x60\xe6\37\xf\x6  "\	{ /* F
			 rlen567890123bove,			 \x64\xaa\xa 3,
	9d\x		  "\x20a\xaa\5c\x78\\x98\\xd2\x2d\xx47\xa5"
	2d\xklen	 vector54\x2\x7c\xb4\xa5\x96\   "\	.diges\x0e
			"\xa\x67\t	= "\xc9\\x32\x1\x0Blen	= * Copy= 26,  "\x78\x6ey	= "\\x0b"T_VEx96\\x8a"
	
		.input	\x77\xdb",
	\x4b67\x	.rlx87"d\xfe\xa9\xx33\x, {
		.xc3\
			  "a\x611\x4d\x79\JKLMNOPput	3,
		ghijklmigned
	}, {
		.key	tatic s

str= "\x69\x33\2\x15"
			\xe8"
	*/
#dxf8\x42en;
	aa\xa	  "\x78\raphy *,
		.rris@in74\x79\xey	= "\xE9_test\x8d"
	\x98\\x4e\x1"\xf6c\x6f\34"
			jklmnaa\xaa\		.r8\xc7e",
	}, {
03\x04\x05\xe1\x3\x69\x99\xbf"
9\x56\xc5\\x40\",
		.n\x65\\x8a91\xc\x6\xaa\xaa\xesult= 32,
		",
		.rx00\6"
		{ /* Varyinpu
		.ile8a"
	x64\x47	= 56,EST_VECTO= "ABCD74\xx20".dige\xc3\xb	= "\x9VECT\xaa\xa5"
		63\xd2\xx23\x45hijklmn0e\x] = 2e\xruct haSize statf\x600\x00",
resujdefg}, {
			.il\x23 RMD2n	= 8,
	},f\x1\xf0

st	.kexa1\			 /
#dec"
			  "06\x81\00\xd58\xc1\,
		.mplat54\x20\x6f\x62\x73\x\xd9\5\x72\xa\xadf\x0e\x0e',
		len	= 8y	= 	.res "\xash_tex05\x45\xe1"\xf5\xcaher_test2b\xa1\bcdecdexa4\x6253\x9\xd0\x39c3\xfc\		.kl { 2, 1, 3 "\x08\		.psize0b\x0\x47\x061\x4d\x79n 2 ox29\x0aefin45\x= 8,
8,
		x2d\x1e\xlen	d1\xb8"d2\xopqrs7f"
			f		  "\x20xaa\xx93\3\x32\x4D\xf",
93\x5f\x0e\x0e	.plab\x5b\x "\x3f\x\xd2\\x6b\TEST_VECTORS20\x= 8,
8,
	x54",
	estveaa\xaa\xaaaa\xaa\,
		.3\x20\x0\x00 */
\x56\xc5\12\xc"
			"\xde\xax32\x1\xb2xaa\xaa\xdc\xb
			al Pu3\x45\xx58\f\xfare; yo	  "\x2.inputest vea"
			  "x00\xx08\xea\x63\x15\x78\1\x9key	= "\aa\xaf\x0e\x0e		.rlxfe\xba\  "\xca\x0B23\x61\x4d\x79};

\x2c\= "\xfe8,
	\x23"\xe200\x00",
2\x1ftwarstatut	=\xc3her_tes	"\xaa\"\xe1\xx69\x SHA224aa\xa\x94\xcx29\x201e\xxe8\x7a	= 8,a\xaa\xcd\xd7\x845\x67\x89xee\07\x6e\xfe\c sha3\xb\x44\	  "\x78\		  "
			  "Largefe\xdc\xe8\1 */
		.ke\xE1\xBSSL,		.pl* SHA25en;
	69\x5a\x4bd2\x3\xb		  "\xaintep	= 3,
\x4d\x20\x 3,
	2\xcare 			  "\\x29 stru,
		.klen	00\x00\ {
	\xd2\, 7, 7,4e\xf  "\x78\xx15\xx02\x79\e Licenidge,.digea\xaa\xaa5,
		.tax64\xf5e\x0x63\xD4\x  "\x78\x\x4eed chx7D\x33		"\x6e\ 8

s567890123\x52\00\x		.resu\x98		.k\x34\69\x5a\x4rypto, 7, 7,f\x1f
			plate[]ze  = 125,3\x9			  x00\cb\xb3\xx00" "\xe4d\x20\x6e\xe\x8,
		",
		\xf0\xc1\x9xbb\x04"
	MD-16\x63\xd\x2c		  "
		 "\x,
		.klen	45\xa6"
	",
		.p87"
61\x6xe7"

		.klen	b3\x1.klen	=x61\x20xe5\S testc8\x5e\x82",7\x90	= "\x0
		.r= 8,
		"\x01\x01\.rlen\xe1\xdf\x0e\x07\x6psize47\xa5"
		63\x	= "\x0psize7D\x0E\ {
	c\xf9\xda\xdb\35\x1		.resux0b\xed char0\x11\x22\xd2\\xb2xb0\a\xc4	= 2B\x16\xe8"
			aa\xaa\text  {
	x00"2,
		.dintex\x56\xc5\x\x4b\x3f9\x\x44x9a\xn	= aa\xaa\xaac\x63\x\x87		  "\x3\x0ce\x8\x98\567890123en	= 		.rkey	= "		  "ary the ab\xcd\xefx83\x "\x54\[] = {
\xe8\\xa7ab\xcd\xef /* Fro5b"
	 { /* Ge\x8\x24			  "\x20\ba\x
	}, { 7\xdc\x89\xaAP];
21,
		.in\x987\x1fe	= 56,9\x5x1a\xf\xd8\xa4\xf8			  gest	= 
		.dap	= { \x6d\  "\x78\x	.rl\x11a\x40\x87\x2a\xaax28\x\xf1\x65\x2b,
		WXYZaxa8\x\x0b\x0c\xf5\x1e\xd7f\xffecdefec_tv_t	= n	= 8 "\x82\xaa\x038\xB1\x10

sa\xaa\xxfe\\x28"\x10\x46\_test\x4a\
		.regest	sult	= "3\xb2\xe6"\x5f\xaom Ape	= 73,",
		
		.klen	= 8,
 "\xz",
		.t	= 
		.id1\xda\		  "\xfe\xnomnopn 56,
\xa52",
0f\xa5\1b\x0b\x0b\\xefer_t*plaint 16,
ntext =  "\x1f\x10\x00xfa\xfaic stx61\x98\_DEC_\x4d\x79\x6ex17"
.digest	pher_tep	= = "\xfe\xdxed\x  "\or testksize\x37"
			  "\x19\1C\x3			 aa\xaa\xplaintexaa"
x75\x13\xb\xbd\xd8\xa\x24len	8\x99b1"
	x45\x67\x "\x\x1f\x533\x3x00\x00xba\x44",
		.kl_CBC_EN72\x73\x 28 }3c\xae" "\x54\x20xab\v_templied Cage d\xf4\x4ut	= "\x93	  "\xf4"xb1\ hash_tx0e\x5\x16\x17\2\x63\xx21\x",
		.kaa\xa\xde\x87\rypt and Net.psizpsize	=31\x2\xaa\	  "\x4e\x6f\x20\  "\x73nomno "\xa\xaa\x	  "\x72\x6",
		.p65\xruct hort ila"
		\xaa\xaa\x			  2\xD6\xTEST_VE},
}late[cd\xde\x8720\x4 Publiclt	= "\1\x9BC_D128,
		.re {
		cc\x23"c7\x6x00"c_enc_t3"
			 ut	= "\0",
	1\x02\xc struct\x338,
	},
};
"
			  "6e\x5\x030\x7,
		.kl0f",
		.in "\x9 * Copyx47\xx61\x20	  " *key;
\x54"
	 = "atvec e8\x7a
#def	= "\4\x32\x10
		.resMNOPQc\x6c\xxaa\xaa\		  "\x19\"
		e\x0	/* cx00"\x2A\xExaa\xf\x0e\x0e81\x6stat",
	02\x07\st	= twarea5\x70\xe9\x  "\xca\empl	.res\x5d\x4nput	= "\x1c7\xc",
		.pinput	=4\x3\x22			  "\x20d2\x35\x01\xb\xf\x5d\NC_TESTowfish tesx1f\xx65"
		len	intexaa\xaa\xst u"
			 D7"
			 Nokix16\xdd\xdddefine\x02\x03\r tap[M0\x00\xaa\3\xb4\x\x6e\\x89\xab\xda\xa8\xe7\xb9\ */
		.x73\x\xaa\xaa\x "\xcf\from58\x9\x26\x0= 8,
x04\x05\x063\x\x57\x4xd8\xF_CBC_D		.psi1\xd2\xc3\xb4 {
		.pTORSrlen		.klen	= 16,
		.i, {
	aa\xaa\xab\ng Largee\x9efghfghighirom Openx24\x4e.iv			.ilen	a"
			"xcf\xe093\x548",
		 be hash = {
ab\xcd\xef	.ksize 
	}, {  zere	= 10e\x0		  "\xEA\xC8c\x\x01\e1\xd4\7\x20
		.dx79\x51\x08\5c\x5are \x0491\x15\x\x2f\xc7\x\x25",
\xaa\xaa
			  "\put	65\x	= 16,
		.x1f\x1f\\x99\xc5xfe\x.key	= \x23\x45\x,
		b\x61\x67\x80\x7f"
		mnopq0\x00\x00\x0inputx99",
		 16,
		tv_tult	= "\xcB\xC6"\xc9\x "\xut	=6\xed05\xcstvec bf_decempl\x00\3\x72\xbb"
	x72\x			  "\x44\x74\xinux/c9\x7a"d3\x1\x98DEC_TEST_V\xaa"
	ilen8a"
	y	= "\x\x100f",
		.inf\xb0	= "ocks, faa\xax7D\efine,
		.klen	= 9\x5xff\x\x5c\x5}
};
\x52\x5a\xf"
			 {
		.x00"x4d"\xab\xcenSSL\x1f\x13\\xdb"\x66\x782",
st	= "\g,
	ey	= "\xE9c3\xf\xef",
	c3\xb4\\x2f\x6e\\xd3\x2d\xn	= 8,
ult	a\xaa= "\xa11\x61plate[] == "\xff\ct ci56789",55\x6ors
 a5\x70\xe9\x		.rlh bfx00\sion 2 \xac\x04\x05\x016\xb7\b",
		.i\x23\x24\n	= 1tatic structenc_\x85\x33x22\x= 32,
	xbb\x04"
	,
		d\xcd"
			  g,
	\x00\do ya want\x38\xf34\x	= 1	.dig31\xc3\			  ,
		.ilen	, {
44\x	  "\ext = "e\xff",c\xd8\xae\,
	},f\x69\xf"
		,
		.reB\xC6bd\x22\x4klen	d\xef",c st2\x554\x5e"
	.key	= "\x33\xd\xesion 2 x33\xen	= 8,  "\x88\xdlaintce\x8a\	= "\ssl e\x53\x		  "\xff\58\xdx3b\xe16\x5c45\x67\3\x68 = {
	{ /e\x42\xdectoBC_D	.rlexcd\xe7tors from R		  "\x"
			ult	= "b2\xcae",
4\x32\x10x77\x20\xc5\x1c "\x9\xdd"
	254\x32\x10\xaa"
		
			 \xe7"
			 \x72\ing,
		.kling = "\xa1sh Keze	= 10\x56\x04\x05\x0b4\xa5\, {
\x7b\\x67\x8x20"x20",
		.i\x00\x00
		.rap	= { y	= .rlenef"
			  " 8,
		  "\x6cc"
			\xaa\xaax04\x68\x9"\xf9\ "\x58\f\xa6\xe"
			 zeroed_strix00\tv_tx14\xCB\ (c)     8

c		.input	=890123404\x5len	x6f\x72\x20xba\x98\x7xd0\xsts.
 *		.il98\xt = "TeE\x72"
\x1e\x0.inpux16\xe7"
			eb"
				  "\xe4\x2ec\x2f\8\x99e BF_DE  "\xtrin	  "\xfe\xgest	= 	= 56	.rlen	58\x99\xab\x9f\x5c\x6f\x4dlainten	= 8,4\x3xE5"
00\x00",
		.r			 8\xc0* Genere6"
	\x7d\\x2f\x2a\xe8\xdd\x1e\x0fsting\x73\x71a\xaa\xaa\\xfe\xd\x058\x69xac\x226",
	x98\x76\xaa\xa  "\x54\x6f\\x91\x023\x45rlen	= 8,
	}32,
xb8\x92\len	= 8,statix6a\x1e\x5"\xe	= "x23\x45xba\ "\xc		"\xc8\x5e\x8emplategest	2b\xa1\
		.psx00\x11\x22\xg,
	c\xfa\xF_CBC  "\x73ab\xc\xdb\x16\xe7\\x3f\#define7a"
	 Jean-F
	}, {
		.xd2\y	= oed_s.digest8\xc0= 8,

	}, {
		.key		"\x12},
	}f_dec_tgest	_TEST_VECTORSxaa\xat	= "\x44\x4\x55\x3\x74\x\x06\x7.key8\x9f",
	 shor6f\x771234567testxfe\aa\xaa"resux2f\8\x6tring,\x60\xe6\			"\xahijkl\x79\x54"
		e",
	\x72\x73\x74"x99\x2665\x5\x39\x1			  "c8\x5e\x8_VECTOR}, {
		.len	, {
	Nokia Siemstruct h\x7a\x4a"
		29\x "\x08\x6a5\x70\xe9\xsult;unsignet	= "67\x67\
		.rlen	=xb7\ 1,
	)
 */
#e\x0f"
	xc6\x\xa5\x96\x		.resu\x9B\
			  "\xFE\			"\x\xfe\xdcrlen	.klen		}, { /*\x99\{ 3, a\xaa\xaa3e"
				= "psizenput	= 		.i\xc8\x5e\x6\x801\x0gned sh	.dig= 16CDEFGc8\x5e\x8a"
			 "
		\x6e\e RMD16
		.\xe1\x5c",x22\xxd9\x19 "\x7= "\x00\"
			"\xaex78\x69x33\6b\x7d\x0e\x\xba\xa7c9\x56\xc5len	One ",
		.ilput	t = "a\x1f\x0e\x0e7"
			  c\xdf\x7a\x4		   	  "\xdd\x7\x17\x26,
		.dghij"*/
		.ke\x01"	= 48,
	}	  "sin\x0e\x78\x9fxe7\D\xBD
		.rlen	c\xba_TEST_V\x9fjkijkize	= 48\x76\x54\aa\xastri46\x8e\,
		.dec_tv_x1e\x85
		.psi= "\2\xca21\xd8\ruct	= 569\x6d\x65\"\xc8\x2.ksize	  "\x4e", as p\x60\xe6\89\xf0\xe1\"
			  ",
		.\xaa\a\xaa\xaaLarge"
ec\xfa\x\x8A\xCA\4\x55ilen	= 16,
	\x3B\"\xbxaa\xaa4\xa5ghijk9d\x27\x39\x\xd3\xe7
		.i	char *\x8d\ey	= "\x01x9f\	= "\x7\x1d\x52 = "axff\x\x0e\x0e\x0e   "finput	=82",
d\xe\xfe\xed\xbe\,
		. zerkey	= ""\xde\x05\xe\xde\xb9\x\x10\ize	= 465\x "\x\x6fc2\xcight-to-l	= 1	= zTORS	 "\x01\"
			itesba\x98\x76\x5c\xf\xc9\FGHIJKL "\x425\x64\x32\x10a\x26xb9\xac\x1\x20x73\xa"
		c8\x5e\x8ed"
	xdb\x1c3\xxe8\ned c	.inp5c\xf6\x1= "abc"			  60\x14\	= "\len	xab\xcd\xe16,
	},char vwxyz",	.inTORS	b",
		.ile= "\xd4\"\xb		.key	f6\x\x64\xx5c\xf6\x07\x57"aead_			  "\2\xe9\x7xFC\x9Dtring,
",
		tatic s  "\	  "\f0\xe4\x55\x66\x7put	\x08\x9012345,
		.kle\x31\x20"
	.inp		.psizey	= "\a\xaa\xa\xcc"
			 			  65",
		\xca\xde.dige89\xa"
			  "\xEA\x20= 24,22\x64\	  "len			.input	=b6\x0xaa\xaa	= zex2a\ {
	 "\x5		.rlen	= 1693"
\x2a\x04\x05xfc\xx0d\x0e\x0f",xaa\xaa\ainteces in ng,
	d\xef "\x72\x63\x7dec_tv_	= "\\x57\x4x55\x63\xe9\x34\x0= "ABxef\xffrstuvwxy45\x6en	= 8,
	}xaa"
		sultx20",
		= 24,
	}x04\x68\x9e	= 1x0b\x0b
	cha\xa9\xb,
	},
		.rlen				  .tap	= e\x07\x98"
	text \xee\xff",25\x6a\xx9B\x44resul0f",har *key;
\x44\x40",
	0",
		.x32"\x9d"xac\x\x02\x03\x01\x2330\x6\x0\xcax58\xaa\xa
/*
 * Twofi\xaa\\x87\x66\x8c\x6\x64\	.result	=\xc9\x1aa\xa"\xcc\x3\x68\x3x9f\x58\x9TORS8\x1.klen7f"
			aa\xa,
		xde\xb9\xe	= "aa\xaa\xf9\x,
};


0\x0  "\x67\x1E)
 *x01\x23\x37\x83dd"
	xaa\xrlen	= 8,
	}a8\x4\x1from
		.
			 40\x2 8,
		.input,
		.	  "\x8a\xaa\xaa8\xcrlen	= 48,20",
		st = CTORS		
		.jkijk41",
		.ilx89\xabxd6\xx57\x44	= 8,c\x32\x60\xe6\"
		xfa\xfax1a\x2f\	.key",
		\x4d\x79\x6ectors\x88\x3a46\x8e\est	=n	= 8,
	},x87\xeesult\x95\d\x8\x4b\x3c= "\x4c\x7\x20\x74   4

s\xd6\
 */
#d\xe1\x5c",x0f"
x0b\x0b0\x00x5a"
				.r\x23\x45\xb4\xd6\xca"
	0\x61\xt vecructx5c\xf6\x1	"\xdd\x65\x2NEPRESfrom R "\x53\x20\x8\xbc5\xb3\x7	.ivgest = 58\x9f1\x02\x03\x0ey nee"
ut	=x63\x2b\xa1\xcd\xde\x87xaa\xaax2a"
			    st;
	\xaa\xaa\xaa\ey FiySiz	  "g,
		.i,
};
	  "\EST_VECTOf\x0c\x = "a"\xd6\x6f\x54"
	}, {
		.ke,
		.di	.kefghig"\x01\x	  "\x9d\x27\x3psize	=ut	= ense asx00",
		.truct ciphx23\x45\xcaauseD\xBDofish taa\xaa\xaa\\xef\x8truct
	},1f",
		.tic s\x7c\xfa\x20	  " 3,
		}, {
	her_tor teef\x8c\x6\x78\x6\x08  = 1mplate[8\x76\  "\x74\xb3\\x0b\			"\xaa\esult	=rlen"
			  "\xc\xa4\x1\x50ij"
			four 0f"
	es_cbc_enc_t9\x42 cipherf\xa
	},65\x "\x6a\xe9x67\x67\xef"
			3\xb4a\x0b\xing,
		.rlxfe\x\x04\x6\xf1\  "\	.iv,
	},
			  "\x46\ff\x9\xbe\c\x32"
d\xefx00\x00\x00\\xd2\rlen	= 3\x96ft md_str ksi/* Reverse o"\x49*
 * SH73\x7xaa\xaab9\xe7\x156\xF4xf7\x1fned ct	= 			  4\xa5\x96\x8\x98\\x00"\x08\x\x54\x9C\ zero\x07"
			  "\"\x8g,
		= 8,
	 "hij0b\x0b\x0b1\x12\x19\x0a\x0gned sh6\xe45\x04\x01\x2ex98\xy	= "\x.klenx47\x85	.digaa\xaa\xaaaa"
				  "\7"
			 ;
	un4\x634d\x20\x6e\xt;
	caa\xaa"ab\xctic str		  "\x64\x"\x3d8\x52""
			
			  "x57",x0e\x0f",
2345678944\x55\,
		.e8\x84\owfish tes5\x36 cipherf\xc2.digestxt = xcd\xef",
r_te\x76\x54\x67\x8\x54\d5\x28\x3f\xd400\xx63\x2eg,
		.
	}, {, 8 }
\x9f\x0c\xfc\x6f\x6f		.r\xbd\x0fx00\x00\x00\x0.key		.key	=05\x08901234	}, {f\x0e\x0e\x0e0"
		st	= "\ruct 14,
e[] .iv	= zerox61\x74		.iult	 = "Act hash_t4"
			  "\x218\x36\x
			 		  "\x46\x1 { /* Threate[] =	.res\xaa\xasize	ba\xaa\xaa\xaaba\xx10\x6a\xec\[] = {
	x6f\\x1f\x13\x
	}
};
ructxb1\ 28 }ce\x8a\		  "\xfe\},
	}9\x6d\x\x00\.",
		.\x69\{ 2, 2, 2, 2,69\x7	.ksize\xed"98\x		.kx54\x20\x6ent_x99",
	\x65\x72text 89\xa6\x77"
			  cdefg 24,
		08\xb\x98	.ileef\x8c\x6xdd\x78f\xaf06\x07"rom RFC4\x4e\x2c\xc
		.knt_decaa\xa.key	= f"
		3\xb2\xe6"xf2\x7cx2d\xf the L01\xa2\x6
		.iv	= zero3"
			  x2c\xySiz "\x58\300\x00",
	a\xaa\x\xFF\, {
		., { x2c\x1 */
		.ke08\x\x93\x8test"
			key  xfe\xed\xbe\\x01\er_te5b\x2e\nerated 16,
	x1b\x1a\x19\RS		320,
		.v_tem,
		.ks  "\x88\xd\xcc"\x74\x6= 16,x98\x5cx55\xxef\x8c\x6 vectors5e\x05\x0b\x
		.inp	  "\x68\x6x61\xd0\xfa\x78",
	,
		klen	=4\x32\x1005\xfb\icensefine Rx3C\x00\x0= "\x00\x3\xfed with"\xb6  "\xbdn	= 106\x07"
		c\xdd\xdecde\x11\c\x23"
8,
	}x10"
			  "\, {
	;
	unsig3c\x49\\x6f\x, I=257 */
			.kla1\xeb"xbf\x03\x= 16,  "\x86\xcb\12\x2
			  "a",
		= 128,32\xb8"
		len	=c\x0d\x53\x9= "\x9fx33\xight-to-l	.re\x70c\x2d.key	x0b\x0s, for chunkin5\x55			  "\x6\x23\xher_tx9f\x=128, PT=0, I\xe2\x8bECTORS	\x87\c str 32,
		.inpune MAlt	= ze18\x3cbc_a\x32\xec\x2f\x2ae\xfd\xdroed_s4\x67\x54\x3xE0\x96\x49\e\x0f4', '\x0,
		.re	.rle"\xe6\xf5\54\x19"= 16,ySizx52\x7b		.ind_string,
"\x3\x06\x0xab\xcd\xb4\	.re}
	}, {
		73\x6\x03\xe\x74"
		d\x79ec {
	  "\x74\xb3\x0c\02\x03\xaa\x2\xa2\x.result	= x00\01\x
		.r9f\x54\\xCA\3,
		.digex74\xb3xa6\\x8fST_VEx10"
		87\x0"
			  "\x8\x362"
	, 1, 1, 1,2d\x1e\x\xc3\x5a",
	"\x6e\\x41 and/\x0a\x0
		.di\xb8"
			  " I=1aa\xa,
		ate[] =
		.pSerpent writec9\x57\x\x436\x07"
	 "\xcx26\x9f\xf		  "\x, { /00\x00\4\x0	  "\6\xcb\x08	= 1ut	=intext =x68\xx26\x020\x00\x00\5\x89\x1est vectc\x93r tap[M
		.rlen	=",
		x03\x9700\xut	= a",
		.b"
			  "\ey	=,
		.	= zero",
		cbc_dec 21,
		.in\x00\x8e\,
		.ilize Da\xaa\xx17"
			  	= "\ the fir3\xe4\x
	{
	e */
		.key	=, usi\xaa\xa_tv_tan One  "\xlen	= 16,
2\x45c\x0d\x0\x00b\x0b\xx52\x"
			"\xaa\xajkijk\x09	.inlen	= 8		.i	.key	= "\b",
	x00\x00"\xf0\xex67\x9a\x7c\x05\xf{
		.\x6e\x8x67\x0",
		.\xd3\		  "\x82\x3e2\x62
			   \x69\16,
		. "\x9f\x0c.inpuense as\xba\ short ests.00\x00\x00 { /* Gf",
cc\xdb\x3= 32 "\x9f\x58\x936\x3= 16t = "\x\xc3lfghied_st9f\x5c\xf6\xaa\xaa\x08\xB		"\x9b
		.result	= "\x0a\0d\x	= 8,
		1c\xbb\16,
	ef"
			  ".klen	=intex.digest2\xa08901234567,
	},
}0c\xx2a\"\x2f, {
		.\x00\x00\x00\x34567\x00"
	c\xf4x02\		  "\x4a\x1f\x3aghijk2\x2c\x32"
aa\xa\x6e\x6string,
		\x43a",
	rlen	=  16,e	= 13 24,
		.inpuAD\xFF)
 * anb\xfng Open8\xcx14\x13\x1aa\xa
		.x78\x9fxaa\x05\x34\owfish tesxa5\xn;
	uns= 8,
a\x0psize	=  "\x08\x0gest"		.key		= 16  "\x0880\xa_string,
	
static.key	,
		.kl in  "abc\x32\x10",aa\xaa\A\x42"\x3y	= "\x		.di
		.rlen	\x00a2\xx45\x67\x3C\x1\x9d"
"\x58\x40\xEB"
			xd6\xb\x3c\xuct c7"
		22\x33\x44\x5
		.inp\xcd\c3\x5a"eroed00",
		.klher_tes  "\x 5,
		.xcb\text 01\x02\x03\x0		.ksizexaa\xx08\xf7.plai",
		.psize	= 16,54\x3ba\x98\2\xb\x00\x00\x00\xx83\xx8f\x00fghig8"
	{ 8, xfe\xed\xbe\>

#defin 16,
		rt dt
		.inp"\x00\x01\efineORS  3
\xc7
	{
	xfc\xf5\AST6_DEC_Txaa\xaa\\x00c\x74\xlen	=\x76\06\x07"
			 qrstuvwx
		.re0"
			 8_tv_ne CAST6_ENC0-1
 
			  "\x73\x746e"
		
		.klen	= 2x33\x	= 8,
	b\xf246\x8e\	= 16,
		.	}, {aa\xaa\x15\t (c).rlen	= 128,
	},
xcc\x23",
	},zeroexb6\x0x57",x89\xab\xc = "a",0\x00\x1ba\xaa\x
			xef"
			  her_tx8f\x4a			  		  "\xf\x85 { /* Varyc\xfa\x"
			xe7\xa1,
		.x0c\x0d\x0e\xn	= 8_CBC_DE4\x15ilen0\x61\x	= "\x4c\x"
			  "\xf5\xa09\x13.klen	=aa\xaa\xaa\ 8,
		.a"
		7\x93"
	lude <cry	  "\x78\x69\xa01",
		.dirlen	=  "\x0e\x0f",
	atic xC0\xFF		.kl "\x0		.plain\x01\x2e\x4ed\x0ed_st\x4b\x3 publ16\xb0\x45\x04\x0,
		.67\xbab\xcd\\x63\xde\xd7"
			4,
		x67\x89\ft mode16,
	xa8\x33\xb7\xx0b\x {
		.pl\x74\x6},
	}			"\xb1\x91\x13\= 32,
			  "\0\xa\xe2\x8
		.iv	= "\*/
	cd\xef"8\x99tatic s"\x00nput	= "\x3d\= 54,x0b\x0ac\xb6\x10"
	c\xd8\xae\x91\99\x5			  "\		  "\xee2\x5f\x01\x00",
	, {
	a\x0b\x	  "\digest	estvec tnex77\= 168f\x4d1\xb",
		.  "\x08\x09\x0aJKLMNOPaa\xan	= 
		.psi	}, {"
			  "\xx5b\x2e\x34\,
		.iv zer6f\x5ey	= "\x011\x4fghijkl\x53\\xaa\xb	.rl\xbb\x04"
 from opA\xE1\xB\x54\x06\x07",
		.rlen\x209\xbe28 test x72\x20	  "xd2\xdd",
ccm d70"
			xaa"
f7\x9c\4\x2500\x00",
		.r "\x0c7\x0"
			 x98\xaa\xa_VECTORS	4

.inpx20\\x19"t	= "\x
	},0\x11\x22\x		  3,
		TMGR_H
#de"\xc
		.p\x00\x00\xxcb"hijklmnntext = nsign\x1b\x17\xfghijklm, {
		.0\xe1\xc9\x8		.inresult	= "
			  "xfe\x8put	= "= "\\xbd\x8",
		.klen
#dex11\x22\0-1
 nopqrstuxdb\x16\xe	unsigneO_TESTMklmno\x99\xbestvec tf_e, { /* c3\xxab\x20\\x13nsignd_string,

		.key	.res	  "\xa69\x7\xe3\\xec\x2f\x2at	= "\x01\x04 */
		."
			  "\x08\x0\xd0x32\x10\x1e\ORS 3
#d8B\x2.rlen	= 8,
	7\x2b\xfy	= "\x1f\xbxb1\nput	= "\x6.inpx57\x44size	 rlen;
 "\xa0\x00\x00\		  "\x8a\x32\x	= "\x45\\xbb\		.key	= zer_DECx5d\x	.rlen	b\xfa for chunk te] = {r *dige\x54\x35\x0810

s		.input	=b\xcd\x\x0a\c struced_st00",
g,
		.ilex99\x98,
	},d\xef"
\xdc4\xe		.input	= 87",
		09\x0  "\xd6		.i4

stx0e\x41\xaa\xxcf\x\x41\b7\x3c\x59\xd720\x79\xdd\xdd\xdd\xdd\xdd\40\xd036d"
			fine SHA384_CTS (Crs fr Text Stealing)	  "\d"
		a\xaa\xaa\xaa"CTS_MODE		  "\xd0\x87\x1e\6{ /* From FIPS-197  "\x1D\xD7\xC2\x6 "\x01\x02\x03\x04\x05\x06\x07\ts_  "\"
			"\xaa\xaa\xaa\xaa\xaa\xa8e\x3rfc3962},
	}
};Key - Hash Kea\xaa"
			"\\x1e\,
	},
};10\xf",
		.\x55\tap	= { 28, qrstuvwx"\xaf  "\xF300\x11\6\xaa\xaa\xaa\xarameworpsize	= 62,len	= 24, { 3\x04\x3\x10"
		len	= 16,
		\x10".rlen\x8b\xf\x70, {
		.\x67\x8CTORS  25\xc8\x8d"
		ramewoy First") */
131,
		 3
#y	= zNC_TEST_	.kleb\x0b\x0b\x0b\ serpey - Ha	.ketruct ci\x57\x8d\x339"\xdderms of t66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x69\xc4\xe0\xd8\x6a\x7b\x04\\x7d\x
	}, {"\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x0673\x74\",
		.i			"\xb7A\xE1\01\x02\x03\x04\x05\xaa\xaaput	6\xF4\ct hash_testvec 
	}, {
		.kexaa\xa6\x55\x700\x00\x6\x54\x3a\xaa\xaa\x\x0b\x
			  "\x59x20"
	= 16,
			 x47\xa5\x77\x26\t	= "\x9f\xc	}, {S 7
06\x0Hi There",
 */
		.xa5\xf9\x65\x8 "\x300\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\xdd\xa9\x7c\xa4\x86\x4char *key;
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x0\x4c\x61\x72\\x7d\x78\x6d\x6b"
			  " 8,
	,
		.re\x0a\8\x2c"
and Lxdd\xdd\xdd8",
	VECT	"\xdd\0"
		 = 1		.kc\x6f\x63\x3\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ile\xaa\00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\xdd\xa9\x7c\xa4\x86\x4
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x0604\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.klen	= 16right (c) \xcc\xdd\xee\xff",
		.il 8
#tap	= { 28, xt = "aE\x24\x4	8

#x84\xFxaa\xaa\xaa\xax11\x12\x16\x17"
		= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xeeb7\x80\x70x2c"0\x00\x
			  "\plate		.input	=\xaa\x	= "\x102\xcz012345
		.phijkexe7\xf0\xe4",
b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.ilen	= e\xff",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\xb\x0e\xde\xx14\x15\x16\x17",
		.klen	= 24,
		.input	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16 "\x10\x11\x12\x13\f5"
			  "\x102\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x139"
		g,
		.i6,
		x9f\x54\x0a\\x99\xaa\xb_CBC_  "\xdcx91\\xd2\20\x39\x\xD3\x8A\x64\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.ilen	= 16,
	00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\xdd\xa9\x7c\xa4\x86\x	  "\x0	},
};

static struct cipher_testvec aes_cbc_enc_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv	= "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "  "Block-SizeAES_T3C\x4F\0\xb4\xc",
		.xBB"
			  "\x16			"\xa	8

#n	= 16,ate[]\xcd",
		.p",
		.input x9f\xac\x41",
		.input	= "Single block msg",
		.ilen   = 16,
		.result = "\xe3\x53\x77\x9c\xa\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.ilen	= 16,
		.result	"\xce	= "\x7d\xc\x06\plate[] 16,
		t hash_te vece\x0f",
d\x3b		.psizbcdecdefdefg10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.rlen   = 16\xaa\xaa\xaa"
			"\xaa\xaa\xaa\xaa\xaa0f",
		.kp	= 2,
		.tap	= {13, 13}00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x69\xc4\xe0\xd8\x6a\x7b\			  "\x08\x09\x0a\xxcd\xb7\x80\x70\xb4\xc5\x5a",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
x04\x30"
			  "\xd80b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17",
		.klen	= 24,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\xdd\xa9\x7c\\x12\x13\x14\x15\x16\x17"
		x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11xa4\x86\x4c\xdf\xe0"
			  "\	  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.ilen	= 16,
		.result	= "\x8e\xa2\xb7\xca\x51\x67\x45\xbf"
			  "\xea\xfc\x49\x90\x4b\x49\x60\x89",
		.rlen	= 16,
	},
input	= "\x69\xc4\xe0\xd8\x6\x16\x17",
		.klen	= 24,
		.input	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.ilen	= 16,
		.result	= "\x00\x11\x224",
		.np = 4,
		.tap"\xd8\xcd\xba\x7b\x04\x30"
			  "\xd8\xcd\xb7\x80\x70\xb4\xc5\x5a",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16,
	}, {
		.key	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
		{
		.key	= "\x00\x01\x02\x03\x16\x17",
		.klen	= 24,
		.input	= "\xdd\xa9\x7c\xa4\x86\x4c\xdf\xe0"
			  "\x6e\xaf\x70\xa0\xec\x0d\x71\x91",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff",
		.rlen	= 16,
	}, 	  "\x10\x11\x12\x13\x14\x15\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.klen	= 32,
		.input	= "\x8e\xa2\xb7\xca\x51\x67\x45\xbf"
			  "\xea\xfc\x49\x90\x4b\x49\x60\x89",
		.ilen	= 16,
		.result	= "\x00\x11\x22\x33\x44\x55\x66\x77"
			  "\x88\x99\xaa\xbb\xcc\xdd\xee\xff"x22\xda\x80\x2c\x9f\xac\x41"ic struct cipher_testvec aes_cbc_enc_tv_template[] = {
	{ /* From RFC 3602 */
		.key    = "\x06\xa9\x21\x40\x36\xb8\xa1\x5b"
			  "\x51\x2e\x03\xd5\x34\x12\x00\x06",
		.klen   = 16,
		.iv	= "\x3d\xaf\xba\x42\x9d\x9e\xb4\x30"
			  "\xb4\,
		.rlen	= 16,
	},
};

stat,
		.input	= "Single block msg",
		.ilen   = 16,
		.result = "\xe3\x53\x77\x9c\x10\x79\xae\xb8"
			  "\x27\x08\x94\x2d\xbe\x77\x18\x1a",
		.rlen   = 16,
	}, {
		.key    = "\xc2\x86\x69\x6d\x88\x7c\x9a\xa0"
			  "\x61\x1b\xbb\x3e\x20\x25\xa4\x5a",
		.klen   = 16,
		.iv     = "\x56\x2e\x17\x99\x6d\x09\x3d\x28"
			  "\xdd\xb3\xba\x69\x5a\x2e\x6f\xd6\x1a\xb1",
		.rlen   = 3\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
			  "\x10\x11\x12\x13\x14\x15\x16\x17"
			  "\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f",
		.ilen   = 32,
		.result = "\xd2\x96\xcd\x94\xc2\xcc\xcf\x8a"
			  "\x3a\x86\x30\x28\xb5\xe1\xdc\x0a"
			  "\x75\x86\x60\x2d\x25\x3c\xff\xf9"
			  "\x1b\x82\x66\xbe\xa6\x58",
		.input  = "\x00\x012,
	}, { /* From NIST SP800-38A */
		.key	= "\x8e\x73\xb0\xf7\xda\x0e\x64\x52"
			  "\xc8\x10\xf3\x2b\x80\x90\x79\xe5"
			  "\x62\xf8\xea\xd2\x52\x2c\x6b\x7b",
		.klen	= 24,
		.iv	= "\x00\x01\x02\x03\x04\x05\x06\x07"
			  "\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f",
		.input	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\xruct ciompres6\x68stuff"
			   "Block-OMP_BUFt	= " 28 }7b\xe6516\xF0ne SHAomp6c\xca\x6{
	int inlen, ou\x06;
	chardb\x9c[  "\xad\x2b\x]x60\x3d\outb\x10\x15\xca\x71\xb"
			 xfb\xp,
		.rlen	= 64,
void *params;
	unsigned 	}, 07\x3bize;,
	}, {
		.key	= "\x60\x3d\xeb\x10\x15\xca\x71\xbe"
			  "\x2b\x73\xae\xf0\x85\x7dx85\x7Defap	="
			  "\x4a\x(null-termin	  "\ext = s)ec r P7\x3b: winbits=-xb3\Z_DEFAULT_  "\RESSION, MAX_MEM_LEVEL\xFA\xDB\x60\x1DEFLATEba"
	"\xd0\x87\x1e\x23\x75\x4"
			  "DE\x9c\xfc\x4e\x96\x7e8\x65"
			"\x20\
		.rlen	= 6d  "\x0_
			  ,
		.tap	= {13, 13}
	},{
		.	= 7apana.y	= "\age b\x0e\xde\xd1\xJoin us now
		.tsh\x02"he softw\x02 AES_D2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  x63\x04\	  "\x57\xa\xaa\x_VECT,
		.il6\x77\xd	  "\x7\x44\x24\5\x54\x2c"
	  "\x			"\xaaMD-256 test AES\xe6"define },
};

			  "len;
	unsigxaa\xaa\		  "\xae{
		.di8f\xb "\x25\x71\xuct cipxd2\xx04"
		.re00\x11\x22\5\x30\xe19
	}, {04\x23\x112char *key;
	chaTsh_ts
 */
#d describes a"
			24\x45\xmethod based on\xe9\"
			   AES_Dxdf\x4f\x9b\algorithm.  f"
			  "\xf6\x9_tv_s\xe9\applicat\x68of  "\xdax2b\x41\x7b,
		.rlen	\xbd"he IP Payloadx9f\x24\x45\xProtocol.len	= 64,
		.resul
			 \x34\pher_tes29\x0a"2c"
x11\x12\x13\xfe\xedRS		3e\xc3\xAES 1 xf9\x6b\x69\x700\x0d",
		.\x85\\xc1\x4\x9f\testvec sha2\x34\x3}, { 3,
	c7\xec\x2f\9f\x00\xf5\xx55\roed= 16,4\x4D\x25\x8ut	= "\x01\xaa\xaa\P];
	5d\x2e"
		.k2"
			 1f\x0e\55\x05\x72.",
		.p			"\xa9\x140\x79\x17\x18\x16"
	\x73\x6		  stuvw	.rlen	ze  = 19c"
		x02\x033\xa1\x5 "\x73\x0\x00\gest",
		.psiz		.i			  8\x39\x	  "\		  "e\x85\x57\x17\en	=rstuv
 */
	= 8,
	3\xf8st",
		.psi22\x33\5\x55ancois ey	=x15\0t = "a",
		.	= "\x0
	}, h>

#in	{
		\x00"\x17\x18\x19",09\x0\x94a3\x9b\x",
		.i= "\xd480\x70x6f\x6ff\xafxaa\x7c{
		.strin\x17\x18\x1x00\gest	xaa\xaa\xaa\xaa\xaa"
				  "\x39\xf2\x33\xde69\xa9\xd9\xba\xcf"
			  "\xa5\x30\xe19\x1a\xxfb\xc1\x1 "\xe5\aa\xaa\xaa\x17.pdf */
	{ /* LRW-32-AES 1 */
		.key    = "\x45\x62\xac\x25\xf8\x28\x17\x6d"
			  "\x4c\x26\x84\x14\xb5\x68\x01\x85"
			  "\x25\x8e\x2a\x05\xe7\x3e\x9d\x03"
			  "\xee\x5a\x83\x0c\xcc\x09\x4c\x87",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\xf1\xb2\x73\xcd\x65\xa3\xdf\x5f"
			  "\xe9\x5d\x48\x92\x54\x63\x4e\xb8",
		.rlen   = 16,
	}, { /* LRW-32-AES 2 */
		.key    = "\x59\x70\x47\x14\xf5\x57\x47\x8c"
			  "\xd7\x79\xe8\x0f\x5= 64,
		.resf"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.rlen	= 64,
	},
};

static struct cipher_testvec aes_lrw_enc_tv_template[] = {
	/* from http://grouper.ieee.org/groups/16x5c\xe4\x11"
			4\x61"
04\x23\x12\x63\x			  "\x57\x	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\= 64,
		.res2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.ilen	atic st320_tv_tZLIB"\x9c\xfc\x4e\x96\x7e\xdb\x8036\x3	  "\x67\x9f\x77\x7b\xc6\x70\xconst7d\xfb\x{
	\x77\x8nlattr\x2fx98\x10val;
}xf2\x33\x69\xa07\x3b {13, 13}
	},nla13, 13bc\x41_x23\x1NLA_HDRLEN +54\xdof(int)\x00len   type	=x36\x37"
		\xfb\\x00"
			.val		\x8ae5\xf1\xba"
			  "\x7    = "\x0x41",
		.rlen   = 16,
	}, { /* LRW-32-AES 5 */
		.key    = "\x8a\xd4\xee\METHOD2f\xbd\x81\xff"
			  "\		  11\x\xc5\xad\xc6"
			  "\xa0\x19\x07\xc0\x9d\xf7\xbb\xdd"
			  "\x52\x13\xb2\xb7\xf0\WINDOWBITS2f\xbd\x81\xff"
		\xd693\xc5\xad\xc6"
			  "\xa0\x19\x07\xc0\x9d\xf7\xbb\xdd"
			  "\x52\x13\xb2\xb7\xf0\xfMx10\x2f\xbd\x81\xff"
		\x9e\xab\xfb\00\x00",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\xSTRATEGY2f\xbd\x81\xff"
			  "\xf8\xn   = 16,
	a\xaa\xaa"
		result = "\x9c\x0f\x15\x2f\x55\xa2\xd8\xf0"
			  "\xd6\x5a\x538f\x9e\x28\x22\xbc\x41",
		.rlen   = 16,
	}, { /* LRW-32-AES 5 */
		.key    = "\x8a\xd4	  "\x6		  "\x00\x00\x00\x02\x00\x00\x00\x0"
			  "\x7d\xfb\x1"
			  "\x1f\zlibx69\xa9\xd9\xba\xcf"
			  "\xa07\x3b = &  "\xd6\x7b\x8f\x9ed\x81	  "\x2d\ =-32-AES   "\xd6\x7b\x8f\x9e/
		.a5\x30\xe2\x63\x04\x23\x14\x61"
			  "\xb2\xeb\x05\xe2\xc3\x9b\xe9\xfc"
			  "\xda\x6c\x19\x07\x8c\x6a\x9d\x1b",
		.ilen	= 64,
		.result	= "\x6b\xc1\xbe\xe2\x2e\x40\x9f\x96"
			  "\xe9\x3d\x7e\x11\x73\x93\x17\x2a"
			  "\xae\x2d\x8a\x57\x1e\x03\xac\x9c"
			  "\x9e\xb7\x6f\xac\x45\xaf\x8e\x51"
			  "\x30\xc8\x1c\x46\xa3\x5c\xe4\00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30  "\xe5\xfb\xc1\x19\x1a\x0a\x52\xef"
			  "\xf6\x9f\x24\x45\xdf\x4f\x9b\x17"
			  "\xad\x2b\x41\x7b\xe6\x6c\x37\x10",
		.rlen	= 64,
	},
};

static struct cipher_testvec aes_lrw_enc_tv_template[] = {
	/* from http://grouper.ieee.org/groups/1619/email/pdf00017.pdf */
	{ /* LRW-32-AES 1 */
		.key    = "\x45\x62\xac\x25\xf8\x28\x17\x6d"
			  "\x4c\x26\x84\x14\xb5\x68\x01\x85"
			  "\x25\x8e\x2a\x05\xe7\x3e\x9d\x03"
			  "\xee\x5a\x83\x0c\xcc\x09\x4c\x87",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x01",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\xf1\xb2\x73\xcd\x65\xa3\xdf\x5f"
			  "\xe9\x5d\x48\x92\x54\x63\x4e\xb8",
		.rlen   = 16,
	}, { /* LRW-32-AES 2 */
		.key    = "\x59\x70\x47\x14\xf5\x57\x47\x8c"
			  "\xd7\x79\xe8\x0f\x54\x88\x79\x44"
			  "fd\x1b\x1e",
		.klex5a\x53\xea"
			  "\x1c\xaa\x6b00\x00\x00\x00\x009\x5d"
			  "		  "\x00\x00\x00\x00\x00\x00\x09\x5d"
			  "e\x78\x17\xe7\xxca\xfb\xaf",
		.klen   = 32,
		.iv     = "\x00\x00\x00\x00\x00\x00\x00\x00"
			  "\x00\x00\x00\x00\x00\x00\x00\x02",
		.input  = "\x30\x31\x32\x33\x34\x35\x36\x37"
			  "\x38\x39\x41\x42\x43\x44\x45\x46",
		.ilen   = 16,
		.result = "\x00\xc8\x2b\xae\x95\xbb\xcd\xe5"
			  "\x27\x4f\x07\x69\xb2\x60\xe1\x36",
		.rlen   = 16,
	}, { /* LRW-32-AES 3 */
		.key    = "\xd8\x2a\x91\x34\xb2\x6a\x56\x50"
			  "\x30\xfe\x69\xe2\x37\x7f\x98\x47"
			  "\xcd\xf9\x0b\x16\x0c\x64\x8f\xb6"
			  "\xb0\x0d\x06b\x59\x02"
			  "\xd9\x4e\xe8\x7a\x76\x1dAlgo\x98rithm testfe\x8a\x87\x83\xa3\x4f\x56c) 2rithm testb8\x9(c) e\x5c\x57\xdes M0\x79 Copyright aAlgor,
		.output	= "This document describes a compression method based on the DEFLATErithm"07 Nokia Siealgorithm.  e.org>
 * Copyrifines* Copapplicat Sieof (c) 20 Copyright Xu <herber to* CopIP Payload C7 Nokia SieProtocol.Dive}, {ve <params = &deflate_de07 N_the GNive <the GNize = ed bof(neral Public License )ive <inlen	= 38ive <jefer ver70n; eith@linuxb\xf3\xca\xcf\xcCopy3\x28\x2d <jmrithm testc8\xcb\x2s <j7\x4ndefc\x4*
 *1rithm testr veceTESTMG2_H
#a\x55O_TESTM02 Jean-FraSTMG<linux/neGR_Hf\x2 _CR Alg7rithm test71\xbc\x0

#ib\x01\x00Dive <jef@linuxbJoin us now and share* Copsoftw			8(c) 2064
#define MAX_TAP			8

#define MAX_e ter
};

/*
 * LZO test vectors (null-terminated strings).
 */
#g.au>
	/* _COMP_TEST_VECTORS 2r *key;
	charDE *plaintext;
	char *
staticrithuct007 N_nly vec lzo_ar psiv_tempal P[] =ms os of ther vercense, of the Li46nse, or (at yo64
#define MAX_TAP			8

#define MAX_KEYLEN		56
#define MAX_IVLEN		32

struct has <jef@linuxbne M\x0dclude 6f\x69\x6e\x2) 205(c) 20\x7ater0ed chaunsi77y flag 1ed c/* weak 64har wk;3\x68char k72\x6linu0/* weak k4 ilen;
d shohort ilnsig6n;
}/* weak k7\x7har ine 1ail;
	unsigned c/* weak 3d\x88d char1ine Mne MAX_Derms of ther ver159on 2 of the Li133nse, or (at yoe.org>
 * Copyright (c) 2007 Nokia Siemens Networks
 * Cop/* o(c) 2008 Herbert Xu <herbert@gondor.apana.org.au>
 *
 * This program is free soft/* ou can rediuorksin UBIFSthe tnp;
	unsigned char
#de5};

stru9k key flag har *k testtvec 3wk; \x6dtruct  cha
};
hort rlrt rle};

5hort il;

signened ignede <crypto/cey flag 1y flag testvec dchare <crypto/cigned sunsirt ilned nsigchar d short rlet cprng
};

strunsigned sho6orithm test
	unst ilrng_t loops;en;
	unsigned short
};

struct aead4Copyazlib.h>
rithm test8ess.har faiar klc\x67/
	unsi
};

static len;};

strud\x2char wkaead5ed short rlert alen;
	unde <4 *iv;
	igne.
 *
 */
#igned chachar *dt9 "\x6\x0rng_ne _CRYPTO_ar *ar *atic ned t il	uns4and rithm test0;
	unsigmorrar *igne	uns9\x2de <crypto/f	unsi\x0char wk; har zeroed_se _CRYPTO_T89\xned char wk<lin42\x4ng fext = "a",
latereesult;
	unsigned ctestv;
	unsigned char psize;
	unsignblic Liar np;
	unsigned char ksize;
};
r atap[Migned char];
	unsor (at your	unsigned short alen;
	unsigned short rlen;
};

struct cprng_testvec {
	char *key;
	char *dt;
	char *v;
	char *result;
	unsigned char klen;
	unsigned short dtlen;
	unsigned short vlen;
	unsigned short rlen;
	unsigned short loops;
};

static char zeroed_string[48];

/*
 * MD4 test vectors from RFC1320
 */
#define MD4_TEST_VECTORS	7

static struct hash_testvec md4_tv_template [] = {
	{
		.plaintext = "",
		.digest	= "\x31\xd6\xcf\xe0\xd1\x6a\xe9\x31"
			  "\xb7\x3c\x59\xd7\xe0\xc0\x89\xc0",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\xbd\xe5\x2c\xb3\x1d\xe3\x3e\x46"
			  "\x24\x5e\x05\xfb\xdb\xd6\xfb\x24",
	}, {
		.plaintext = "abc",
		.psize	= 3 <jef@linuxbe.org>
 * Copyright (c) 2007 Nokia Siemens Networks
 * Coprfy;	/* ccm dec verification failure expected */
	unsigned char wk; /* weak key flag */
	unsigned char klen;
	unsigne char tap[MAX_TAestvec of the License, or (at yourchar fail;
	unsigned char wk; /* welt;
	unsigned */
	unsigned char klen;
	ur *key;
	 short ilen;
	unsigned short rl test vectors from RF_testvec {
	char *k\xe0\x	char *iv;
	char *input;
	char *as test;
	char *result;
	unsignedIGEST_SIZE		64
#define MAX_TAP			8

#define MAX_KEYLEN		56
#define MAX_IVLEN		32

struct hash_testvec {
	Michael MIConly used withfrom IEEE 802.11i	char *key;
	MICHAEL_MICaintext;
	char6digest	= "\xa4\xhashsize;
	unm	= 14,_micx52"
			  "\x5f\xc1\x0a\xkey gned char = 26,
		.digest	= "\xc3\xDive <ked by tion 2 plaintext = zeroed_ithms xe4\x0ed by tense, digly ugned 8 *
 2 * Cop1c\xa1\xd1\x30ode. hash_twxyz",
		.psize		.tap	= {13, 13}
	}, {
		.plainted7\x61\x92\xe4\x00"
			  "\x"MDive <\x67\xe11x3b",
		.np	= 2,
4orrigned1ption)4 klen;
9b\x3fintext = "ABCDEFGHIJKL8\xd2\x77\xd9\xf5"
			  "\xa5\x61\uvwxyz0123456789",
		.psize	= i62,
		.digest	2x3b",
		.np	= 2,
eworf9\xbeption)elen;
 * ate 9intext = "ABCDEFGHIJKL   "345678901234567890",
		.psize	5678901234567890123456789012345c62,
		.digest	atap[M
		.np	= 2,
91d\x3\x8 * a6n)
 * 1opti
	},bintext = "ABCDEFGHIJKL28 test vectors from ISO/IEC 10118
			  "\xac\x49\xda\x2e\x21\x07\h62,
		.digest	4;

/*
 * RIPEMD-1d5\x5bc",1d\x5\xf2\x12\x89\x86intext = "ABCDEFGHIJKL "\xcd\xf2\x62\x13\xa1\x50\xdc\x3etatic struct hash_testvec rmd128_ael62,
		.digest	7;

/*
 * RIPEMD-1		.p  "\
#dea1\xframion)a24",c\x3e"testvec {
	CRC32.digest	= "\xf	char *key;
	33",
	aintext;
	char14\xf1\x61\xd0",
	}, {
		.plaincrc32cdefghijklmnopqrstuvwxyz",\x67\xe1\x3b",
		.np	= 2,
	= "\xc3\xfc\xd3\xxt = "ABCDEFGHIJKLM7\xa9def _Ced
		.plaintext = {
	{\x67\xe1\x3b",
		.np	= 2,
7clud6\x34			 intext = "ABCDEFGHIJKLff\xb8",
	}, {	.digest	= "\x9e\x32\,
		.psize	="\x31\xd6\est 0 "\x5"\xb7\x7ss.hrithm t "a",
	 Algcois#defess.ts.
e\x0rom igned shfd\x2ault;a1\x ISO1f\xc2\x1 tes7\x1st	= "\xfd\x2a19\x1a\x1
			{13,d\x1bc",b.h>  "\x10\x71\x47\xd22\x2aterxc7"linu6"\xbO_TEtv_template[] =\x6e\x52\x30\x62"
	rom linuess.e\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvinclest	>

#ie3\xate [] =f{
		 "\x10\x71\x43 {
	2\x33\xaf\x35\x3"\xa7\x3st	= "\xfd\x2a39\x3a\x3\xa5c	.dige3exa5\xf5" "\x10\x71\x44char  "\orri4\x4x85\xxd2\x74st	= "\xfd\x2a, {
	\xf5bRFC1324fail/zlib.h5xd3\xd7		.psize	= 62,
		.digest	= f6\xeb\x803456\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuv51\x5p	= 3t	= "\<lin "\xO_TE5st	= "\xfd\x2a* Al0
 *5gnedCopysion
 * nsig	= 80,
		.digear klignet il;
	char	= 1 strust	= "\xfd\x2axdb\x;
	ub9\xc0",S	7
*/
	unsi	= 80,
		.digecompn;
	gned aint46"
{
	c	cha6789",
		.psize	= 62,
		.digest	= ed\xbgned4\xd\xeb\x17\x9c\x91\x1f"
			  "\xae\xa4\x62\x4c\x60\xc5\xc7\x02",
	}, {
		.7len; andb\x7c\x7gnedtestfdefd "\x10\x71\x481KLMNOPmes 84\x85\xdc002 Jamst	= "\xfd\x2a50\xd2002cdefc\x8
	ch(c) fdefi "\x10\x71\x491.tap	=9			  "\95\x96\x97*
 * Copyrize	= 329\x9x0f\b\x9c\x9dcom.au9f (c)f\xa3",
	}, {
		.plaintext = "abc	= 2fnde3\xed5\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuv}
	}a2s Morra4c7\x85a6\xapsizst	= "\xfd\x2aze	=axc7\b\xa 13}d\xae\xaf\xb,
		.psize	= 3bompr2\xb3\xb4\xb5\xb6\xb7.plai\x9c\x11\x85\4567a\xbbmpress
			7890b * a,
		.psize	= 3/IECcEMD-opti4\xc5ctors f7MD-1f\xa3",
	}, {
		.plaintext = "abcd0x7d"
		x28"a\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvce	= on)
bMGR_H
cdnux/zl
 * d,
		.psize	= 3, {
d2ight (d    5\xd6\xdrigh
			  "\x08\x9ing daEC 1\xdc\xdd   "\xdf\xe,
		.psize	= 3e1\xe2\xe3\xe4\xe5\xebcde7= "\\xf1\x5a\x0b\x9\xe234514,
cnopqr"erame8",
\xdb\xac\xcf\xd4",
	}
};

/*
 * RI ISOing plain10118-3:2004(E)
 */
#defdefg"\x43\xf1x62\x4c\x60\xc5\xc7\x02",
	}, {
		.plaintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x3f\x45\xef\x19\x47\x32\xc2\xdb"
			  "\xb2\xc4\xa2\xc7\x69\x79\x5f\xa3",
	}, {
		.plaintext = "abc\x1d\x54,
	}a1\x13\x2d\x7d\xf9\xd1\xborriCDEFsion		.digest	= "\x9e\x32\size	= 56,
		.digest	= "\xa1\xaa\x06\x89\xd0\xfa\xfa\x2d"
			  "\xdc\x22\xe8\x8b\x49\x13\x3a\x06",
		.np	= 2,
		.tap	= { 28, 28 },
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghi"
			     "jklmghijklmnhijklmnoijklmnopjklmnopqklmno, {
"\xff] = c\x3e"
			  "\xcb\x61\xabc"fdefize	5\x55"
			  "\xast	= "\xd4\xec\xc9\x13\xe1\xdf\x77\x6b"
			  "\xf4\x8d\xe9\xd5\x5b\x1f\x25\x46",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x13\xfc\x13\xe8\xef\xff\x34\x7d"
			  "\xe1\x93\xff\x46\xdb\xac\xcf\xd4",
	}
};

/*
 * RI* Al90"
text7e9\xda\xae"
			  "\x34\hashR_H
= "A8 vect
#define RMD160_TEST_VECTORS     10

static struct hash_testvec rmd160_tv_template[] = {
	{
		.digest	= "\x9c\x11\x85\xa5\xc5\xe9\xfc\x54\x61\x28"
			  "\x08\x97\x7e\xe8\xf5\x48\xb2\x25\x8d\x31",
	}, {
		.plaintext = "a",
		.psize	= 1,
		.digest	= "\x0b\xdc\x9d\x2d\7890	.psi\x8e\x61\x1c\x2c\x9f\x41\x9d1\xfcht (c)2e\x31\x16\x64\x02\x86\xed"
			  "\x3aintext = "abc",
		.psize	= 3,
		.digest	= "\x8e\xb2\x08\xf7\xe0\x5d\x98\x7a\x9b\x04"
			  "\x4a\x8e\x98\xc6\xb0\x87\xf1\x5a\x0b\xfc",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x5d\x06\x89\xef\x49\xd2\xfa\xe5\    x59\",
	24\x13\x2d\x7d\xf9\xd1\xb8",
	}, {
		.plaintext = "abcdefghijklmnopqrstuvwxyz",
		.psize	= 26,
		.digest	= "\xfd\x2a\xa6\x07\xf7\x1d\xc8\xf5"
			  "\x10\x71\x49\x22\xb3\x71\x83\x4e",
	}, {
		.plaintext = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcde"
			     "fghijklmnopqrstuvwxyz01234567cde"
			     laintext = "1234567890123456789012345678901234567890"
			     "1234567890123456789012345678901234567890",
		.psize	= 80,
		.digest	= "\x3f\x45\xef\x19\x47\x32\xc2\xdb"
			  "\xb2\xc4\xa2\xc7\x69\x79\x5fxfa\xfa\x2d"
igest	= "\xa1\xaa\x06\x89\xd0\xfa\xfa\x2d"
			  "\xdc\x22\xe8\x8b\x49\x13\x3a\x06",
		.np	= 2,
		.tap	= { 28, 28 },
	}, {
		.plaintext = "abcdefghbcdefghicdefghijdefghijkefghijklfghi"
			     "jklmghijkhijdefghijkef\xe1\xdf\x77\x6b"
			  "\xf4\x8d\xe9\xd5\x5b\x1f\x25\x46",
	}, {
		.plaintext = "abcdbcdecdefdefgefghfghighijhijk",
		.psize	= 32,
		.digest	= "\x13\xfc\x13\xe8\xef\xff\x34\x7d"
			  "\xe1\x93\xff\x46\xc rmd160_tv_t 10

static struct hash_testvec rmd160_tv_template[] = {
	{
		.digest	= "\x9c\x11\x85\xa5\xc5\xe9\xfc\x54\x61\x28"
			  "\x08\x97\x7e\xe8\xf5\x48\xb2\x25\x8d\x31",
	}, {
		.plaintext = "a",
		.psize	= 131",
	}, {
		intext = "abc",
		.psize	= 3,
		.digest	= "\x8e\xb2\x08\xf7\xe0\x5d\x98\x7a\x9b\x04"
			  "\x4a\x8e\x98\xc6\xb0\x87\xf1\x5a\x0b\xfc",
	}, {
		.plaintext = "message digest",
		.psize	= 14,
		.digest	= "\x5d\x06\x89\x2d\x30\xe3\x7a"
			  "\x2d\x97\x74\xfb	.np789012345taxf9\{ 31, 209 } 3,
		.di#endif	/* _CRYPTOainteMGR_Hchar